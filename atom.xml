<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nMask&#39;s Blog</title>
  <subtitle>那一年，风陵渡口.......</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thief.one/"/>
  <updated>2019-03-21T08:44:13.248Z</updated>
  <id>http://thief.one/</id>
  
  <author>
    <name>nMask</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python代码加密混淆</title>
    <link href="http://thief.one/2019/03/21/1/"/>
    <id>http://thief.one/2019/03/21/1/</id>
    <published>2019-03-21T06:27:09.000Z</published>
    <updated>2019-03-21T08:44:13.248Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">我多想再见你<br>哪怕匆匆一眼就别离</blockquote><br>　　python作为一种解释型语言，源代码加密本身比较困难。但有时候我们在发布一款python产品时又必须考虑到代码的加密性，以避免源代码泄露。为此，我查阅了一些资料，研究了几种python代码加密的常见方式，在此记录一下。<br><a id="more"></a></p>
<h2 id="源代码加密"><a href="#源代码加密" class="headerlink" title="源代码加密"></a>源代码加密</h2><h3 id="（一）py脚本编译成pyc二进制文件"><a href="#（一）py脚本编译成pyc二进制文件" class="headerlink" title="（一）py脚本编译成pyc二进制文件"></a>（一）py脚本编译成pyc二进制文件</h3><p>编译命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m py_compile file.py</div></pre></td></tr></table></figure></p>
<p>　　pyc文件是一个二进制文件，但是可以被很轻松的被逆向，在线反编译工具：<code>https://tool.lu/pyc/</code>。当然也有针对这个问题的解决方案，解决方案是可以通过修改python源代码中的opcode，然后重新编译py代码，可以一定程度上防止被逆向，因为逆向者需要知道被修改的opcode才能还原出来。如果使用私有的Bytecode指令集，那么通常的Python反汇编器和反编译器无法工作在由你私有Python编译器产生的pyc文件上，也相当于保护了你的Python代码。但是这么做的代价是你的Python应用只能在你的私有Python解释器上运行。（实际在发布一款产品时，并不适用）</p>
<h3 id="（二）py脚本打包成exe文件"><a href="#（二）py脚本打包成exe文件" class="headerlink" title="（二）py脚本打包成exe文件"></a>（二）py脚本打包成exe文件</h3><p>　　exe文件针对windows平台使用，一般是使用打包程序（py2exe、PyInstaller等）打包成exe，这些工具用于将一个Python项目打包成单个可执行的文件，方便（在没有Python环境的机器上）使用。但通过压缩包可以方便地得到所有pyc文件或源文件，与C/C++编译生成的可执行文件有本质上的区别，基本上是零保护，所以需要将exe进行加壳操作。</p>
<h3 id="（三）py脚本编译成c文件（cython）"><a href="#（三）py脚本编译成c文件（cython）" class="headerlink" title="（三）py脚本编译成c文件（cython）"></a>（三）py脚本编译成c文件（cython）</h3><p>用cython将核心代码py模块文件转化成.c文件，再用gcc编译成so（unix）文件，或者将其编译成pyd（windows）文件。</p>
<p>编译过程：<br>1、服务器安装依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install python</div><div class="line">yum install python-devel gcc</div></pre></td></tr></table></figure></p>
<p>2、编写setup.py文件，内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">from distutils.core import setup</div><div class="line">from Cython.Build import cythonize</div><div class="line">setup(</div><div class="line">    ext_modules = cythonize(<span class="string">"test.py"</span>,language_level=2)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># 批量编译</span></div><div class="line">setup(</div><div class="line">    ext_modules = cythonize([<span class="string">"test.py"</span>,<span class="string">"test2.py"</span>.......],language_level=2)</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>3、运行以下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py build_ext —inplace</div></pre></td></tr></table></figure></p>
<p>会生成一个test.so，删除其余文件，直接引用test.so即可（跟引用py文件一样）</p>
<h2 id="源代码混淆"><a href="#源代码混淆" class="headerlink" title="源代码混淆"></a>源代码混淆</h2><p>除了加密以外，还可以对源代码进行混淆，增加源代码的阅读难度。这个有很多第三方库，我列举几个：<br><a href="https://pypi.org/project/pyminifier/" target="_blank" rel="external">https://pypi.org/project/pyminifier/</a><br><a href="https://github.com/astrand/pyobfuscate" target="_blank" rel="external">https://github.com/astrand/pyobfuscate</a><br><a href="http://pyob.oxyry.com/" target="_blank" rel="external">http://pyob.oxyry.com/</a></p>
<p>pyminifier库用法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pyminifier -O test.py &gt;&gt; test_py.py</div><div class="line">pyminifier --replacement-length=1 --obfuscate-builtins --obfuscate-import-methods --obfuscate-variables test.py</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;我多想再见你&lt;br&gt;哪怕匆匆一眼就别离&lt;/blockquote&gt;&lt;br&gt;　　python作为一种解释型语言，源代码加密本身比较困难。但有时候我们在发布一款python产品时又必须考虑到代码的加密性，以避免源代码泄露。为此，我查阅了一些资料，研究了几种python代码加密的常见方式，在此记录一下。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="python" scheme="http://thief.one/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python代码热重载函数reload</title>
    <link href="http://thief.one/2018/11/27/1/"/>
    <id>http://thief.one/2018/11/27/1/</id>
    <published>2018-11-27T09:12:26.000Z</published>
    <updated>2018-11-27T09:46:30.828Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">我走过山时，山不说话，<br>我路过海时，海不说话，<br>小毛驴滴滴答答，倚天剑伴我走天涯。<br>大家都说我因为爱着杨过大侠，才在峨嵋山上出了家，<br>其实我只是爱上了峨嵋山上的云和霞，<br>像极了十六岁那年的烟花。</blockquote><br>　　代码热重载是在一个项目中比较常见的需求，尤其是在扫描服务的开发中，扫描插件的代码需要经常修整，因此如何做到插件代码能够热重载加载，而不是每次修改代码后需要重启服务就变得尤为重要。由于最近正好在一个Python项目中需要实现热重载需求，因此写了个python版的代码热重载demo，仅供参考。<br><a id="more"></a></p>
<h3 id="python中的reload函数"><a href="#python中的reload函数" class="headerlink" title="python中的reload函数"></a>python中的reload函数</h3><p>python2中的reload函数可以直接使用，无需导入第三方模块，可以直接使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reload(module) <span class="comment"># reload接收的参数必须是已经导入的模块</span></div></pre></td></tr></table></figure></p>
<p>python3中的reload函数移到了imp库里面，因此需要导入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from imp import reload</div><div class="line">reload(module)</div></pre></td></tr></table></figure></p>
<h3 id="demo-1"><a href="#demo-1" class="headerlink" title="demo_1"></a>demo_1</h3><p>demo1是基于最常见的需求，即同一个目录下有2个文件（plugin.py，scan.py），scan.py文件调用plugin.py文件。</p>
<p>plugin.py文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> <span class="string">"plugin start scan ......"</span></div></pre></td></tr></table></figure></p>
<p>scan.py文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import time</div><div class="line">import plugin</div><div class="line"><span class="keyword">while</span> 1:</div><div class="line">    reload(plugin)</div><div class="line">    time.sleep(1)</div></pre></td></tr></table></figure></p>
<p>运行scan.py，然后手工修改plugin.py文件内容，观察输出的变化。<br><img src="/upload_image/20181127/1.jpg" alt=""></p>
<h3 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h3><p>demo2会稍微复杂一点点，即同一个目录下有2个文件（plugin.py，scan.py），scan.py文件调用plugin.py文件里面的crack函数。</p>
<p>plugin.py文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def crack():</div><div class="line">    <span class="built_in">print</span> <span class="string">"plugin start scan ......"</span></div></pre></td></tr></table></figure></p>
<p>scan.py文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import time</div><div class="line">import plugin</div><div class="line"><span class="keyword">while</span> 1:</div><div class="line">    reload(plugin)</div><div class="line">    <span class="built_in">eval</span>(<span class="string">"plugin.crack()"</span>)</div><div class="line">    time.sleep(1)</div></pre></td></tr></table></figure></p>
<p>运行结果跟demo1一样，就是在调用之前先reload一下模块，然后再利用eval调用模块的函数。</p>
<h3 id="demo3"><a href="#demo3" class="headerlink" title="demo3"></a>demo3</h3><p>demo3针对更为现实的需求，即不同目录下的2个文件（./scan.py，./plugins/plugin.py），scan.py文件调用plugins目录下的plugin.py文件里面的crack函数。</p>
<p>plugin.py文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def crack():</div><div class="line">    <span class="built_in">print</span> <span class="string">"plugin start scan ......"</span></div></pre></td></tr></table></figure></p>
<p>scan.py文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import time</div><div class="line"><span class="built_in">exec</span>(<span class="string">"import plugins.plugin"</span>)</div><div class="line"></div><div class="line"><span class="keyword">while</span> 1:</div><div class="line">    reload(<span class="built_in">eval</span>(<span class="string">"plugins.plugin"</span>))</div><div class="line">    <span class="built_in">eval</span>(<span class="string">"plugins.plugin.crack()"</span>)</div><div class="line">    time.sleep(1)</div></pre></td></tr></table></figure></p>
<p>运行结果跟demo1一样，这样需要注意的是，reload不支持from plugins improt plugin的方式重载模块，因此可以使用import plugins.plugin的方式导入模块并重载。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;我走过山时，山不说话，&lt;br&gt;我路过海时，海不说话，&lt;br&gt;小毛驴滴滴答答，倚天剑伴我走天涯。&lt;br&gt;大家都说我因为爱着杨过大侠，才在峨嵋山上出了家，&lt;br&gt;其实我只是爱上了峨嵋山上的云和霞，&lt;br&gt;像极了十六岁那年的烟花。&lt;/blockquote&gt;&lt;br&gt;　　代码热重载是在一个项目中比较常见的需求，尤其是在扫描服务的开发中，扫描插件的代码需要经常修整，因此如何做到插件代码能够热重载加载，而不是每次修改代码后需要重启服务就变得尤为重要。由于最近正好在一个Python项目中需要实现热重载需求，因此写了个python版的代码热重载demo，仅供参考。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="Python" scheme="http://thief.one/tags/Python/"/>
    
      <category term="reload" scheme="http://thief.one/tags/reload/"/>
    
  </entry>
  
  <entry>
    <title>基于rpc通信的原理及python中的rpc框架</title>
    <link href="http://thief.one/2018/10/22/1/"/>
    <id>http://thief.one/2018/10/22/1/</id>
    <published>2018-10-22T08:08:53.000Z</published>
    <updated>2018-10-22T08:59:30.476Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">这场名叫人生的旅途，有太多风景不及回顾</blockquote><br>　　最近在逛知乎的时候无意中看到了一则技术贴，讨论的主题大概是：”Web开发中，使用RPC还是RESTFUL更好？”（其实是很老的话题了）。由于本人之前在web开发中只使用过restful，因此对这个问题的答案本身并不清楚，于是便抱着学习的态度查阅了一番资料，事后觉得有必要在此记录一番。<br><a id="more"></a></p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>　　REST表示的是描述性状态传递（representational state transfer），REST整个就是关于 客户端和服务端之间的关系的，其中服务端要提供格式简单的描述性数据，常用的是JSON和XML。<br>　　RPC指的是远程过程调用(remote procedure call)，本质上在JavaScript、PHP、Python等中调用都是一样的：取方法名，传参数。因为不是每个人都喜欢XML，RPC-API可以使用 JSON-RPC协议，也可以考虑自定义基于JSON的API，像Slack是用它的Web-API实现的。</p>
<h3 id="区别与类同"><a href="#区别与类同" class="headerlink" title="区别与类同"></a>区别与类同</h3><p>　　基于RPC的API适用于动作（过程、命令等）；基于REST的API适用于领域模型（资源或实体），基于数据的CRUD (create, read, update, delete)操作。<br>　　接口调用通常包含两个部分，序列化和通信协议。常见的序列化协议包括json、xml、hession、protobuf、thrift、text、bytes等；通信比较流行的是http、soap、websockect，RPC通常基于TCP实现。那么restful使用的序列化协议通常是json，通信协议是http；rpc是一种通信协议，因此如果序列化使用json的话，那么就是json-rpc。</p>
<h3 id="大牛们的见解"><a href="#大牛们的见解" class="headerlink" title="大牛们的见解"></a>大牛们的见解</h3><p>　　大牛1：restful首先是要求必须把所有的应用定义成为“resource”，然后只能针对资源做有限的四种操作。然而所有的接口，服务器端原本就存在有相应的函数，它们本来就有自身的命名空间，接受的参数、返回值、异常等等。只需要采用轻便的方式暴露出来即可，无需把一堆函数重新归纳到“资源”，再削减脑袋把所有的操作都映射为“增删改查”。<br>　　大牛2：RPC的思想是把本地函数映射到API，也就是说一个API对应的是一个function，我本地有一个getAllUsers，远程也能通过某种约定的协议来调用这个getAllUsers。RPC中的主体都是动作，是个动词，表示我要做什么。而REST则不然，它的URL主体是资源，是个名词。<br>　　大牛3：http相对更规范、标准、通用，无论哪种语言都支持http协议。RPC协议性能要高的多，例如Protobuf、Thrift、Kyro等。对外开放给全世界的API推荐采用RESTful，是否严格按照规范是一个要权衡的问题。要综合成本、稳定性、易用性、业务场景等等多种因素。内部调用推荐采用RPC方式。当然不能一概而论，还要看具体的业务场景。</p>
<p>以上答案来源：<br><a href="https://blog.csdn.net/douliw/article/details/52592188" target="_blank" rel="external">https://blog.csdn.net/douliw/article/details/52592188</a><br><a href="https://www.zhihu.com/question/28570307" target="_blank" rel="external">https://www.zhihu.com/question/28570307</a></p>
<h3 id="个人见解"><a href="#个人见解" class="headerlink" title="个人见解"></a>个人见解</h3><p>接下来谈谈个人见解～！～，好吧，目前我没啥见解，先让我自己动手用用看rpc协议再说。</p>
<h3 id="python的rdc协议框架-zerorpc"><a href="#python的rdc协议框架-zerorpc" class="headerlink" title="python的rdc协议框架-zerorpc"></a>python的rdc协议框架-zerorpc</h3><p>　　Zerorpc是一个基于ZeroMQ和MessagePack开发的远程过程调用协议（RPC）实现。和 Zerorpc 一起使用的 Service API 被称为 zeroservice。Zerorpc 可以通过编程或命令行方式调用。<br>官方demo.py如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import zerorpc</div><div class="line">class Cooler(object):</div><div class="line">    <span class="string">""</span><span class="string">" Various convenience methods to make things cooler. "</span><span class="string">""</span></div><div class="line">    def add_man(self, sentence):</div><div class="line">        <span class="string">""</span><span class="string">" End a sentence with "</span>, man!<span class="string">" to make it sound cooler, and</span></div><div class="line">        return the result. "<span class="string">""</span></div><div class="line">        <span class="built_in">return</span> sentence + <span class="string">", man!"</span></div><div class="line">    def add_42(self, n):</div><div class="line">        <span class="string">""</span><span class="string">" Add 42 to an integer argument to make it cooler, and return the</span></div><div class="line">        result. "<span class="string">""</span></div><div class="line">        <span class="built_in">return</span> n + 42</div><div class="line">    def boat(self, sentence):</div><div class="line">        <span class="string">""</span><span class="string">" Replace a sentence with "</span>I<span class="string">'m on a boat!", and return that,</span></div><div class="line">        because it's cooler. <span class="string">""</span><span class="string">"</span></div><div class="line">        return "I<span class="string">'m on a boat!"</span></div><div class="line">s = zerorpc.Server(Cooler())</div><div class="line">s.bind("tcp://0.0.0.0:4242")</div><div class="line">s.run()</div></pre></td></tr></table></figure></p>
<p>运行以上代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ zerorpc -j tcp://localhost:4242 add_42 1</div><div class="line">43</div></pre></td></tr></table></figure></p>
<p>分析一下：从demo来看，就是远程通过rpc协议（tcp）进行了函数调用！！！这个操作还是有点666的，因为使用restful只能对资源或者说数据进行操作，而rpc协议直接对函数进行操作，且代码简单。</p>
<p>参考一下github：<a href="https://github.com/dotcloud/zerorpc-python" target="_blank" rel="external">https://github.com/dotcloud/zerorpc-python</a></p>
<h3 id="个人见解-1"><a href="#个人见解-1" class="headerlink" title="个人见解"></a>个人见解</h3><p>　　简单说下个人理解，个人认为rpc与restful本身定位方向是有所不同的，restful偏向资源或者说数据的通信，注重接口的规范性，总之更加通用；rpc协议用于服务功能的调用，具体说就是函数的调用，可以适合更复杂通信需求的场景。因此以上有个大牛的说法我还是比较认同的，对内可以选择使用rpc，因为性能优势等原因，而对外使用resutful，因为通用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;这场名叫人生的旅途，有太多风景不及回顾&lt;/blockquote&gt;&lt;br&gt;　　最近在逛知乎的时候无意中看到了一则技术贴，讨论的主题大概是：”Web开发中，使用RPC还是RESTFUL更好？”（其实是很老的话题了）。由于本人之前在web开发中只使用过restful，因此对这个问题的答案本身并不清楚，于是便抱着学习的态度查阅了一番资料，事后觉得有必要在此记录一番。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="python" scheme="http://thief.one/tags/python/"/>
    
      <category term="rpc" scheme="http://thief.one/tags/rpc/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置相关笔记</title>
    <link href="http://thief.one/2018/07/26/1/"/>
    <id>http://thief.one/2018/07/26/1/</id>
    <published>2018-07-26T09:45:34.000Z</published>
    <updated>2018-07-27T03:47:15.988Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">好久没更，来水一篇～！～</blockquote><br>　　就在刚刚，我花了四百大洋租了台腾讯云香港的服务器（～心在滴血～），因此我的博客终于可以宣告回国了。PS：之前一直使用github-page，众所周知速度贼慢，后面换成了新加坡的VPS服务器，速度就更慢了，没办法只能花大价钱买国内的云服务器。博客迁移得过程比较简单，无非就是添加nginx解析，因此本篇有点水，主要为了记录一下nginx配置web服务的一些笔记。<br><a id="more"></a></p>
<h3 id="http-301-https"><a href="#http-301-https" class="headerlink" title="http 301 https"></a>http 301 https</h3><p>我的博客使用了腾讯云免费签发的证书，因此可以使用https访问，默认情况下http也是可以访问的，那么如何将http请求301重定向到https，便是第一个要解决的问题。<br>编辑/etc/nginx/nginx.conf文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">server &#123;</div><div class="line">       listen         80;</div><div class="line">       server_name    thief.one;</div><div class="line">       <span class="built_in">return</span>         301 https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen 443;</div><div class="line">    server_name thief.one;</div><div class="line">    ......</div><div class="line">&#125;</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>创建一个80端口，一个443端口的web服务，并且将80端口的服务重定向到<em>https://….</em>。重启nginx后，访问<em><a href="http://thief.one">http://thief.one</a></em>会被301重定向到<em><a href="https://thief.one">https://thief.one</a></em></p>
<h3 id="禁止访问某些目录文件"><a href="#禁止访问某些目录文件" class="headerlink" title="禁止访问某些目录文件"></a>禁止访问某些目录文件</h3><p>由于我的博客项目存放在git上，因此服务器web目录内含有.git目录，也算是敏感信息泄露（当然都是一些静态的网页，其实也没有什么危害），那么如何在nginx中配置访问.git目录403是要解决的第二个问题。<br>编辑/etc/nginx/nginx.conf文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 443;</div><div class="line">    server_name thief.one;</div><div class="line">    ......</div><div class="line"></div><div class="line">    location /.git/ &#123;</div><div class="line">            deny    all;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>添加一个location，禁止访问某目录。重启nginx后，尝试访问<em><a href="https://thief.one/.git/config">https://thief.one/.git/config</a></em> 返回403</p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>这个之前总结过：<a href="https://thief.one/2017/08/22/1/">https://thief.one/2017/08/22/1/</a></p>
<h3 id="只能通过域名访问"><a href="#只能通过域名访问" class="headerlink" title="只能通过域名访问"></a>只能通过域名访问</h3><p>如果博客不想通过IP被访问到，需要在nginx上配置禁止ip访问，或者访问ip跳转到域名。<br>编辑/etc/nginx/nginx.conf文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       80 default_server;</div><div class="line">        listen       443 default_server;</div><div class="line">        <span class="built_in">return</span> 403</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重启nginx，访问：<em><a href="http://150.109.106.49/" target="_blank" rel="external">http://150.109.106.49/</a></em> 返回403。</p>
<h3 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h3><p>首先说明一下，一般我不推荐使用root权限启动nginx服务。但如果nginx服务是用root权限安装的，且网站放在root目录下，启动nginx解析网站会有权限问题（因为配置文件中默认不是用root权限启动），因此需要更改配置文件为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user root;</div></pre></td></tr></table></figure></p>
<p>更安全的方法是用普通用户权限安装nginx，并将web目录移到普通用户目录下，用普通用户权限启动nginx服务。</p>
<p><em>nginx配置相关问题笔记，之后我都会记录在此篇中</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;好久没更，来水一篇～！～&lt;/blockquote&gt;&lt;br&gt;　　就在刚刚，我花了四百大洋租了台腾讯云香港的服务器（～心在滴血～），因此我的博客终于可以宣告回国了。PS：之前一直使用github-page，众所周知速度贼慢，后面换成了新加坡的VPS服务器，速度就更慢了，没办法只能花大价钱买国内的云服务器。博客迁移得过程比较简单，无非就是添加nginx解析，因此本篇有点水，主要为了记录一下nginx配置web服务的一些笔记。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="nginx" scheme="http://thief.one/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Python3.5协程学习研究</title>
    <link href="http://thief.one/2018/06/21/1/"/>
    <id>http://thief.one/2018/06/21/1/</id>
    <published>2018-06-21T03:00:19.000Z</published>
    <updated>2018-06-21T07:18:04.934Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">今夕何夕故人不来迟暮连山黛</blockquote>

<p>　　 之前有研究过python协程相关的知识，但一直没有进行深入探究。平常工作中使用的也还是以python2为主，然而最近的项目需要使用python3协程相关的内容，因此凑出时间学习了一番python3的协程语法。<br>　　 本篇主要以介绍python3.5的async/await协程语法为主，因为这种语法看上去很别扭，不容易理解。如果对python协程基础不是很了解，建议可以先看此篇：<a href="https://thief.one/2017/02/20/Python%E5%8D%8F%E7%A8%8B/">Python协程</a>。<br><a id="more"></a></p>
<h3 id="协程函数（异步函数）"><a href="#协程函数（异步函数）" class="headerlink" title="协程函数（异步函数）"></a>协程函数（异步函数）</h3><p>　　 我们平常使用最多的函数都是同步函数，即不同函数执行是按顺序执行的。那么什么是异步函数呢？怎么创建异步函数？怎么在异步函数之间来回切换执行？不急，请往下看。</p>
<h4 id="创建协程函数"><a href="#创建协程函数" class="headerlink" title="创建协程函数"></a>创建协程函数</h4><p>先来看下普通函数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line"></div><div class="line">def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"3"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"4"</span>)</div><div class="line"></div><div class="line">a = test1()</div><div class="line">b = test2()</div><div class="line"><span class="built_in">print</span>(a,<span class="built_in">type</span>(a))</div><div class="line"><span class="built_in">print</span>(b,<span class="built_in">type</span>(b))</div></pre></td></tr></table></figure></p>
<p>运行以上代码得到结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">None &lt;class <span class="string">'NoneType'</span>&gt;</div><div class="line">None &lt;class <span class="string">'NoneType'</span>&gt;</div></pre></td></tr></table></figure></p>
<p>说明：程序顺序执行了test1、test2函数，在调用函数的时候就自动进入了函数体，并执行了函数的内容。</p>
<p>然后使用async关键词将普通函数变成协程函数，即异步函数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"3"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"4"</span>)</div><div class="line"></div><div class="line"><span class="built_in">print</span>(test1())</div><div class="line"><span class="built_in">print</span>(test2())</div></pre></td></tr></table></figure></p>
<p>运行以上代码得到结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;coroutine object test1 at 0x109f4c620&gt;</div><div class="line">asyncio_python3_test.py:16: RuntimeWarning: coroutine <span class="string">'test1'</span> was never awaited</div><div class="line">  <span class="built_in">print</span>(test1())</div><div class="line">&lt;coroutine object test2 at 0x109f4c620&gt;</div><div class="line">asyncio_python3_test.py:17: RuntimeWarning: coroutine <span class="string">'test2'</span> was never awaited</div><div class="line">  <span class="built_in">print</span>(test2())</div></pre></td></tr></table></figure></p>
<p>说明：忽略结果中的告警，可以看到调用函数test1、test2的时候，并没有进入函数体且执行函数内容，而是返回了一个coroutine（协程对象）。</p>
<p>除了函数外，类的方法也可以使用async关键词将其变成协程方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class <span class="built_in">test</span>:</div><div class="line">    async def run(self):</div><div class="line">        <span class="built_in">print</span>(<span class="string">"1"</span>)</div></pre></td></tr></table></figure></p>
<h4 id="执行协程函数"><a href="#执行协程函数" class="headerlink" title="执行协程函数"></a>执行协程函数</h4><p>　　 前面我们成功创建了协程函数，并且在调用函数的时候返回了一个协程对象，那么怎么进入函数体并执行函数内容呢？类似于生成器，可以使用send方法执行函数，修改下前面的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"3"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"4"</span>)</div><div class="line"></div><div class="line">a = test1()</div><div class="line">b = test2()</div><div class="line"></div><div class="line">a.send(None)</div><div class="line">b.send(None)</div></pre></td></tr></table></figure></p>
<p>运行以上代码得到以下结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"asyncio_python3_test.py"</span>, line 19, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    a.send(None)</div><div class="line">StopIteration</div><div class="line">sys:1: RuntimeWarning: coroutine <span class="string">'test2'</span> was never awaited</div></pre></td></tr></table></figure></p>
<p>　　 说明：程序先执行了test1协程函数，当test1执行完时报了StopIteration异常，这是协程函数执行完饭回的一个异常，我们可以用try except捕捉，来用判断协程函数是否执行完毕。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"3"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"4"</span>)</div><div class="line"></div><div class="line">a = test1()</div><div class="line">b = test2()</div><div class="line"></div><div class="line">try:</div><div class="line">    a.send(None) <span class="comment"># 可以通过调用 send 方法，执行协程函数</span></div><div class="line">except StopIteration as e:</div><div class="line">    <span class="built_in">print</span>(e.value)</div><div class="line">    <span class="comment"># 协程函数执行结束时会抛出一个StopIteration 异常，标志着协程函数执行结束，返回值在value中</span></div><div class="line">    pass</div><div class="line">try:</div><div class="line">    b.send(None) <span class="comment"># 可以通过调用 send 方法，执行协程函数</span></div><div class="line">except StopIteration:</div><div class="line">    <span class="built_in">print</span>(e.value)</div><div class="line">    <span class="comment"># 协程函数执行结束时会抛出一个StopIteration 异常，标志着协程函数执行结束，返回值在value中</span></div><div class="line">    pass</div></pre></td></tr></table></figure></p>
<p>运行以上代码得到以下结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td></tr></table></figure></p>
<p>　　 说明：程序先执行了test1函数，等到test1函数执行完后再执行test2函数。从执行过程上来看目前协程函数与普通函数没有区别，并没有实现异步函数，那么如何交叉运行协程函数呢？</p>
<h4 id="交叉执行协程函数（await）"><a href="#交叉执行协程函数（await）" class="headerlink" title="交叉执行协程函数（await）"></a>交叉执行协程函数（await）</h4><p>　　 通过以上例子，我们发现定义协程函数可以使用async关键词，执行函数可以使用send方法，那么如何实现在两个协程函数间来回切换执行呢？这里需要使用await关键词，修改一下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">    await asyncio.sleep(1) <span class="comment"># asyncio.sleep(1)返回的也是一个协程对象</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"3"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"4"</span>)</div><div class="line"></div><div class="line">a = test1()</div><div class="line">b = test2()</div><div class="line"></div><div class="line">try:</div><div class="line">    a.send(None) <span class="comment"># 可以通过调用 send 方法，执行协程函数</span></div><div class="line">except StopIteration:</div><div class="line">    <span class="comment"># 协程函数执行结束时会抛出一个StopIteration 异常，标志着协程函数执行结束</span></div><div class="line">    pass</div><div class="line"></div><div class="line">try:</div><div class="line">    b.send(None) <span class="comment"># 可以通过调用 send 方法，执行协程函数</span></div><div class="line">except StopIteration:</div><div class="line">    pas</div></pre></td></tr></table></figure></p>
<p>运行以上函数得到以下结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">3</div><div class="line">4</div></pre></td></tr></table></figure></p>
<p>　　 说明：程序先执行test1协程函数，在执行到await时，test1函数停止了执行（阻塞）；接着开始执行test2协程函数，直到test2执行完毕。从结果中，我们可以看到，直到程序运行完毕，test1函数也没有执行完（没有执行print(“2”)），那么如何使test1函数执行完毕呢？可以使用asyncio自带的方法循环执行协程函数。</p>
<h4 id="await与阻塞"><a href="#await与阻塞" class="headerlink" title="await与阻塞"></a>await与阻塞</h4><p>　　 使用async可以定义协程对象，使用await可以针对耗时的操作进行挂起，就像生成器里的yield一样，函数让出控制权。协程遇到await，事件循环将会挂起该协程，执行别的协程，直到其他的协程也挂起或者执行完毕，再进行下一个协程的执行，协程的目的也是让一些耗时的操作异步化。</p>
<p>注意点：await后面跟的必须是一个Awaitable对象，或者实现了相应协议的对象，查看Awaitable抽象类的代码，表明了只要一个类实现了<strong>await</strong>方法，那么通过它构造出来的实例就是一个Awaitable，并且Coroutine类也继承了Awaitable。</p>
<h4 id="自动循环执行协程函数"><a href="#自动循环执行协程函数" class="headerlink" title="自动循环执行协程函数"></a>自动循环执行协程函数</h4><p>　　 通过前面介绍我们知道执行协程函数需要使用send方法，但一旦协程函数执行过程中切换到其他函数了，那么这个函数就不在被继续运行了，并且使用sned方法不是很高效。那么如何在执行整个程序过程中，自动得执行所有的协程函数呢，就如同多线程、多进程那样，隐式得执行而不是显示的通过send方法去执行函数。</p>
<h5 id="事件循环方法"><a href="#事件循环方法" class="headerlink" title="事件循环方法"></a>事件循环方法</h5><p>前面提到的问题就需要用到事件循环方法去解决，即asyncio.get_event_loop方法，修改以上代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">    await test2()</div><div class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"3"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"4"</span>)</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.run_until_complete(test1())</div></pre></td></tr></table></figure></p>
<p>运行以上代码得到以下结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">3</div><div class="line">4</div><div class="line">2</div></pre></td></tr></table></figure></p>
<p>说明：asyncio.get_event_loop方法可以创建一个事件循环，然后使用run_until_complete将协程注册到事件循环，并启动事件循环。</p>
<h5 id="task任务"><a href="#task任务" class="headerlink" title="task任务"></a>task任务</h5><p>　　 由于协程对象不能直接运行，在注册事件循环的时候，其实是run_until_complete方法将协程包装成为了一个任务（task）对象。所谓task对象是Future类的子类，保存了协程运行后的状态，用于未来获取协程的结果。我们也可以手动将协程对象定义成task，修改以上代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">    await test2()</div><div class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"3"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"4"</span>)</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">task = loop.create_task(test1())</div><div class="line">loop.run_until_complete(task)</div></pre></td></tr></table></figure></p>
<p>　　 说明：前面说到task对象保存了协程运行的状态，并且可以获取协程函数运行的返回值，那么具体该如何获取呢？这里可以分两种方式，一种需要绑定回调函数，另外一种则直接在运行完task任务后输出。值得一提的是，如果使用send方法执行函数，则返回值可以通过捕捉StopIteration异常，利用StopIteration.value获取。</p>
<h5 id="直接输出task结果"><a href="#直接输出task结果" class="headerlink" title="直接输出task结果"></a>直接输出task结果</h5><p>当协程函数运行结束后，我们需要得到其返回值，第一种方式就是等到task状态为finish时，调用task的result方法获取返回值。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">    await test2()</div><div class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line">    <span class="built_in">return</span> <span class="string">"stop"</span></div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"3"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"4"</span>)</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">task = asyncio.ensure_future(test1())</div><div class="line">loop.run_until_complete(task)</div><div class="line"><span class="built_in">print</span>(task.result())</div></pre></td></tr></table></figure></p>
<p>运行以上代码得到以下结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">3</div><div class="line">4</div><div class="line">2</div><div class="line">stop</div></pre></td></tr></table></figure></p>
<h5 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h5><p>　　 获取返回值的第二种方法是可以通过绑定回调函数，在task执行完毕的时候可以获取执行的结果，回调的最后一个参数是future对象，通过该对象可以获取协程返回值。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">    await test2()</div><div class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line">    <span class="built_in">return</span> <span class="string">"stop"</span></div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"3"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"4"</span>)</div><div class="line"></div><div class="line">def callback(future):</div><div class="line">    <span class="built_in">print</span>(<span class="string">'Callback:'</span>,future.result()) <span class="comment"># 通过future对象的result方法可以获取协程函数的返回值</span></div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">task = asyncio.ensure_future(test1()) <span class="comment"># 创建task，test1()是一个协程对象</span></div><div class="line">task.add_done_callback(callback) <span class="comment"># 绑定回调函数</span></div><div class="line">loop.run_until_complete(task)</div></pre></td></tr></table></figure></p>
<p>运行以上代码得到以下结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">3</div><div class="line">4</div><div class="line">2</div><div class="line">Callback: stop</div></pre></td></tr></table></figure></p>
<p>如果回调函数需要接受多个参数，可以通过偏函数导入，修改代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line">import functools</div><div class="line"></div><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">    await test2()</div><div class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line">    <span class="built_in">return</span> <span class="string">"stop"</span></div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"3"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"4"</span>)</div><div class="line"></div><div class="line">def callback(param1,param2,future):</div><div class="line">    <span class="built_in">print</span>(param1,param2)</div><div class="line">    <span class="built_in">print</span>(<span class="string">'Callback:'</span>,future.result())</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">task = asyncio.ensure_future(test1())</div><div class="line">task.add_done_callback(functools.partial(callback,<span class="string">"param1"</span>,<span class="string">"param2"</span>))</div><div class="line">loop.run_until_complete(task)</div></pre></td></tr></table></figure></p>
<p>说明：回调函数中的future对象就是创建的task对象。</p>
<h5 id="future对象"><a href="#future对象" class="headerlink" title="future对象"></a>future对象</h5><p>　　 future对象有几个状态：Pending、Running、Done、Cancelled。创建future的时候，task为pending，事件循环调用执行的时候当然就是running，调用完毕自然就是done，如果需要停止事件循环，就需要先把task取消，可以使用asyncio.Task获取事件循环的task。</p>
<h5 id="协程停止"><a href="#协程停止" class="headerlink" title="协程停止"></a>协程停止</h5><p>　　 前面介绍了使用事件循环执行协程函数，那么怎么停止执行呢？在停止执行协程前，需要先取消task，然后再停止loop事件循环。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">    await asyncio.sleep(3)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line">    <span class="built_in">return</span> <span class="string">"stop"</span></div><div class="line"></div><div class="line">tasks = [</div><div class="line">    asyncio.ensure_future(test1()),</div><div class="line">    asyncio.ensure_future(test1()),</div><div class="line">    asyncio.ensure_future(test1()),</div><div class="line">]</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">try:</div><div class="line">    loop.run_until_complete(asyncio.wait(tasks))</div><div class="line">except KeyboardInterrupt as e:</div><div class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> asyncio.Task.all_tasks():</div><div class="line">        task.cancel()</div><div class="line">    loop.stop()</div><div class="line">    loop.run_forever()</div><div class="line">finally:</div><div class="line">    loop.close()</div></pre></td></tr></table></figure></p>
<p>运行以上代码，按ctrl+c可以结束执行。</p>
<h3 id="本文中用到的一些概念及方法"><a href="#本文中用到的一些概念及方法" class="headerlink" title="本文中用到的一些概念及方法"></a>本文中用到的一些概念及方法</h3><ul>
<li>event_loop事件循环：程序开启一个无限的循环，当把一些函数注册到事件循环上时，满足事件发生条件即调用相应的函数。</li>
<li>coroutine协程对象：指一个使用async关键字定义的函数，它的调用不会立即执行函数，而是会返回一个协程对象，协程对象需要注册到事件循环，由事件循环调用。</li>
<li>task任务：一个协程对象就是一个原生可以挂起的函数，任务则是对协程进一步封装，其中包含任务的各种状态。</li>
<li>future：代表将来执行或没有执行的任务的结果，它和task上没有本质的区别</li>
<li>async/await关键字：python3.5用于定义协程的关键字，async定义一个协程，await用于挂起阻塞的异步调用接口。</li>
</ul>
<h3 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h3><p>　　 并发通常指有多个任务需要同时进行，并行则是同一时刻有多个任务执行。用多线程、多进程、协程来说，协程实现并发，多线程与多进程实现并行。</p>
<h4 id="asyncio协程如何实现并发"><a href="#asyncio协程如何实现并发" class="headerlink" title="asyncio协程如何实现并发"></a>asyncio协程如何实现并发</h4><p>　　 asyncio想要实现并发，就需要多个协程来完成任务，每当有任务阻塞的时候就await，然后其他协程继续工作，这需要创建多个协程的列表，然后将这些协程注册到事件循环中。这里指的多个协程，可以是多个协程函数，也可以是一个协程函数的多个协程对象。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def test1():</div><div class="line"></div><div class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">    await asyncio.sleep(1)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line">    <span class="built_in">return</span> <span class="string">"stop"</span></div><div class="line"></div><div class="line">a = test1()</div><div class="line">b = test1()</div><div class="line">c = test1()</div><div class="line"></div><div class="line">tasks = [</div><div class="line">    asyncio.ensure_future(a),</div><div class="line">    asyncio.ensure_future(b),</div><div class="line">    asyncio.ensure_future(c),</div><div class="line">]</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.run_until_complete(asyncio.wait(tasks)) <span class="comment"># 注意asyncio.wait方法</span></div><div class="line"><span class="keyword">for</span> task <span class="keyword">in</span> tasks:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"task result is "</span>,task.result())</div></pre></td></tr></table></figure></p>
<p>运行以上代码得到以下结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">1</div><div class="line">1</div><div class="line">2</div><div class="line">2</div><div class="line">2</div><div class="line">task result is  stop</div><div class="line">task result is  stop</div><div class="line">task result is  stop</div></pre></td></tr></table></figure></p>
<p>说明：代码先是定义了三个协程对象，然后通过asyncio.ensure_future方法创建了三个task，并且将所有的task加入到了task列表，最终使用loop.run_until_complete将task列表添加到事件循环中。</p>
<h3 id="协程爬虫"><a href="#协程爬虫" class="headerlink" title="协程爬虫"></a>协程爬虫</h3><p>　　 前面介绍了如何使用async与await创建协程函数，使用asyncio.get_event_loop创建事件循环并执行协程函数。例子很好地展示了协程并发的高效，但在实际应用场景中该如何开发协程程序？比如说异步爬虫。我尝试用requests模块、urllib模块写异步爬虫，但实际操作发现并不支持asyncio异步，因此可以使用aiohttp模块编写异步爬虫。</p>
<h4 id="aiohttp实现"><a href="#aiohttp实现" class="headerlink" title="aiohttp实现"></a>aiohttp实现</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line">import aiohttp</div><div class="line"></div><div class="line">async def run(url):</div><div class="line">    <span class="built_in">print</span>(<span class="string">"start spider "</span>,url)</div><div class="line">    async with aiohttp.ClientSession() as session:</div><div class="line">        async with session.get(url) as resp:</div><div class="line">            <span class="built_in">print</span>(resp.url)</div><div class="line"></div><div class="line">url_list = [<span class="string">"https://thief.one"</span>,<span class="string">"https://home.nmask.cn"</span>,<span class="string">"https://movie.nmask.cn"</span>,<span class="string">"https://tool.nmask.cn"</span>]</div><div class="line"></div><div class="line">tasks = [asyncio.ensure_future(run(url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div></pre></td></tr></table></figure>
<p>运行以上代码得到以下结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">start spider  https://thief.one</div><div class="line">start spider  https://home.nmask.cn</div><div class="line">start spider  https://movie.nmask.cn</div><div class="line">start spider  https://tool.nmask.cn</div><div class="line">https://movie.nmask.cn</div><div class="line">https://home.nmask.cn</div><div class="line">https://tool.nmask.cn</div><div class="line">https://thief.one</div></pre></td></tr></table></figure></p>
<p>说明：aiohttp基于asyncio实现，既可以用来写webserver，也可以当爬虫使用。</p>
<h4 id="requests实现"><a href="#requests实现" class="headerlink" title="requests实现"></a>requests实现</h4><p>　　 由于requests模块阻塞了客户代码与asycio事件循环的唯一线程，因此在执行调用时，整个应用程序都会冻结，但如果一定要用requests模块，可以使用事件循环对象的run_in_executor方法，通过run_in_executor方法来新建一个线程来执行耗时函数，因此可以这样修改代码实现：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line">import requests</div><div class="line"></div><div class="line">async def run(url):</div><div class="line">    <span class="built_in">print</span>(<span class="string">"start "</span>,url)</div><div class="line">    loop = asyncio.get_event_loop()</div><div class="line">    response = await loop.run_in_executor(None, requests.get, url)</div><div class="line">    <span class="built_in">print</span>(response.url)</div><div class="line">    </div><div class="line">url_list = [<span class="string">"https://thief.one"</span>,<span class="string">"https://home.nmask.cn"</span>,<span class="string">"https://movie.nmask.cn"</span>,<span class="string">"https://tool.nmask.cn"</span>]</div><div class="line"></div><div class="line">tasks = [asyncio.ensure_future(run(url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div></pre></td></tr></table></figure></p>
<p>如果要给requests带上参数，可以使用functools：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line">import requests</div><div class="line">import functools</div><div class="line"></div><div class="line">async def run(url):</div><div class="line">    <span class="built_in">print</span>(<span class="string">"start "</span>,url)</div><div class="line">    loop = asyncio.get_event_loop()</div><div class="line">    try:</div><div class="line">        response = await loop.run_in_executor(None,functools.partial(requests.get,url=url,params=<span class="string">""</span>,timeout=1))</div><div class="line">    except Exception as e:</div><div class="line">        <span class="built_in">print</span>(e)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">print</span>(response.url)</div><div class="line"></div><div class="line">url_list = [<span class="string">"https://thief.one"</span>,<span class="string">"https://home.nmask.cn"</span>,<span class="string">"https://movie.nmask.cn"</span>,<span class="string">"https://tool.nmask.cn"</span>]</div><div class="line"></div><div class="line">tasks = [asyncio.ensure_future(run(url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div></pre></td></tr></table></figure></p>
<h3 id="asyncio中使用阻塞函数"><a href="#asyncio中使用阻塞函数" class="headerlink" title="asyncio中使用阻塞函数"></a>asyncio中使用阻塞函数</h3><p>　　 如同前面介绍如何在asyncio中使用requests模块一样，如果想在asyncio中使用其他阻塞函数，该怎么实现呢？虽然目前有异步函数支持asyncio，但实际问题是大部分IO模块还不支持asyncio。</p>
<h4 id="阻塞函数在asyncio中使用的问题"><a href="#阻塞函数在asyncio中使用的问题" class="headerlink" title="阻塞函数在asyncio中使用的问题"></a>阻塞函数在asyncio中使用的问题</h4><p>　　 阻塞函数(例如io读写，requests网络请求)阻塞了客户代码与asycio事件循环的唯一线程，因此在执行调用时，整个应用程序都会冻结。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>　　 这个问题的解决方法是使用事件循环对象的run_in_executor方法。asyncio的事件循环在背后维护着一个ThreadPoolExecutor对象，我们可以调用run_in_executor方法，把可调用对象发给它执行，即可以通过run_in_executor方法来新建一个线程来执行耗时函数。</p>
<h4 id="run-in-executor方法"><a href="#run-in-executor方法" class="headerlink" title="run_in_executor方法"></a>run_in_executor方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AbstractEventLoop.run_in_executor(executor, func, *args)</div></pre></td></tr></table></figure>
<ul>
<li>executor 参数应该是一个 Executor 实例。如果为 None，则使用默认 executor。</li>
<li>func 就是要执行的函数</li>
<li>args 就是传递给 func 的参数</li>
</ul>
<p>实际例子（使用time.sleep()）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line">import time</div><div class="line"></div><div class="line">async def run(url):</div><div class="line">    <span class="built_in">print</span>(<span class="string">"start "</span>,url)</div><div class="line">    loop = asyncio.get_event_loop()</div><div class="line">    try:</div><div class="line">        await loop.run_in_executor(None,time.sleep,1)</div><div class="line">    except Exception as e:</div><div class="line">        <span class="built_in">print</span>(e)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"stop "</span>,url)</div><div class="line"></div><div class="line">url_list = [<span class="string">"https://thief.one"</span>,<span class="string">"https://home.nmask.cn"</span>,<span class="string">"https://movie.nmask.cn"</span>,<span class="string">"https://tool.nmask.cn"</span>]</div><div class="line"></div><div class="line">tasks = [asyncio.ensure_future(run(url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div></pre></td></tr></table></figure></p>
<p>运行以上代码得到以下函数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">start  https://thief.one</div><div class="line">start  https://home.nmask.cn</div><div class="line">start  https://movie.nmask.cn</div><div class="line">start  https://tool.nmask.cn</div><div class="line">stop  https://thief.one</div><div class="line">stop  https://movie.nmask.cn</div><div class="line">stop  https://home.nmask.cn</div><div class="line">stop  https://tool.nmask.cn</div></pre></td></tr></table></figure></p>
<p>说明：有了run_in_executor方法，我们就可以使用之前熟悉的模块创建协程并发了，而不需要使用特定的模块进行IO异步开发。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.oschina.net/translate/playing-around-with-await-async-in-python-3-5" target="_blank" rel="external">https://www.oschina.net/translate/playing-around-with-await-async-in-python-3-5</a><br><a href="https://www.jianshu.com/p/b5e347b3a17c" target="_blank" rel="external">https://www.jianshu.com/p/b5e347b3a17c</a><br><a href="https://zhuanlan.zhihu.com/p/27258289" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/27258289</a><br><a href="https://juejin.im/entry/5aabb949f265da23a04951df" target="_blank" rel="external">https://juejin.im/entry/5aabb949f265da23a04951df</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;今夕何夕故人不来迟暮连山黛&lt;/blockquote&gt;

&lt;p&gt;　　 之前有研究过python协程相关的知识，但一直没有进行深入探究。平常工作中使用的也还是以python2为主，然而最近的项目需要使用python3协程相关的内容，因此凑出时间学习了一番python3的协程语法。&lt;br&gt;　　 本篇主要以介绍python3.5的async/await协程语法为主，因为这种语法看上去很别扭，不容易理解。如果对python协程基础不是很了解，建议可以先看此篇：&lt;a href=&quot;https://thief.one/2017/02/20/Python%E5%8D%8F%E7%A8%8B/&quot;&gt;Python协程&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="python" scheme="http://thief.one/tags/python/"/>
    
      <category term="协程" scheme="http://thief.one/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>利用chrome_remote_interface实现程序化、自动化Web安全测试</title>
    <link href="http://thief.one/2018/06/07/1/"/>
    <id>http://thief.one/2018/06/07/1/</id>
    <published>2018-06-07T07:22:18.000Z</published>
    <updated>2018-06-07T09:00:27.519Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">高考加油！</blockquote>

<p>　　如果要问有哪些抓包神器或者流量分析工具？以下几款工具是必须要提的，burpsuite（跨平台）、<a href="https://thief.one/2017/04/27/1/">fiddler</a>（windows下抓包神器）、<a href="https://thief.one/2017/02/09/WireShark%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99/">wireshark</a>（经典网络抓包工具）、<a href="https://thief.one/2017/09/27/1/">justniffer</a>（与前面几个使用代理获取流量不一样的是，justniffer是基于网卡获取流量）等。以上这几款工具之前我有单独成文介绍过，如有需要可点击蓝色链接移步。<br>　　那么如果问有哪些程序化的抓包工具？（注明一下这里的程序化指的是可编程）首先burpsuite算一个，因为我们可以开发扩展工具（<a href="https://thief.one/2018/05/04/1/">burpsuite插件开发之检测越权访问漏洞</a>）；另外fiddle也算一个，可以编辑配置文件，达到扩展功能，之前也介绍过。<br>　　那么如果问有哪些即可以实现程序化又可以实现自动化的抓包工具？（注明一下这里的自动化是指自动产生流量）这个问题有点拗口，你可能会想为什么一个抓包工具要负责产生流量，流量交给爬虫岂不是更好？这个问题暂且放一放，继续往下看。<br><a id="more"></a></p>
<h3 id="自动化安全测试"><a href="#自动化安全测试" class="headerlink" title="自动化安全测试"></a>自动化安全测试</h3><p>　　平常我们经常会使用burpsuite等工具检测一个网站的安全性，检测方法不外乎使用浏览器访问网站且把流量代理到burpsuite上，然后在burpsuite上通过拦截、修改、重放流量等方式测试网站安全性。然而当要测试的网站非常多时，有没有一个更自动化、更省力的方式去测试呢？方案肯定是有的，简单来说要实现自动化web安全测试无非要解决几个问题，首先是流量怎么产生？然后是怎么从流量中分析出漏洞？</p>
<h4 id="自动化测试方案：主动扫描器"><a href="#自动化测试方案：主动扫描器" class="headerlink" title="自动化测试方案：主动扫描器"></a>自动化测试方案：主动扫描器</h4><p>　　市面上基于爬虫的主动扫描器就是一种自动化安全测试工具，首先它的流量是通过爬虫爬取url主动产生的，然后利用一些漏洞插件去构造不同的访问请求。短板：目前市面上扫描器爬虫大多基于web1.0，无法加载js渲染网页，而现在越来越多的网站使用web2.0技术实现前后端数据交互。</p>
<h4 id="自动化测试方案：被动扫描器"><a href="#自动化测试方案：被动扫描器" class="headerlink" title="自动化测试方案：被动扫描器"></a>自动化测试方案：被动扫描器</h4><p>　　一些大厂内部自研的被动扫描器，首先它的流量不是通过爬虫主动获取的，而是通过监听交换机等网络设备的网卡流量，然后利用一些漏洞插件去分析流量中存在漏洞的点。短板：适合大厂各业务线安全检查不适合测试某个特定的网站，因为需要人为访问网站产生流量。</p>
<h4 id="自动化测试方案：selenium-流量获取工具-漏洞插件"><a href="#自动化测试方案：selenium-流量获取工具-漏洞插件" class="headerlink" title="自动化测试方案：selenium+流量获取工具+漏洞插件"></a>自动化测试方案：selenium+流量获取工具+漏洞插件</h4><p>　　selenium是一款网站自动化测试工具，可以程序化的操作浏览器，实现自动化产生流量。再结合抓包工具以及漏洞检测插件，应该就可以解决流量获取以及漏洞检测的问题。短板：用selenium只能实现一些简单的浏览器操作，对于检测复杂的网站系统，似乎不够用，而且速度很慢，性能很差。</p>
<h4 id="自动化测试方案：chrome-remote-interface-漏洞插件"><a href="#自动化测试方案：chrome-remote-interface-漏洞插件" class="headerlink" title="自动化测试方案：chrome_remote_interface+漏洞插件"></a>自动化测试方案：chrome_remote_interface+漏洞插件</h4><p>　　之前我介绍过<a href="https://thief.one/2018/03/06/1/">headless chrome</a>，也介绍过<a href="https://thief.one/2017/03/31/Phantomjs%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/">phantomjs</a>等web2.0爬虫工具，目前推荐去学习使用headless-chrome。headless chrome工具是用来自动加载js，获取渲染后的页面源码，解决web2.0爬虫之困。而chrome_remote_interface是一个更底层的工具，可以用来分析协议，简单说就是可以分析整个渲染过程，以及截取分析过程中的流量。就类似您打开了chrome浏览器的审查元素功能，然后刷新一下页面，查看一下network信息。<br><img src="/upload_image/20180607/1.png" alt=""></p>
<h3 id="chrome-remote-interface介绍"><a href="#chrome-remote-interface介绍" class="headerlink" title="chrome_remote_interface介绍"></a>chrome_remote_interface介绍</h3><p>chrome_remote_interface是一个开源项目，<a href="https://github.com/cyrus-and/chrome-remote-interface" target="_blank" rel="external">项目地址</a>，并且支持命令行、编码两种方式，且使用node.js开发。</p>
<h4 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h4><p>因为chrome_remote_interface是基于nodejs的，因此需要安装npm包管理工具。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install npm -y</div></pre></td></tr></table></figure></p>
<p>然后创建一个目录，初始化一个项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure></p>
<p>在目录下安装chrome_remote_interface<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install chrome-remote-interface</div></pre></td></tr></table></figure></p>
<p>创建一个简单的nodejs程序(nmask.js)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">const CDP = require(<span class="string">'chrome-remote-interface'</span>);</div><div class="line"></div><div class="line">// node nmask.js https://nmask.cn</div><div class="line"></div><div class="line">var options = process.argv;</div><div class="line">var target_url = options[2];</div><div class="line"></div><div class="line">CDP((client) =&gt; &#123;</div><div class="line">    // extract domains</div><div class="line">    const &#123;Network, Page&#125; = client;</div><div class="line">    </div><div class="line">    // setup handlers</div><div class="line">    Network.requestWillBeSent((params) =&gt; &#123;</div><div class="line">        console.log(params.request.url);</div><div class="line">    &#125;);</div><div class="line">    Page.loadEventFired(() =&gt; &#123;</div><div class="line">        client.close();</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    // <span class="built_in">enable</span> events <span class="keyword">then</span> start!</div><div class="line">    Promise.all([</div><div class="line">        Network.enable(),</div><div class="line">        Page.enable()</div><div class="line">    ]).<span class="keyword">then</span>(() =&gt; &#123;</div><div class="line">        <span class="built_in">return</span> Page.navigate(&#123;url: target_url&#125;);//输出请求的url</div><div class="line">    &#125;).catch((err) =&gt; &#123;</div><div class="line">        console.error(err);</div><div class="line">        client.close();</div><div class="line">    &#125;);</div><div class="line">&#125;).on(<span class="string">'error'</span>, (err) =&gt; &#123;</div><div class="line">    console.error(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>说明：在运行这段程序前，必须要在系统上安装chrome以及启动chrome headless监听模式，具体怎么安装chrome headless可以移步：<a href="https://thief.one/2018/03/06/1/">headless chrome and api</a><br>启动chrome headless监听模式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chrome --headless --remote-debugging-port=9222</div><div class="line">或者</div><div class="line">google-chrome --headless --remote-debugging-port=9222</div></pre></td></tr></table></figure></p>
<p>然后另外开启一个窗口，运行nodejs：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node nmask.js https://thief.one</div></pre></td></tr></table></figure></p>
<p>运行结果如下：(输出渲染过程中请求的所有url)<br><img src="/upload_image/20180607/2.png" alt=""></p>
<h3 id="chrome-remote-interface-for-python"><a href="#chrome-remote-interface-for-python" class="headerlink" title="chrome_remote_interface for python"></a>chrome_remote_interface for python</h3><p>　　由于chrome_remote_interface是nodejs实现的，因此对于不熟悉nodejs的朋友来说coding成本比较高。然而好在已经有外国友人用python封装了一个工具，<a href="https://github.com/wasiher/chrome_remote_interface_python" target="_blank" rel="external">项目地址</a>，虽然目前此项目尚处于初级阶段，但实实在在地解决了我的问题。</p>
<h4 id="安装使用-1"><a href="#安装使用-1" class="headerlink" title="安装使用"></a>安装使用</h4><p>基于是用python3.5开发的，那么就clone一下项目，直接安装吧：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/wasiher/chrome-remote-interface-python.git</div><div class="line">python3 setup.py install</div></pre></td></tr></table></figure></p>
<p>编写一个python版的程序(nmask.py)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">__author__="nMask"</div><div class="line">__Date__="7 Jun 2018"</div><div class="line">__Blog__="https://thief.one"</div><div class="line">__version__="1.0"</div><div class="line">__py_version__="3.5"</div><div class="line"></div><div class="line">'<span class="string">''</span></div><div class="line"></div><div class="line">import asyncio</div><div class="line">import chrome_remote_interface</div><div class="line"></div><div class="line"></div><div class="line">class callbacks(object):</div><div class="line">    <span class="string">''</span><span class="string">' callback class '</span><span class="string">''</span></div><div class="line"></div><div class="line">    target_url = <span class="string">''</span></div><div class="line">    result = []</div><div class="line"></div><div class="line">    async def start(tabs):</div><div class="line">        await tabs.add()</div><div class="line"></div><div class="line">    async def tab_start(tabs, tab):</div><div class="line">        await tab.Page.enable()</div><div class="line">        await tab.Network.enable()</div><div class="line">        await tab.Page.navigate(url=callbacks.target_url)</div><div class="line"></div><div class="line">    async def network__response_received(tabs, tab, requestId, loaderId, timestamp, <span class="built_in">type</span>, response, **kwargs):</div><div class="line">        <span class="string">''</span><span class="string">'</span></div><div class="line">        print(response.requestHeaders)</div><div class="line">        print(dir(response))</div><div class="line">        more response attribute https://chromedevtools.github.io/devtools-protocol/tot/Network#type-Response</div><div class="line">        '<span class="string">''</span></div><div class="line">        try:</div><div class="line">            body = tabs.helpers.old_helpers.unpack_response_body(await tab.Network.get_response_body(requestId=requestId))</div><div class="line">        except tabs.FailResponse as e:</div><div class="line">            <span class="built_in">print</span>(<span class="string">'[Error]'</span>, e)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="built_in">print</span>(response.url,response.status,len(body))</div><div class="line">            callbacks.result.append((response.url,response.status,len(body)))</div><div class="line"></div><div class="line">    async def page__frame_stopped_loading(tabs, tab, **kwargs):</div><div class="line">        <span class="built_in">print</span>(<span class="string">"[Info]Finish"</span>)</div><div class="line">        tabs.terminate()</div><div class="line"></div><div class="line">    async def any(tabs, tab, callback_name, parameters):</div><div class="line">        pass</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    callbacks.target_url = <span class="string">"http://www.baidu.com"</span></div><div class="line">    asyncio.get_event_loop().run_until_complete(chrome_remote_interface.Tabs.run(<span class="string">'localhost'</span>, 9222, callbacks))</div><div class="line">    <span class="built_in">print</span>(callbacks.result)</div></pre></td></tr></table></figure></p>
<p>说明：同样的在运行这段代码前，先运行chrome headless监听程序。</p>
<p>然后运行该程序：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python nmask.py</div></pre></td></tr></table></figure></p>
<p><img src="/upload_image/20180607/3.png" alt=""></p>
<p>说明：运行程序，最终得到渲染过程中请求的url、响应码、响应内容长度。</p>
<h3 id="Chrome-Debugging-Protocol"><a href="#Chrome-Debugging-Protocol" class="headerlink" title="Chrome Debugging Protocol"></a>Chrome Debugging Protocol</h3><p>　　无论是nodejs版本的chrome-remote-interface还是python版本的，实现的底层都是基于Chrome Debugging Protocol接口，<a href="https://chromedevtools.github.io/devtools-protocol/" target="_blank" rel="external">官方文档</a>，因此在使用chrome-remote-interface过程中，可以查询一下这个文档。比如python版本中network__response_received函数，是封装了Chrome Debugging Protocol接口Network.ResponseReceived函数，而此函数接受的参数，以及一些属性方法等都可以在该文档中查询。</p>
<h3 id="解决文章开头的问题"><a href="#解决文章开头的问题" class="headerlink" title="解决文章开头的问题"></a>解决文章开头的问题</h3><p>　　文章开头还留了一个问题，有哪些即可以实现程序化又可以实现自动化的抓包工具？想想chrome-remote-interface能干啥？其一可以使用nodejs、python（可能还有其他语言封装的项目）编程，底层接口文档比较完善；其二用它来写web2.0爬虫，访问页面产生流量，当然区别web1.0爬虫，这里的流量是完整的流量，相当于人工打开浏览器访问网页；其三可以获取流量，并且进行分析。第一点功能实现了程序化，第二三点功能实现了自动化。<br>　　最后让我们回过头看一下前文提到的自动化测试方案–主动扫描器，其短板就是没法解决web2.0爬虫的困境，而chrome-remote-interface恰恰可以解决，发挥下想象力，其前途应该无限！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;高考加油！&lt;/blockquote&gt;

&lt;p&gt;　　如果要问有哪些抓包神器或者流量分析工具？以下几款工具是必须要提的，burpsuite（跨平台）、&lt;a href=&quot;https://thief.one/2017/04/27/1/&quot;&gt;fiddler&lt;/a&gt;（windows下抓包神器）、&lt;a href=&quot;https://thief.one/2017/02/09/WireShark%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99/&quot;&gt;wireshark&lt;/a&gt;（经典网络抓包工具）、&lt;a href=&quot;https://thief.one/2017/09/27/1/&quot;&gt;justniffer&lt;/a&gt;（与前面几个使用代理获取流量不一样的是，justniffer是基于网卡获取流量）等。以上这几款工具之前我有单独成文介绍过，如有需要可点击蓝色链接移步。&lt;br&gt;　　那么如果问有哪些程序化的抓包工具？（注明一下这里的程序化指的是可编程）首先burpsuite算一个，因为我们可以开发扩展工具（&lt;a href=&quot;https://thief.one/2018/05/04/1/&quot;&gt;burpsuite插件开发之检测越权访问漏洞&lt;/a&gt;）；另外fiddle也算一个，可以编辑配置文件，达到扩展功能，之前也介绍过。&lt;br&gt;　　那么如果问有哪些即可以实现程序化又可以实现自动化的抓包工具？（注明一下这里的自动化是指自动产生流量）这个问题有点拗口，你可能会想为什么一个抓包工具要负责产生流量，流量交给爬虫岂不是更好？这个问题暂且放一放，继续往下看。&lt;br&gt;
    
    </summary>
    
      <category term="爬虫技术" scheme="http://thief.one/categories/%E7%88%AC%E8%99%AB%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="chrome_remote_interface" scheme="http://thief.one/tags/chrome-remote-interface/"/>
    
      <category term="headless chrome" scheme="http://thief.one/tags/headless-chrome/"/>
    
  </entry>
  
  <entry>
    <title>Supervisord管理进程实践</title>
    <link href="http://thief.one/2018/06/01/1/"/>
    <id>http://thief.one/2018/06/01/1/</id>
    <published>2018-06-01T05:02:20.000Z</published>
    <updated>2018-06-25T02:59:38.401Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">小孩在门前唱着歌<br>阳光它照暖了溪河</blockquote><br>　　今天凑空研究了下Supervisord，这是一款linux进程管理工具，使用python开发，主要用于在后台维护进程（类似master守护进程），可以实现监控进程的状态、自动重启进程等操作，便于一些服务的维护与监控。<br><a id="more"></a></p>
<h3 id="安装Supervisord"><a href="#安装Supervisord" class="headerlink" title="安装Supervisord"></a>安装Supervisord</h3><p>由于是用python开发的，因此使用pip安装最为方便。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install supervisor</div></pre></td></tr></table></figure></p>
<p>说明：安装完成之后多了3个工具：echo_supervisord_conf、supervisorctl和supervisord。</p>
<h3 id="Supervisord配置文件"><a href="#Supervisord配置文件" class="headerlink" title="Supervisord配置文件"></a>Supervisord配置文件</h3><p>首先可以使用echo_supervisord_conf命令获取supervisor配置模板：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo_supervisord_conf &gt; supervisord.conf</div></pre></td></tr></table></figure></p>
<p>说明：该命令在当前目录下创建了一个文件名为supervisord.conf的配置文件，编辑配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim supervisord.conf</div></pre></td></tr></table></figure></p>
<p>来看看默认配置文件中的主要配置项：（还有一些配置不常用，可以忽略）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[unix_http_server]</div><div class="line">file=/tmp/supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用</div><div class="line">;chmod=0700                 ; socket 文件的 mode，默认是 0700</div><div class="line">;chown=nobody:nogroup       ; socket 文件的 owner，格式： uid:gid</div><div class="line"></div><div class="line">;[inet_http_server]         ; HTTP 服务器，提供 web 管理界面</div><div class="line">;port=127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性</div><div class="line">;username=user              ; 登录管理后台的用户名</div><div class="line">;password=123               ; 登录管理后台的密码</div><div class="line"></div><div class="line">[supervisord]</div><div class="line">logfile=/tmp/supervisord.log ; 日志文件，默认是 <span class="variable">$CWD</span>/supervisord.log</div><div class="line">logfile_maxbytes=50MB        ; 日志文件大小，超出会 rotate，默认 50MB</div><div class="line">logfile_backups=10           ; 日志文件保留备份数量默认 10</div><div class="line">loglevel=info                ; 日志级别，默认 info，其它: debug,warn,trace</div><div class="line">pidfile=/tmp/supervisord.pid ; pid 文件</div><div class="line">nodaemon=<span class="literal">false</span>               ; 是否在前台启动，默认是 <span class="literal">false</span>，即以 daemon 的方式启动</div><div class="line">minfds=1024                  ; 可以打开的文件描述符的最小值，默认 1024</div><div class="line">minprocs=200                 ; 可以打开的进程数的最小值，默认 200</div><div class="line"></div><div class="line">; the below section must remain <span class="keyword">in</span> the config file <span class="keyword">for</span> RPC</div><div class="line">; (supervisorctl/web interface) to work, additional interfaces may be</div><div class="line">; added by defining them <span class="keyword">in</span> separate rpcinterface: sections</div><div class="line">[rpcinterface:supervisor]</div><div class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</div><div class="line"></div><div class="line">[supervisorctl]</div><div class="line">serverurl=unix:///tmp/supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致</div><div class="line">;serverurl=http://127.0.0.1:9001 ; 通过 HTTP 的方式连接 supervisord</div><div class="line"></div><div class="line">; 包含其他的配置文件</div><div class="line">[include]</div><div class="line">files = relative/directory/*.ini    ; 可以是 *.conf 或 *.ini</div></pre></td></tr></table></figure></p>
<p>运行以下命令启动supervisord进程，可测试supervisord是否安装成功并执行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisord -c supervisord.conf</div></pre></td></tr></table></figure></p>
<p>查看系统进程中是否多了一个supervisord：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -aux | grep supervisord</div></pre></td></tr></table></figure></p>
<h3 id="配置Program"><a href="#配置Program" class="headerlink" title="配置Program"></a>配置Program</h3><p>　　program就是用来配置监控不同的应用程序进程的，推荐每个应用程序单独写一个program配置文件，然后在supervisord.conf中通过include加载所有应用程序的配置。<br>这里拿创建一个celery进程为例，首先在supervisord.conf最后一行写入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;加载/etc/supervisor/目录下所有的配置文件</div><div class="line">[include]</div><div class="line">files = /etc/supervisor/*.conf</div></pre></td></tr></table></figure></p>
<p>然后创建/etc/supervisor目录，并到目录下创建/etc/supervisor/celery_touchscan.conf文件，写入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">;program名称，随便写，但不要重复，是program的唯一标识</div><div class="line">[program:celery_touchscan]</div><div class="line">;指定运行目录</div><div class="line">directory=/root/TouchScanV2/ </div><div class="line">;运行目录下执行命令</div><div class="line"><span class="built_in">command</span>=celery -A scan worker --queue=touchscan --pidfile=<span class="string">"./log/pid.txt"</span> --logfile=<span class="string">"./log/scan.log"</span> -c 10</div><div class="line">;进程名称</div><div class="line">process_name=%(program_name)s_%(process_num)02d</div><div class="line"></div><div class="line">;启动设置</div><div class="line">numprocs=1         ;进程数，注意：（celery进程数量,不是work数量，相当于执行了10个<span class="built_in">command</span>命令，而不是在celery中指定-c 为10）</div><div class="line">autostart=<span class="literal">true</span>      ;当supervisor启动时,程序将会自动启动</div><div class="line">autorestart=<span class="literal">true</span>    ;自动重启（当work被<span class="built_in">kill</span>了之后会重新启动）</div><div class="line">;运行程序的用户</div><div class="line">;user=root</div><div class="line">;startsecs=1 ;程序重启时候停留在runing状态的秒数</div><div class="line">;startretries=10 ;启动失败时的最多重试次数</div><div class="line"></div><div class="line">;停止信号,默认TERM</div><div class="line">;中断:INT (类似于Ctrl+C)(<span class="built_in">kill</span> -INT pid)，退出后会将写文件或日志(推荐)</div><div class="line">;终止:TERM (<span class="built_in">kill</span> -TERM pid)</div><div class="line">;挂起:HUP (<span class="built_in">kill</span> -HUP pid),注意与Ctrl+Z/<span class="built_in">kill</span> -stop pid不同</div><div class="line">;从容停止:QUIT (<span class="built_in">kill</span> -QUIT pid)</div><div class="line">stopsignal=INT</div></pre></td></tr></table></figure></p>
<p>重启supervisord进程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisorctl -c supervisord.conf reload</div></pre></td></tr></table></figure></p>
<p>　　此时查看系统上的进程，发现创建了一个supervisord守护进程，10个celery的work进程（celery的work进程数量取决于command命令中的-c参数以及配置文件中的numprocs参数，numprocs参数是指运行几次command命令，而在celery命令行中指定了需要运行的work数量）</p>
<p><img src="/upload_image/20180601/1.png" alt=""><br><img src="/upload_image/20180601/2.png" alt=""></p>
<p>说明：此时如果手动kill掉celery的work进程，会发现celery的work进程会被supervisord自动重启，只有当supervisord守护进程被kill以后，才能真正kill掉celery的work进程。</p>
<h3 id="supervisord命令行操作"><a href="#supervisord命令行操作" class="headerlink" title="supervisord命令行操作"></a>supervisord命令行操作</h3><h4 id="启动supervisord进程"><a href="#启动supervisord进程" class="headerlink" title="启动supervisord进程"></a>启动supervisord进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisord -c supervisord.conf</div></pre></td></tr></table></figure>
<h4 id="关闭supervisord进程"><a href="#关闭supervisord进程" class="headerlink" title="关闭supervisord进程"></a>关闭supervisord进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisorctl -c supervisord.conf shutdown <span class="comment">#注意这里将supervisord进程关闭，但通过supervisord启动的进程没有关闭</span></div></pre></td></tr></table></figure>
<h4 id="重启supervisord进程"><a href="#重启supervisord进程" class="headerlink" title="重启supervisord进程"></a>重启supervisord进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisorctl -c supervisord.conf reload</div></pre></td></tr></table></figure>
<h4 id="查看进程状态"><a href="#查看进程状态" class="headerlink" title="查看进程状态"></a>查看进程状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisorctl</div></pre></td></tr></table></figure>
<p>效果如下：<br><img src="/upload_image/20180601/3.png" alt=""><br>每列分别代表：programe名称、进程名称，进程状态、进程id，运行时间</p>
<h4 id="更多supervisorctl命令"><a href="#更多supervisorctl命令" class="headerlink" title="更多supervisorctl命令"></a>更多supervisorctl命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ supervisorctl status</div><div class="line">$ supervisorctl stop celery_touchscan <span class="comment"># celery_touchscan是一个program的名称</span></div><div class="line">$ supervisorctl start celery_touchscan</div><div class="line">$ supervisorctl restart celery_touchscan</div><div class="line">$ supervisorctl reread</div><div class="line">$ supervisorctl update</div></pre></td></tr></table></figure>
<p>说明：可以直接在系统shell中执行，也可以先执行supervisorctl，进入supervisorctl_shell中执行相应的命令。</p>
<h4 id="针对Python环境"><a href="#针对Python环境" class="headerlink" title="针对Python环境"></a>针对Python环境</h4><p>如果项目使用了python的pyenv模块来设置环境，则supervisord配置文件中需要指定python环境的路径。其中有两种方式指定程序使用的Python环境：</p>
<ul>
<li>command使用绝对路径。</li>
<li>通过environment配置PYTHONPATH。</li>
</ul>
<h3 id="使用supervisord注意点"><a href="#使用supervisord注意点" class="headerlink" title="使用supervisord注意点"></a>使用supervisord注意点</h3><h4 id="子进程问题"><a href="#子进程问题" class="headerlink" title="子进程问题"></a>子进程问题</h4><p>有时候用Supervisor托管的程序还会有子进程，如果只杀死主进程，子进程就可能变成孤儿进程。通过以下这两项配置来确保所有子进程都能正确停止：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">stopasgroup=<span class="literal">true</span></div><div class="line">killasgroup=<span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h4 id="配置更新"><a href="#配置更新" class="headerlink" title="配置更新"></a>配置更新</h4><p>每次修改supervisord配置文件后，需要重启supervisord进程。</p>
<h4 id="后台程序问题"><a href="#后台程序问题" class="headerlink" title="后台程序问题"></a>后台程序问题</h4><p>Supervisor只能管理在前台运行的程序，所以如果应用程序有后台运行的选项，需要关闭。</p>
<h3 id="supervisord与定时任务"><a href="#supervisord与定时任务" class="headerlink" title="supervisord与定时任务"></a>supervisord与定时任务</h3><p>supervisord主要用来管理进程，而不是调度任务，因此如果有定时任务的需求，跟结合crontab一起使用。当然如果是管理celery服务，可以结合celery自身的定时任务功能，具体可移步：<a href="https://thief.one/2017/08/25/1/">https://thief.one/2017/08/25/1/</a></p>
<h3 id="supervisord-xml-rpc"><a href="#supervisord-xml-rpc" class="headerlink" title="supervisord xml-rpc"></a>supervisord xml-rpc</h3><p>前面介绍的都是在本地利用supervisord管理进程，那么如何实现在远处管理服务器上的进程呢？supervisord工具提供了相关的api。首先需要在配置文件中打开相关配置信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[inet_http_server]         ; HTTP 服务器，提供 web 管理界面</div><div class="line">port=127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性</div><div class="line">username=user              ; 登录管理后台的用户名</div><div class="line">password=123               ; 登录管理后台的密码</div></pre></td></tr></table></figure></p>
<p>然后启动supervisord后，可以用web界面管理进程，打开<em><a href="http://127.0.0.1:9001" target="_blank" rel="external">http://127.0.0.1:9001</a></em>。当然也提供了rpc接口，可供远程调用，代码样例如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import xmlrpclib</div><div class="line">server = xmlrpclib.Server(<span class="string">'http://user:123@127.0.0.1:9111/RPC2'</span>) <span class="comment">#连接rpc服务</span></div><div class="line"><span class="comment"># print server.system.listMethods() # 查询api支持的方法</span></div><div class="line"><span class="comment"># print server.supervisor.getState() # 获取supervisord进程状态</span></div><div class="line"><span class="comment"># print server.supervisor.shutdown() # 关闭supervisor,慎用</span></div><div class="line"><span class="comment"># print server.supervisor.restart() # 重启supervisor</span></div><div class="line"><span class="built_in">print</span> server.supervisor.getProcessInfo(process_name) <span class="comment"># 获取指定进程信息</span></div><div class="line"><span class="built_in">print</span> server.supervisor.startProcess(process_name) <span class="comment"># 启动指定进程</span></div><div class="line"><span class="built_in">print</span> server.supervisor.stopProcess(process_name) <span class="comment"># 暂停指定进程</span></div></pre></td></tr></table></figure></p>
<p>api操作比较简单，具体的方法使用文档可以参考：<a href="http://supervisord.org/api.html#xml-rpc" target="_blank" rel="external">http://supervisord.org/api.html#xml-rpc</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://pypi.org/project/supervisor/" target="_blank" rel="external">https://pypi.org/project/supervisor/</a><br><a href="https://www.jianshu.com/p/9559ab642d88" target="_blank" rel="external">https://www.jianshu.com/p/9559ab642d88</a><br><a href="http://liyangliang.me/posts/2015/06/using-supervisor/" target="_blank" rel="external">http://liyangliang.me/posts/2015/06/using-supervisor/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;小孩在门前唱着歌&lt;br&gt;阳光它照暖了溪河&lt;/blockquote&gt;&lt;br&gt;　　今天凑空研究了下Supervisord，这是一款linux进程管理工具，使用python开发，主要用于在后台维护进程（类似master守护进程），可以实现监控进程的状态、自动重启进程等操作，便于一些服务的维护与监控。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Supervisord" scheme="http://thief.one/tags/Supervisord/"/>
    
  </entry>
  
  <entry>
    <title>区块链系列·python实现的区块链</title>
    <link href="http://thief.one/2018/05/25/1/"/>
    <id>http://thief.one/2018/05/25/1/</id>
    <published>2018-05-25T07:55:41.000Z</published>
    <updated>2018-05-25T08:16:48.220Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">地是床 天是被 流星是眼泪<br>有时醒 有时醉 大雁飞一个来回</blockquote><br>　　听说现在会点区块链技术的工资都高破天了，抱着对高工资的幻想，我决定也开始学一学区块链吧。那么我想接触区块链的第一步必须得是去交易平台注册个帐号，然后充点钱买0.00001个BTC了。（2333，~!~现在我穷得只剩下币了）<br><a id="more"></a></p>
<p>　　老实说区块链技术还是有点难理解的，为此我搜了搜区块链的实现代码，想着结合代码看获许会简单一点，于是我发现有人用python实现了简单的区块链，于是再原作者基础上，我稍微修改了点内容，在此粘贴一下，以供学习。原项目地址：<a href="https://github.com/xilibi2003/blockchain" target="_blank" rel="external">https://github.com/xilibi2003/blockchain</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"></div><div class="line">import hashlib</div><div class="line">import json</div><div class="line">from time import time</div><div class="line"></div><div class="line"></div><div class="line">class Blockchain(object):</div><div class="line">    <span class="string">''</span><span class="string">' 区块链 </span></div><div class="line">    </div><div class="line">    一个区块结构（每个区块的字典顺序必须一致）：</div><div class="line"></div><div class="line">    block = &#123;</div><div class="line">        'index<span class="string">': 1, # 区块索引</span></div><div class="line">        'timestamp<span class="string">': 1506057125.900785, # 时间戳</span></div><div class="line">        'transactions<span class="string">': [ # 交易列表</span></div><div class="line">            &#123;</div><div class="line">                'sender<span class="string">': "8527147fe1f5426f9dd545de4b27ee00",</span></div><div class="line">                'recipient<span class="string">': "a77f5cdfa2934df3954a5c7c7da5df1f",</span></div><div class="line">                'amount<span class="string">': 5,</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        'proof<span class="string">': 324984774000, # 工作量证明</span></div><div class="line">        'previous_hash<span class="string">': "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    '<span class="string">''</span></div><div class="line"></div><div class="line">    def __init__(self):</div><div class="line"></div><div class="line">        self.chain = [] <span class="comment"># 区块列表</span></div><div class="line">        self.current_transactions = [] <span class="comment"># 交易列表</span></div><div class="line">        self.nodes = <span class="built_in">set</span>() <span class="comment"># 节点列表(避免重复)</span></div><div class="line"></div><div class="line">        self.new_block(previous_hash=1, proof=100) <span class="comment"># 创造创世区块</span></div><div class="line"></div><div class="line"></div><div class="line">    def register_node(self,address):</div><div class="line">        <span class="string">''</span><span class="string">' 注册节点 </span></div><div class="line"></div><div class="line">        Add a new node to the list of nodes</div><div class="line">        :param address: &lt;str&gt; 节点地址 '192.168.0.1:5000<span class="string">'</span></div><div class="line">        :return: None</div><div class="line"></div><div class="line">        '<span class="string">''</span></div><div class="line"></div><div class="line">        self.nodes.add(address)</div><div class="line"></div><div class="line">    def valid_chain(self,chain):</div><div class="line">        <span class="string">''</span><span class="string">' 验证区块链的有效性 </span></div><div class="line"></div><div class="line">        :param chain: &lt;list&gt; 一个完整的区块链</div><div class="line">        :return: &lt;bool&gt; True if valid, False if not</div><div class="line"></div><div class="line">        '<span class="string">''</span></div><div class="line"></div><div class="line">        previous_block = chain[0] <span class="comment"># 前一个区块</span></div><div class="line">        current_index = 1 <span class="comment"># 当前区块索引</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> current_index &lt; len(chain):</div><div class="line">            block = chain[current_index] <span class="comment"># 当前区块</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> block[<span class="string">'previous_hash'</span>] != self.hash(previous_block):</div><div class="line">                <span class="string">''</span><span class="string">' hash值验证 '</span><span class="string">''</span></div><div class="line">                <span class="built_in">return</span> False</div><div class="line"></div><div class="line">            <span class="keyword">if</span> not self.valid_proof(previous_block[<span class="string">'proof'</span>],block[<span class="string">'proof'</span>]):</div><div class="line">                <span class="string">''</span><span class="string">' 工作量证明验证 '</span><span class="string">''</span></div><div class="line">                <span class="built_in">return</span> False</div><div class="line"></div><div class="line">            previous_block = block</div><div class="line">            current_index += 1</div><div class="line"></div><div class="line">        <span class="built_in">return</span> True</div><div class="line"></div><div class="line">    def resolve_conflicts(self):</div><div class="line">        <span class="string">''</span><span class="string">' 共识算法解决不同节点账本不相同的冲突 </span></div><div class="line"></div><div class="line">        使用网络中最长的有效区块链</div><div class="line">        :return: &lt;bool&gt; True 如果链被取代, 否则为False</div><div class="line">        '<span class="string">''</span></div><div class="line"></div><div class="line">        neighbours = self.nodes <span class="comment"># 网络中所有节点列表</span></div><div class="line">        new_chain = None</div><div class="line"></div><div class="line">        max_length = len(self.chain) <span class="comment"># 当前节点的区块链长度</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> neighbours: <span class="comment"># 遍历所有网络节点，若有比本节点有效区块链长的，则替换掉本地区块链</span></div><div class="line">            </div><div class="line">            <span class="comment"># 通过api获取</span></div><div class="line">            length = 100 <span class="comment"># 某节点区块链长度</span></div><div class="line">            chain = [] <span class="comment"># 某节点区块链列表</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> length &gt; max_length and self.valid_chain(chain):</div><div class="line">                max_length = length</div><div class="line">                new_chain = chain</div><div class="line"></div><div class="line">        <span class="keyword">if</span> new_chain:</div><div class="line">            self.chain = new_chain</div><div class="line">            <span class="built_in">return</span> True</div><div class="line"></div><div class="line">        <span class="built_in">return</span> False</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    def new_block(self,proof,previous_hash=None):</div><div class="line">        <span class="string">''</span><span class="string">' 创建新的区块，添加到区块链中 </span></div><div class="line">        </div><div class="line">        生成新块</div><div class="line">        :param proof: &lt;int&gt; 工作量证明</div><div class="line">        :param previous_hash: 前一个区块的hash值</div><div class="line">        :return: &lt;dict&gt; 新区块</div><div class="line"></div><div class="line">        '<span class="string">''</span></div><div class="line"></div><div class="line">        block = &#123;</div><div class="line"></div><div class="line">            <span class="string">'index'</span>: len(self.chain) + 1, <span class="comment"># 确保索引在区块链尾部</span></div><div class="line">            <span class="string">'timestamp'</span>: time(),</div><div class="line">            <span class="string">'transactions'</span>: self.current_transactions, <span class="comment"># 交易列表</span></div><div class="line">            <span class="string">'proof'</span>: proof, <span class="comment"># 工作量证明</span></div><div class="line">            <span class="string">'previous_hash'</span>: previous_hash or self.hash(self.chain[-1]), <span class="comment"># 此区块前一个区块的hash</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment"># 对交易的详细内容可以进行操作，比如说增加金币，或者减少金币等等。</span></div><div class="line"></div><div class="line">        self.current_transactions = [] <span class="comment"># 重置交易列表</span></div><div class="line"></div><div class="line">        self.chain.append(block) <span class="comment"># 将新的区块添加到区块链中</span></div><div class="line"></div><div class="line">        <span class="built_in">return</span> block</div><div class="line"></div><div class="line"></div><div class="line">    def new_transactions(self,sender,recipient,amount):</div><div class="line">        <span class="string">''</span><span class="string">' 添加新的交易到交易列表中 </span></div><div class="line"></div><div class="line">        生成新交易信息，信息将加入到下一个待挖的区块中</div><div class="line">        :param sender: &lt;str&gt; 发送者地址</div><div class="line">        :param recipient: &lt;str&gt; 接收着地址</div><div class="line">        :param amount: &lt;int&gt; 金额或者数量</div><div class="line">        :return: &lt;int&gt; 返回这笔交易的区块链索引（将这笔交易添加到区块链最后面）</div><div class="line"></div><div class="line">        '<span class="string">''</span></div><div class="line"></div><div class="line">        self.current_transactions.append(&#123;</div><div class="line"></div><div class="line">            <span class="string">"sender"</span>:sender,</div><div class="line">            <span class="string">'recipient'</span>:recipient,</div><div class="line">            <span class="string">'amount'</span>:amount,</div><div class="line"></div><div class="line">            &#125;)</div><div class="line"></div><div class="line">        <span class="built_in">return</span> self.last_block[<span class="string">'index'</span>] + 1</div><div class="line">        </div><div class="line">    @staticmethod</div><div class="line">    def <span class="built_in">hash</span>(block):</div><div class="line">        <span class="string">''</span><span class="string">' 计算一个区块的hash值 </span></div><div class="line">        </div><div class="line">        生成块的 SHA-256 hash值</div><div class="line">        :param block: &lt;dict&gt; Block</div><div class="line">        :return: &lt;str&gt;</div><div class="line"></div><div class="line">        '<span class="string">''</span></div><div class="line">        </div><div class="line">        block_string = json.dumps(block, sort_keys=True).encode()</div><div class="line">        <span class="built_in">return</span> hashlib.sha256(block_string).hexdigest()</div><div class="line"></div><div class="line">    @property</div><div class="line">    def last_block(self):</div><div class="line">        <span class="string">''</span><span class="string">' 区块链中最后一个区块 '</span><span class="string">''</span></div><div class="line"></div><div class="line">        <span class="built_in">return</span> self.chain[-1] <span class="comment"># 返回区块链中最后一个区块</span></div><div class="line"></div><div class="line"></div><div class="line">    def proof_of_work(self, last_proof):</div><div class="line">        <span class="string">''</span><span class="string">'</span></div><div class="line">        简单的工作量证明:</div><div class="line">         - 查找一个 p' 使得 <span class="built_in">hash</span>(pp<span class="string">') 以4个0开头</span></div><div class="line">         - p 是上一个块的证明,  p' 是当前的证明</div><div class="line">        :param last_proof: &lt;int&gt;</div><div class="line">        :<span class="built_in">return</span>: &lt;int&gt;</div><div class="line">        <span class="string">''</span><span class="string">'</span></div><div class="line"></div><div class="line">        proof = 0</div><div class="line">        while self.valid_proof(last_proof, proof) is False:</div><div class="line">            proof += 1</div><div class="line"></div><div class="line">        return proof</div><div class="line"></div><div class="line"></div><div class="line">    @staticmethod</div><div class="line">    def valid_proof(last_proof,proof):</div><div class="line">        '<span class="string">''</span></div><div class="line">        验证证明: 是否<span class="built_in">hash</span>(last_proof, proof)以4个0开头?</div><div class="line">        :param last_proof: &lt;int&gt; 前一个区块的<span class="built_in">hash</span></div><div class="line">        :param proof: &lt;int&gt; 当前区块的<span class="built_in">hash</span></div><div class="line">        :<span class="built_in">return</span>: &lt;bool&gt; True or False</div><div class="line">        <span class="string">''</span><span class="string">'</span></div><div class="line"></div><div class="line">        guess = (str(last_proof)+str(proof)).encode()</div><div class="line">        guess_hash = hashlib.sha256(guess).hexdigest()</div><div class="line"></div><div class="line">        return guess_hash[:4] == "0000"</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">if __name__=="__main__":</div><div class="line"></div><div class="line">    # 运行这一段脚本就是一个区块链节点，而节点之间可以通过api的方式互相传递信息</div><div class="line"></div><div class="line">    # 每个节点都每隔10分钟运行一次</div><div class="line"></div><div class="line">    blockchain = Blockchain()</div><div class="line"></div><div class="line">    for i in range(2):</div><div class="line"></div><div class="line">        # 同步一下区块</div><div class="line"></div><div class="line">        # 开始挖矿</div><div class="line">        last_block = blockchain.last_block</div><div class="line">        last_proof = last_block['proof<span class="string">']</span></div><div class="line">        proof = blockchain.proof_of_work(last_proof) </div><div class="line"></div><div class="line">        # 挖矿成功后，生成新的交易（奖励交易）</div><div class="line">        blockchain.new_transactions(sender="0",recipient="000002",amount=1)</div><div class="line"></div><div class="line">        # 添加新的交易(不是奖励交易，而是普通交易)</div><div class="line">        blockchain.new_transactions(sender="0000001",recipient="000002",amount=1)</div><div class="line"></div><div class="line">        # 输出当前交易列表</div><div class="line">        print "current_transactions lists is: \n",blockchain.current_transactions</div><div class="line"></div><div class="line">        # 挖矿成功后，生成新的区块（包含奖励交易信息、新增的交易信息），只有挖矿成功后，才能创造出新的区块。</div><div class="line">        block = blockchain.new_block(proof)</div><div class="line"></div><div class="line">        # 输出当前区块链</div><div class="line">        print "current chain lists is: \n",blockchain.chain</div></pre></td></tr></table></figure>
<p><code>从本篇开始，我将继续学习一些区块链的技术以及区块链安全相关的技术，并会总结成系列文章在博客发布，技术有限请多包涵！</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;地是床 天是被 流星是眼泪&lt;br&gt;有时醒 有时醉 大雁飞一个来回&lt;/blockquote&gt;&lt;br&gt;　　听说现在会点区块链技术的工资都高破天了，抱着对高工资的幻想，我决定也开始学一学区块链吧。那么我想接触区块链的第一步必须得是去交易平台注册个帐号，然后充点钱买0.00001个BTC了。（2333，~!~现在我穷得只剩下币了）&lt;br&gt;
    
    </summary>
    
      <category term="区块链安全" scheme="http://thief.one/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="区块链" scheme="http://thief.one/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>端口扫描器的几种代码实现方案</title>
    <link href="http://thief.one/2018/05/17/1/"/>
    <id>http://thief.one/2018/05/17/1/</id>
    <published>2018-05-17T10:12:31.000Z</published>
    <updated>2018-05-21T02:13:36.617Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">这雨夜太漫长 失眠的我 在谁梦里 歌唱</blockquote><br>　　搞安全的应该都知道端口扫描在渗透测试、漏洞扫描过程中的重要性，其与URL爬虫等技术构成了漏洞扫描的第一阶段，即目标信息收集。因此能否开发出一款高效稳定的端口扫描器，往往决定了漏洞扫描器的好坏。那么说到端口扫描器，我们往往会先想到nmap、masscan等神器，它们是这个领域的标杆。但本篇并不是为了介绍这几款工具，而是谈谈如何自研一款高效稳定的端口扫描器。<br><a id="more"></a><br>　　端口扫描器，顾名思义就是为了探测服务器上的某个端口是否开放，究其原理可以分为很多种探测方式，比如tcp三次握手扫描，syn扫描等等，本篇并不打算详细介绍这些扫描方式的区别，有兴趣的可以看下nmap的文档，对这几种扫描方式有详细的介绍。<br>　　那么说下本文重点，基于这几天我研究并尝试利用python、go开发tcp扫描器、tcp-syn扫描器，以及对比它们之间的速度性能、稳定性差异情况，将测试结果在此做个记录，并分享一下代码以及方案。</p>
<p>说明：文章结尾将给出本篇所使用代码的Github地址，可供大家测试，代码测试环境为centos7。</p>
<h3 id="scan-for-Python-Socket"><a href="#scan-for-Python-Socket" class="headerlink" title="scan for Python Socket"></a>scan for Python Socket</h3><p>Python的Socket模块可以创建套接字，创建tcp三次握手连接，以此探测目标端口是否存活。本篇将使用socket模块编写tcp扫描以及syn扫描，并对比两者的差异。</p>
<h4 id="tcp-scan"><a href="#tcp-scan" class="headerlink" title="tcp scan"></a>tcp scan</h4><p>快来看代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">import time</div><div class="line">import socket</div><div class="line"></div><div class="line">socket_timeout = 0.1</div><div class="line"></div><div class="line">def tcp_scan(ip,port):</div><div class="line">    try:</div><div class="line">        s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</div><div class="line">        s.settimeout(socket_timeout)</div><div class="line">        c=s.connect_ex((ip,port))</div><div class="line">        <span class="keyword">if</span> c==0:</div><div class="line">            <span class="built_in">print</span> <span class="string">"%s:%s is open"</span> % (ip,port)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># print "%s:%s is not open" % (ip,port)</span></div><div class="line">            pass</div><div class="line">    except Exception,e:</div><div class="line">        <span class="built_in">print</span> e</div><div class="line">    </div><div class="line">    s.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    s_time = time.time()</div><div class="line">    ip = <span class="string">"14.215.177.38"</span></div><div class="line">    <span class="keyword">for</span> port <span class="keyword">in</span> range(0,1024):</div><div class="line">        <span class="string">''</span><span class="string">' 此处可用协作 '</span><span class="string">''</span></div><div class="line">        tcp_scan(ip,port)   </div><div class="line">    e_time = time.time()</div><div class="line">    <span class="built_in">print</span> <span class="string">"scan time is "</span>,e_time-s_time</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="/upload_image/20180517/socket_tcp.png" alt=""></p>
<p>说明一下：可以看到此代码扫描1024个端口用了102s，当然代码并没有用多线程、协程等方式提高扫描效率（使用协程测试过扫65535个端口用时400s左右），因为python在这方面的能力比较弱；由于扫描过程中会建立tcp三次握手，因此比较消耗资源。</p>
<h4 id="tcp-syn-scan"><a href="#tcp-syn-scan" class="headerlink" title="tcp syn scan"></a>tcp syn scan</h4><p>　　相对tcp扫描，tcp syn扫描方式更为隐蔽，也更节省资源，那么如何利用socket模块实现tcp syn扫描呢？这里需要用到SOCK_RAW，这个在socket编程中相对少用，资料也不多。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*- </span></div><div class="line"></div><div class="line">import time</div><div class="line">import random</div><div class="line">import socket</div><div class="line">import sys</div><div class="line">from struct import *</div><div class="line"></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">Warning:must run it as root</div><div class="line"></div><div class="line">yum install python-devel libpcap-devel</div><div class="line">pip install pcap</div><div class="line"></div><div class="line">'<span class="string">''</span></div><div class="line"></div><div class="line">def checksum(msg):</div><div class="line">    <span class="string">''</span><span class="string">' Check Summing '</span><span class="string">''</span></div><div class="line"></div><div class="line">    s = 0</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(0,len(msg),2):</div><div class="line">        w = (ord(msg[i]) &lt;&lt; 8) + (ord(msg[i+1]))</div><div class="line">        s = s+w</div><div class="line"></div><div class="line">    s = (s&gt;&gt;16) + (s &amp; 0xffff)</div><div class="line">    s = ~s &amp; 0xffff</div><div class="line"></div><div class="line">    <span class="built_in">return</span> s</div><div class="line"></div><div class="line"></div><div class="line">def CreateSocket(source_ip,dest_ip):</div><div class="line">    <span class="string">''</span><span class="string">' create socket connection '</span><span class="string">''</span></div><div class="line"></div><div class="line">    try:</div><div class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)</div><div class="line">    except socket.error, msg:</div><div class="line">        <span class="built_in">print</span> <span class="string">'Socket create error: '</span>,str(msg[0]),<span class="string">'message: '</span>,msg[1]</div><div class="line">        sys.exit()</div><div class="line"></div><div class="line">    <span class="string">''</span><span class="string">' Set the IP header manually '</span><span class="string">''</span></div><div class="line"></div><div class="line">    s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)</div><div class="line">    </div><div class="line">    <span class="built_in">return</span> s</div><div class="line"></div><div class="line"></div><div class="line">def CreateIpHeader(source_ip, dest_ip):</div><div class="line">    <span class="string">''</span><span class="string">' create ip header '</span><span class="string">''</span></div><div class="line"></div><div class="line">    <span class="comment"># packet = ''</span></div><div class="line"></div><div class="line">    <span class="comment"># ip header option</span></div><div class="line"></div><div class="line">    headerlen = 5</div><div class="line">    version = 4</div><div class="line">    tos = 0</div><div class="line">    tot_len = 20 + 20</div><div class="line">    id = random.randrange(18000,65535,1)</div><div class="line">    frag_off = 0</div><div class="line">    ttl = 255</div><div class="line">    protocol = socket.IPPROTO_TCP</div><div class="line">    check = 10</div><div class="line">    saddr = socket.inet_aton ( source_ip )</div><div class="line">    daddr = socket.inet_aton ( dest_ip )</div><div class="line">    hl_version = (version &lt;&lt; 4) + headerlen</div><div class="line">    ip_header = pack(<span class="string">'!BBHHHBBH4s4s'</span>, hl_version, tos, tot_len, id, frag_off, ttl, protocol, check, saddr, daddr)</div><div class="line"></div><div class="line">    <span class="built_in">return</span> ip_header</div><div class="line"></div><div class="line"></div><div class="line">def create_tcp_syn_header(source_ip, dest_ip, dest_port):</div><div class="line">    <span class="string">''</span><span class="string">' create tcp syn header function '</span><span class="string">''</span></div><div class="line"></div><div class="line">    <span class="built_in">source</span> = random.randrange(32000,62000,1) <span class="comment"># randon select one source_port </span></div><div class="line">    seq = 0</div><div class="line">    ack_seq = 0</div><div class="line">    doff = 5</div><div class="line">    </div><div class="line">    <span class="string">''</span><span class="string">' tcp flags '</span><span class="string">''</span></div><div class="line">    fin = 0</div><div class="line">    syn = 1</div><div class="line">    rst = 0</div><div class="line">    psh = 0</div><div class="line">    ack = 0</div><div class="line">    urg = 0</div><div class="line">    window = socket.htons (8192)    <span class="comment"># max windows size</span></div><div class="line">    check = 0</div><div class="line">    urg_ptr = 0</div><div class="line">    offset_res = (doff &lt;&lt; 4) + 0</div><div class="line">    tcp_flags = fin + (syn&lt;&lt;1) + (rst&lt;&lt;2) + (psh&lt;&lt;3) + (ack&lt;&lt;4) + (urg&lt;&lt;5)</div><div class="line">    tcp_header = pack(<span class="string">'!HHLLBBHHH'</span>, <span class="built_in">source</span>, dest_port, seq, ack_seq, offset_res, tcp_flags, window, check, urg_ptr)</div><div class="line">    </div><div class="line">    <span class="string">''</span><span class="string">' headers option '</span><span class="string">''</span></div><div class="line">    source_address = socket.inet_aton( source_ip )</div><div class="line">    dest_address = socket.inet_aton( dest_ip )</div><div class="line">    placeholder = 0</div><div class="line">    protocol = socket.IPPROTO_TCP</div><div class="line">    tcp_length = len(tcp_header)</div><div class="line">    psh = pack(<span class="string">'!4s4sBBH'</span>, source_address, dest_address, placeholder, protocol, tcp_length);</div><div class="line">    psh = psh + tcp_header;</div><div class="line">    tcp_checksum = checksum(psh)</div><div class="line"></div><div class="line">    <span class="string">''</span><span class="string">' Repack the TCP header and fill in the correct checksum '</span><span class="string">''</span></div><div class="line">    tcp_header = pack(<span class="string">'!HHLLBBHHH'</span>, <span class="built_in">source</span>, dest_port, seq, ack_seq, offset_res, tcp_flags, window, tcp_checksum, urg_ptr)</div><div class="line">    </div><div class="line">    <span class="built_in">return</span> tcp_header</div><div class="line"></div><div class="line"></div><div class="line">def syn_scan(source_ip, dest_ip, des_port) :</div><div class="line"></div><div class="line">    s = CreateSocket(source_ip, dest_ip)</div><div class="line">    ip_header = CreateIpHeader(source_ip, dest_ip)</div><div class="line">    tcp_header = create_tcp_syn_header(source_ip, dest_ip, des_port)</div><div class="line">    packet = ip_header + tcp_header</div><div class="line"></div><div class="line">    s.sendto(packet, (dest_ip, 0))</div><div class="line">    data = s.recvfrom(1024) [0][0:]</div><div class="line"></div><div class="line">    ip_header_len = (ord(data[0]) &amp; 0x0f) * 4</div><div class="line">    <span class="comment"># ip_header_ret = data[0: ip_header_len - 1]</span></div><div class="line">    tcp_header_len = (ord(data[32]) &amp; 0xf0)&gt;&gt;2</div><div class="line"></div><div class="line">    tcp_header_ret = data[ip_header_len:ip_header_len+tcp_header_len - 1]</div><div class="line"></div><div class="line">    <span class="string">''</span><span class="string">' SYN/ACK flags '</span><span class="string">''</span></div><div class="line">    <span class="keyword">if</span> ord(tcp_header_ret[13]) == 0x12:</div><div class="line">        <span class="built_in">print</span>  <span class="string">"%s:%s is open"</span> % (dest_ip,des_port)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">print</span> <span class="string">"%s:%s is not open"</span> % (dest_ip,des_port)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    t_s = time.time()</div><div class="line">    source_ip = <span class="string">''</span> <span class="comment"># 填写本机ip</span></div><div class="line">    dest_ip = <span class="string">'14.215.177.38'</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> des_port <span class="keyword">in</span> range(1024):</div><div class="line">        syn_scan(source_ip, dest_ip, des_port)</div><div class="line"></div><div class="line">    t_e = time.time()</div><div class="line">    <span class="built_in">print</span> <span class="string">"time is "</span>,(t_e-t_s)</div></pre></td></tr></table></figure></p>
<p>有一点需要注意的，运行这段代码前，需要在系统上安装依赖:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install python-devel libpcap-devel</div><div class="line">pip install pcap</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="/upload_image/20180517/socket_syn.png" alt=""></p>
<p>说明：从运行结果上来看，并没有很准确，而且速度也不快，不清楚是不是代码上有问题。</p>
<h3 id="scan-for-Python-scapy"><a href="#scan-for-Python-scapy" class="headerlink" title="scan for Python scapy"></a>scan for Python scapy</h3><p>除了socket模块外，python还有一个scapy模块，可以用来模拟发包，但只能在linux下使用，其他操作系统不建议使用此模块。</p>
<h4 id="tcp-syn-csan"><a href="#tcp-syn-csan" class="headerlink" title="tcp syn csan"></a>tcp syn csan</h4><p>代码在这里：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">import time</div><div class="line">from scapy.all import *</div><div class="line"></div><div class="line"></div><div class="line">ip = <span class="string">"14.215.177.38"</span></div><div class="line">TIMEOUT = 0.5</div><div class="line">threads = 500</div><div class="line">port_range = 1024</div><div class="line">retry = 1</div><div class="line"></div><div class="line"></div><div class="line">def is_up(ip):</div><div class="line">    <span class="string">""</span><span class="string">" Tests if host is up "</span><span class="string">""</span></div><div class="line"></div><div class="line">    icmp = IP(dst=ip)/ICMP()</div><div class="line">    resp = sr1(icmp, timeout=TIMEOUT)</div><div class="line">    <span class="keyword">if</span> resp == None:</div><div class="line">        <span class="built_in">return</span> False</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">return</span> True</div><div class="line"></div><div class="line">def reset_half_open(ip, ports):</div><div class="line">    <span class="comment"># Reset the connection to stop half-open connections from pooling up</span></div><div class="line"></div><div class="line">    sr(IP(dst=ip)/TCP(dport=ports, flags=<span class="string">'AR'</span>), timeout=TIMEOUT)</div><div class="line"></div><div class="line"></div><div class="line">def is_open(ip, ports):</div><div class="line"></div><div class="line">    to_reset = []</div><div class="line">    results = []</div><div class="line"></div><div class="line">    p = IP(dst=ip)/TCP(dport=ports, flags=<span class="string">'S'</span>)  <span class="comment"># Forging SYN packet</span></div><div class="line">    answers, un_answered = sr(p, verbose=False, retry=retry ,timeout=TIMEOUT) <span class="comment"># Send the packets</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> req, resp <span class="keyword">in</span> answers:</div><div class="line">        <span class="keyword">if</span> not resp.haslayer(TCP):</div><div class="line">            <span class="built_in">continue</span></div><div class="line">        tcp_layer = resp.getlayer(TCP)</div><div class="line">        <span class="keyword">if</span> tcp_layer.flags == 0x12:</div><div class="line">            <span class="comment"># port is open</span></div><div class="line">            to_reset.append(tcp_layer.sport)</div><div class="line">            results.append(tcp_layer.sport)</div><div class="line"></div><div class="line">        <span class="keyword">elif</span> tcp_layer.flags == 0x14:</div><div class="line">            <span class="comment"># port is open</span></div><div class="line">            pass</div><div class="line"></div><div class="line">    reset_half_open(ip, to_reset)</div><div class="line">    </div><div class="line">    <span class="built_in">return</span> results</div><div class="line"></div><div class="line"></div><div class="line">def chunks(l, n):</div><div class="line">    <span class="string">""</span><span class="string">"Yield successive n-sized chunks from l."</span><span class="string">""</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(0, len(l), n):</div><div class="line">        yield l[i:i + n]</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    start_time = time.time()</div><div class="line">    open_port_list = []</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ports <span class="keyword">in</span> chunks(list(range(port_range)), threads):</div><div class="line">        results = is_open(ip, ports)</div><div class="line">        <span class="keyword">if</span> results:</div><div class="line">           open_port_list += results</div><div class="line">                </div><div class="line">    end_time = time.time()</div><div class="line">    <span class="built_in">print</span> <span class="string">"%s %s"</span> % (ip,open_port_list)</div><div class="line">    <span class="built_in">print</span> <span class="string">"%s Scan Completed in %fs"</span> % (ip, end_time-start_time)</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="/upload_image/20180517/scapy_syn.png" alt=""></p>
<p>说明：由于scapy可以一次性发多个syn包，因此速度相对socket更快一些，但稳定性没有很好。</p>
<h3 id="scan-for-python-nmap"><a href="#scan-for-python-nmap" class="headerlink" title="scan for python+nmap"></a>scan for python+nmap</h3><p>文章开头提到了nmap，其实在python中也可以直接调用nmap，看代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">pip install python-nmap</div><div class="line">'<span class="string">''</span></div><div class="line"></div><div class="line">import nmap</div><div class="line">nm =nmap.PortScanner()</div><div class="line"></div><div class="line">def scan(ip,port,arg):</div><div class="line">    try:</div><div class="line">        nm.scan(ip, arguments=arg+str(port))</div><div class="line">    except nmap.nmap.PortScannerError:</div><div class="line">        <span class="built_in">print</span> <span class="string">"Please run -O method for root privileges"</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">for</span> host <span class="keyword">in</span> nm.all_hosts():</div><div class="line">            <span class="keyword">for</span> proto <span class="keyword">in</span> nm[host].all_protocols():</div><div class="line">                lport = nm[host][proto].keys()</div><div class="line">                lport.sort()</div><div class="line">                <span class="keyword">for</span> port <span class="keyword">in</span> lport:</div><div class="line">                    <span class="built_in">print</span> (<span class="string">'port : %s\tstate : %s'</span> % (port, nm[host][proto][port][<span class="string">'state'</span>]))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    port=<span class="string">"80,443,22,21"</span></div><div class="line">    scan(ip=<span class="string">"14.215.177.38"</span>,port=port,arg=<span class="string">"-sS -Pn -p"</span>)</div><div class="line">    <span class="comment"># tcp scan -sT</span></div><div class="line">    <span class="comment"># tcp syn scan -sS</span></div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="/upload_image/20180517/nmap_scan.png" alt=""><br>由于nmap扫描速度相对比较慢，因此这里只演示扫描4个端口，不做速度的对比，当然其稳定性还是可以的。</p>
<h3 id="scan-for-go"><a href="#scan-for-go" class="headerlink" title="scan for go"></a>scan for go</h3><p>　　前文一直在介绍使用python语言开发端口扫描器，然而由于python在多线程方面的弱势，扫描器的性能可想而知，因此我又利用go语言的高并发性优势，尝试开发端口扫描器。（题外话：为此我花了半天时间看了下go语言的基础，勉强看懂了扫描代码，并做了一些修改）</p>
<h4 id="tcp-scan-1"><a href="#tcp-scan-1" class="headerlink" title="tcp scan"></a>tcp scan</h4><p>直接看代码吧：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">// port tcp scan</div><div class="line"></div><div class="line">import (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"net"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">    <span class="string">"runtime"</span></div><div class="line">    <span class="string">"strconv"</span></div><div class="line">    <span class="string">"sync"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line">func loop(inport chan int, startport, endport int) &#123;</div><div class="line">    <span class="keyword">for</span> i := startport; i &lt;= endport; i++ &#123;</div><div class="line">        inport &lt;- i</div><div class="line">    &#125;</div><div class="line">    close(inport)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">type</span> ScanSafeCount struct &#123;</div><div class="line">    // 结构体</div><div class="line">    count int</div><div class="line">    mux   sync.Mutex</div><div class="line">&#125;</div><div class="line"></div><div class="line">var scanCount ScanSafeCount</div><div class="line"></div><div class="line"></div><div class="line">func scanner(inport int, outport chan int, ip string, endport int) &#123;</div><div class="line">    // 扫描函数</div><div class="line"></div><div class="line">    <span class="keyword">in</span> := inport // 定义要扫描的端口号</div><div class="line">    // fmt.Printf(<span class="string">" %d "</span>, <span class="keyword">in</span>) // 输出扫描的端口</div><div class="line"></div><div class="line">    host := fmt.Sprintf(<span class="string">"%s:%d"</span>, ip, <span class="keyword">in</span>) // 类似（ip,port）</div><div class="line"></div><div class="line">    tcpAddr, err := net.ResolveTCPAddr(<span class="string">"tcp4"</span>, host) // 根据域名查找ip</div><div class="line"></div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        // 域名解析ip失败</div><div class="line">        outport &lt;- 0</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        conn, err := net.DialTimeout(<span class="string">"tcp"</span>, tcpAddr.String(), 10*time.Second) //建立tcp连接</div><div class="line">        <span class="keyword">if</span> err != nil &#123;</div><div class="line">            // tcp连接失败</div><div class="line">            outport &lt;- 0</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            // tcp连接成功</div><div class="line">            outport &lt;- <span class="keyword">in</span> // 将端口写入outport信号</div><div class="line">            fmt.Printf(<span class="string">"\n *************( %d 可以 )*****************\n"</span>, <span class="keyword">in</span>)</div><div class="line">            conn.Close()</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 线程锁</div><div class="line">    scanCount.mux.Lock()</div><div class="line">    scanCount.count = scanCount.count - 1</div><div class="line">    <span class="keyword">if</span> scanCount.count &lt;= 0 &#123;</div><div class="line">        close(outport)</div><div class="line">    &#125;</div><div class="line">    scanCount.mux.Unlock()</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">    runtime.GOMAXPROCS(runtime.NumCPU()) // 设置最大可使用的cpu核数</div><div class="line"></div><div class="line">    // 定义变量</div><div class="line">    inport := make(chan int) // 信号变量，类似python中的queue</div><div class="line">    outport := make(chan int)</div><div class="line">    collect := []int&#123;&#125; // 定义一个切片变量，类似python中的list</div><div class="line"></div><div class="line">    // fmt.Println(os.Args, len(os.Args)) // 获取命令行参数并输出</div><div class="line"></div><div class="line">    <span class="keyword">if</span> len(os.Args) != 4 &#123;</div><div class="line">        // 命令行参数个数有误</div><div class="line">        fmt.Println(<span class="string">"使用方式： port_scanner IP startport endport"</span>)</div><div class="line">        os.Exit(0)</div><div class="line">    &#125;</div><div class="line">    s_time := time.Now().Unix()</div><div class="line"></div><div class="line">    // fmt.Println(<span class="string">"扫描开始："</span>) // 获取当前时间</div><div class="line"></div><div class="line">    ip := string(os.Args[1]) // 获取参数中的ip</div><div class="line">    startport, _ := strconv.Atoi(os.Args[2]) // 获取参数中的启始端口</div><div class="line">    endport, _ := strconv.Atoi(os.Args[3]) // 获取参数中的结束端口</div><div class="line"></div><div class="line">    <span class="keyword">if</span> startport &gt; endport &#123;</div><div class="line">        fmt.Println(<span class="string">"Usage: scanner IP startport endport"</span>)</div><div class="line">        fmt.Println(<span class="string">"Endport must be larger than startport"</span>)</div><div class="line">        os.Exit(0)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        // 定义scanCount变量为ScanSafeCount结构体，即计算扫描的端口数量</div><div class="line">        scanCount = ScanSafeCount&#123;count: (endport - startport + 1)&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Printf(<span class="string">"扫描 %s：%d----------%d\n"</span>, ip, startport, endport)</div><div class="line"></div><div class="line">    go loop(inport, startport, endport)  // 执行loop函数将端口写入input信号</div><div class="line"></div><div class="line">    <span class="keyword">for</span> v := range inport &#123;</div><div class="line">        // 开始循环input</div><div class="line">        go scanner(v, outport, ip, endport)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 输出结果</div><div class="line">    <span class="keyword">for</span> port := range outport &#123;</div><div class="line">        <span class="keyword">if</span> port != 0 &#123;</div><div class="line">            collect = append(collect, port)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Println(<span class="string">"--"</span>)</div><div class="line">    fmt.Println(collect)</div><div class="line">    e_time := time.Now().Unix()</div><div class="line">    fmt.Println(<span class="string">"扫描时间:"</span>, e_time-s_time)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　代码我就不解释了（我在代码中加了些注释，应该大致可以看懂），本文也不打算介绍go的用法，毕竟自己也是刚开始学习go，有兴趣的可以看看go的文档，然后再回过头来看看这段代码。</p>
<p>代码运行结果：<br><img src="/upload_image/20180517/go_tcp.png" alt=""></p>
<p>说明：由于是tcp扫描，所以多少还是占资源的，而且测试发现稳定性不是很好。</p>
<h4 id="tcp-syn-scan-1"><a href="#tcp-syn-scan-1" class="headerlink" title="tcp syn scan"></a>tcp syn scan</h4><p>看代码看代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">// port tcp syn scan</div><div class="line"></div><div class="line">import (</div><div class="line">    <span class="string">"bytes"</span></div><div class="line">    <span class="string">"encoding/binary"</span></div><div class="line">    <span class="string">"flag"</span></div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"log"</span></div><div class="line">    <span class="string">"math/rand"</span></div><div class="line">    <span class="string">"net"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">    <span class="string">"strconv"</span></div><div class="line">    <span class="string">"strings"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">    <span class="string">"errors"</span></div><div class="line">)</div><div class="line"></div><div class="line">//TCPHeader <span class="built_in">test</span></div><div class="line"><span class="built_in">type</span> TCPHeader struct &#123;</div><div class="line">    SrcPort       uint16</div><div class="line">    DstPort       uint16</div><div class="line">    SeqNum        uint32</div><div class="line">    AckNum        uint32</div><div class="line">    Flags         uint16</div><div class="line">    Window        uint16</div><div class="line">    ChkSum        uint16</div><div class="line">    UrgentPointer uint16</div><div class="line">&#125;</div><div class="line"></div><div class="line">//TCPOption <span class="built_in">test</span></div><div class="line"><span class="built_in">type</span> TCPOption struct &#123;</div><div class="line">    Kind   uint8</div><div class="line">    Length uint8</div><div class="line">    Data   []byte</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">type</span> scanResult struct &#123;</div><div class="line">    Port   uint16</div><div class="line">    Opened bool</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">type</span> scanJob struct &#123;</div><div class="line">    Laddr string</div><div class="line">    Raddr string</div><div class="line">    SPort uint16</div><div class="line">    DPort uint16</div><div class="line">    Stop  uint8</div><div class="line">&#125;</div><div class="line"></div><div class="line">var stopFlag = make(chan uint8, 1)</div><div class="line"></div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line"></div><div class="line">    rate := time.Second / 400</div><div class="line">    throttle := time.Tick(rate)</div><div class="line">    <span class="built_in">jobs</span> := make(chan *scanJob, 65536)</div><div class="line">    results := make(chan *scanResult, 1000)</div><div class="line">    <span class="keyword">for</span> w := 0; w &lt; 10; w++ &#123;</div><div class="line">        go worker(w, <span class="built_in">jobs</span>, throttle, results)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 获取命令行参数</div><div class="line"></div><div class="line">    ifaceName := flag.String(<span class="string">"i"</span>, <span class="string">"eth0"</span>, <span class="string">"Specify network"</span>)</div><div class="line">    remote := flag.String(<span class="string">"r"</span>, <span class="string">""</span>, <span class="string">"remote address"</span>)</div><div class="line">    portRange := flag.String(<span class="string">"p"</span>, <span class="string">"1-1024"</span>, <span class="string">"port range: -p 1-1024"</span>)</div><div class="line">    flag.Parse()</div><div class="line"></div><div class="line">    // ifaceName := &amp;interfaceName_</div><div class="line">    // remote := &amp;remote_</div><div class="line">    // portRange := &amp;portRange_</div><div class="line"></div><div class="line">    s_time := time.Now().Unix()</div><div class="line"></div><div class="line">    laddr := interfaceAddress(*ifaceName) //</div><div class="line">    raddr := *remote</div><div class="line">    minPort , maxPort := portSplit(portRange)</div><div class="line"></div><div class="line">    // fmt.Println(laddr, raddr) // 输出源ip地址，目标ip地址</div><div class="line"></div><div class="line">    go func(num int)&#123;</div><div class="line">        <span class="keyword">for</span> i := 0; i &lt; num; i++ &#123;</div><div class="line">            recvSynAck(laddr, raddr, results)</div><div class="line">        &#125;</div><div class="line">    &#125;(10)</div><div class="line"></div><div class="line">    go func(jobLength int) &#123;</div><div class="line">        <span class="keyword">for</span> j := minPort; j &lt; maxPort + 1; j++ &#123;</div><div class="line">            s := scanJob&#123;</div><div class="line">                Laddr: laddr,</div><div class="line">                Raddr: raddr,</div><div class="line">                SPort: uint16(random(10000, 65535)),</div><div class="line">                DPort: uint16(j + 1),</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">jobs</span> &lt;- &amp;s</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">jobs</span> &lt;- &amp;scanJob&#123;Stop: 1&#125;</div><div class="line">    &#125;(1024)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        select &#123;</div><div class="line">        <span class="keyword">case</span> res := &lt;-results:</div><div class="line">            fmt.Println(<span class="string">"扫描到开放的端口:"</span>,res.Port)</div><div class="line">        <span class="keyword">case</span> &lt;-stopFlag:</div><div class="line">            e_time := time.Now().Unix()</div><div class="line">            fmt.Println(<span class="string">"总共用了多少时间(s):"</span>,e_time-s_time)</div><div class="line">            os.Exit(0)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func worker(id int, <span class="built_in">jobs</span> &lt;-chan *scanJob, th &lt;-chan time.Time, results chan&lt;- *scanResult) &#123;</div><div class="line">    <span class="keyword">for</span> j := range <span class="built_in">jobs</span> &#123;</div><div class="line">        <span class="keyword">if</span> j.Stop != 1 &#123;</div><div class="line">            sendSyn(j.Laddr, j.Raddr, j.SPort, j.DPort)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            stopFlag &lt;- j.Stop</div><div class="line">        &#125;</div><div class="line">        &lt;-th</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func checkError(err error) &#123;</div><div class="line">    // 错误check</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        log.Println(err)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//CheckSum <span class="built_in">test</span></div><div class="line">func CheckSum(data []byte, src, dst [4]byte) uint16 &#123;</div><div class="line">    pseudoHeader := []byte&#123;</div><div class="line">        src[0], src[1], src[2], src[3],</div><div class="line">        dst[0], dst[1], dst[2], dst[3],</div><div class="line">        0,</div><div class="line">        6,</div><div class="line">        0,</div><div class="line">        byte(len(data)),</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    totalLength := len(pseudoHeader) + len(data)</div><div class="line">    <span class="keyword">if</span> totalLength%2 != 0 &#123;</div><div class="line">        totalLength++</div><div class="line">    &#125;</div><div class="line">    d := make([]byte, 0, totalLength)</div><div class="line">    d = append(d, pseudoHeader...)</div><div class="line">    d = append(d, data...)</div><div class="line"></div><div class="line">    <span class="built_in">return</span> ^mySum(d)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func mySum(data []byte) uint16 &#123;</div><div class="line">    var sum uint32</div><div class="line">    <span class="keyword">for</span> i := 0; i &lt; len(data)-1; i += 2 &#123;</div><div class="line">        sum += uint32(uint16(data[i])&lt;&lt;8 | uint16(data[i+1]))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sum = (sum &gt;&gt; 16) + (sum &amp; 0xffff)</div><div class="line">    sum = sum + (sum &gt;&gt; 16)</div><div class="line">    <span class="built_in">return</span> uint16(sum)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func sendSyn(laddr, raddr string, sport, dport uint16) &#123;</div><div class="line">    conn, err := net.Dial(<span class="string">"ip4:tcp"</span>, raddr)</div><div class="line">    checkError(err)</div><div class="line">    defer conn.Close()</div><div class="line">    op := []TCPOption&#123;</div><div class="line">        TCPOption&#123;</div><div class="line">            Kind:   2,</div><div class="line">            Length: 4,</div><div class="line">            Data:   []byte&#123;0x05, 0xb4&#125;,</div><div class="line">        &#125;,</div><div class="line">        TCPOption&#123;</div><div class="line">            Kind: 0,</div><div class="line">        &#125;,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tcpH := TCPHeader&#123;</div><div class="line">        SrcPort:       sport,</div><div class="line">        DstPort:       dport,</div><div class="line">        SeqNum:        rand.Uint32(),</div><div class="line">        AckNum:        0,</div><div class="line">        Flags:         0x8002,</div><div class="line">        Window:        8192,</div><div class="line">        ChkSum:        0,</div><div class="line">        UrgentPointer: 0,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buff := new(bytes.Buffer)</div><div class="line"></div><div class="line">    err = binary.Write(buff, binary.BigEndian, tcpH)</div><div class="line">    checkError(err)</div><div class="line">    <span class="keyword">for</span> i := range op &#123;</div><div class="line">        binary.Write(buff, binary.BigEndian, op[i].Kind)</div><div class="line">        binary.Write(buff, binary.BigEndian, op[i].Length)</div><div class="line">        binary.Write(buff, binary.BigEndian, op[i].Data)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    binary.Write(buff, binary.BigEndian, [6]byte&#123;&#125;)</div><div class="line"></div><div class="line">    data := buff.Bytes()</div><div class="line">    checkSum := CheckSum(data, ipstr2Bytes(laddr), ipstr2Bytes(raddr))</div><div class="line">    //fmt.Printf(<span class="string">"CheckSum 0x%X\n"</span>, checkSum)</div><div class="line">    tcpH.ChkSum = checkSum</div><div class="line"></div><div class="line">    buff = new(bytes.Buffer)</div><div class="line">    binary.Write(buff, binary.BigEndian, tcpH)</div><div class="line">    <span class="keyword">for</span> i := range op &#123;</div><div class="line">        binary.Write(buff, binary.BigEndian, op[i].Kind)</div><div class="line">        binary.Write(buff, binary.BigEndian, op[i].Length)</div><div class="line">        binary.Write(buff, binary.BigEndian, op[i].Data)</div><div class="line">    &#125;</div><div class="line">    binary.Write(buff, binary.BigEndian, [6]byte&#123;&#125;)</div><div class="line">    data = buff.Bytes()</div><div class="line"></div><div class="line">    //fmt.Printf(<span class="string">"% X\n"</span>, data)</div><div class="line">    _, err = conn.Write(data)</div><div class="line">    checkError(err)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func recvSynAck(laddr, raddr string, res chan&lt;- *scanResult) error &#123;</div><div class="line">    listenAddr, err := net.ResolveIPAddr(<span class="string">"ip4"</span>, laddr) // 解析域名为ip</div><div class="line">    checkError(err)</div><div class="line">    conn, err := net.ListenIP(<span class="string">"ip4:tcp"</span>, listenAddr)</div><div class="line">    defer conn.Close()</div><div class="line">    checkError(err)</div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        buff := make([]byte, 1024)</div><div class="line">        _, addr, err := conn.ReadFrom(buff)</div><div class="line">        <span class="keyword">if</span> err != nil &#123;</div><div class="line">            <span class="built_in">continue</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> addr.String() != raddr || buff[13] != 0x12 &#123;</div><div class="line">            <span class="built_in">continue</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var port uint16</div><div class="line">        binary.Read(bytes.NewReader(buff), binary.BigEndian, &amp;port)</div><div class="line">        res &lt;- &amp;scanResult&#123;</div><div class="line">            Port:   port,</div><div class="line">            Opened: <span class="literal">true</span>,</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func ipstr2Bytes(addr string) [4]byte &#123;</div><div class="line">    s := strings.Split(addr, <span class="string">"."</span>)</div><div class="line">    b0, _ := strconv.Atoi(s[0])</div><div class="line">    b1, _ := strconv.Atoi(s[1])</div><div class="line">    b2, _ := strconv.Atoi(s[2])</div><div class="line">    b3, _ := strconv.Atoi(s[3])</div><div class="line">    <span class="built_in">return</span> [4]byte&#123;byte(b0), byte(b1), byte(b2), byte(b3)&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func random(min, max int) int &#123;</div><div class="line">    <span class="built_in">return</span> rand.Intn(max-min) + min</div><div class="line">&#125;</div><div class="line"></div><div class="line">func interfaceAddress(ifaceName string ) string &#123;</div><div class="line">    iface, err:= net.InterfaceByName(ifaceName)</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line">    addr, err := iface.Addrs()</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line">    addrStr := strings.Split(addr[0].String(), <span class="string">"/"</span>)[0]</div><div class="line">    <span class="built_in">return</span> addrStr</div><div class="line">&#125;</div><div class="line"></div><div class="line">func portSplit(portRange *string) (uint16, uint16) &#123;</div><div class="line">    ports := strings.Split(*portRange, <span class="string">"-"</span>)</div><div class="line">    minPort, err := strconv.ParseUint(ports[0], 10, 16)</div><div class="line">    <span class="keyword">if</span> err !=nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line">    maxPort, err := strconv.ParseUint(ports[1], 10, 16)</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> minPort &gt; maxPort &#123;</div><div class="line">        panic(errors.New(<span class="string">"minPort must greater than maxPort"</span>))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">return</span> uint16(minPort), uint16(maxPort)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码运行结果：<br><img src="/upload_image/20180517/go_syn.png" alt=""><br>没错，就是2s！我测试了扫描全端口（0-65535），大概120s左右，而且稳定性不错。</p>
<h3 id="scan-for-go-python"><a href="#scan-for-go-python" class="headerlink" title="scan for go+python"></a>scan for go+python</h3><p>　　经过前面的测试我们不难发现，在并发的性能上，go完胜python，但go不适合做复杂的逻辑处理，以及web开发之类的。因此如何整合python跟go呢？这里我想了两种方案，第一种将go语言打包成.so动态连接库，利用python的ctypes模块可以调用；第二种是go写成接口，提供python调用。写成接口的方式相对简单一些，因此这里不介绍了，说说如何打包go，即如何利用python调用go的方法或者说函数。</p>
<p>先看下修改过后的tcp_syn_scan.go代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">// port tcp syn scan</div><div class="line"></div><div class="line">import (</div><div class="line">    <span class="string">"C"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">    <span class="string">"bytes"</span></div><div class="line">    <span class="string">"encoding/binary"</span></div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"log"</span></div><div class="line">    <span class="string">"math/rand"</span></div><div class="line">    <span class="string">"net"</span></div><div class="line">    <span class="string">"strconv"</span></div><div class="line">    <span class="string">"strings"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">    <span class="string">"errors"</span></div><div class="line">)</div><div class="line"></div><div class="line">//TCPHeader <span class="built_in">test</span></div><div class="line"><span class="built_in">type</span> TCPHeader struct &#123;</div><div class="line">    SrcPort       uint16</div><div class="line">    DstPort       uint16</div><div class="line">    SeqNum        uint32</div><div class="line">    AckNum        uint32</div><div class="line">    Flags         uint16</div><div class="line">    Window        uint16</div><div class="line">    ChkSum        uint16</div><div class="line">    UrgentPointer uint16</div><div class="line">&#125;</div><div class="line"></div><div class="line">//TCPOption <span class="built_in">test</span></div><div class="line"><span class="built_in">type</span> TCPOption struct &#123;</div><div class="line">    Kind   uint8</div><div class="line">    Length uint8</div><div class="line">    Data   []byte</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">type</span> scanResult struct &#123;</div><div class="line">    Port   uint16</div><div class="line">    Opened bool</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">type</span> scanJob struct &#123;</div><div class="line">    Laddr string</div><div class="line">    Raddr string</div><div class="line">    SPort uint16</div><div class="line">    DPort uint16</div><div class="line">    Stop  uint8</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">var stopFlag = make(chan uint8, 1)</div><div class="line"></div><div class="line">//<span class="built_in">export</span> Scan</div><div class="line">func Scan(remote_ *C.char, portRange_ *C.char, interfaceName_ *C.char) &#123;</div><div class="line">    </div><div class="line">    rate := time.Second / 400</div><div class="line">    throttle := time.Tick(rate)</div><div class="line">    <span class="built_in">jobs</span> := make(chan *scanJob, 65536)</div><div class="line">    results := make(chan *scanResult, 1000)</div><div class="line">    <span class="keyword">for</span> w := 0; w &lt; 10; w++ &#123;</div><div class="line">        go worker(w, <span class="built_in">jobs</span>, throttle, results)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 获取命令行参数</div><div class="line"></div><div class="line">    // ifaceName := flag.String(<span class="string">"i"</span>, <span class="string">"eth0"</span>, <span class="string">"Specify network"</span>)</div><div class="line">    // remote := flag.String(<span class="string">"r"</span>, <span class="string">""</span>, <span class="string">"remote address"</span>)</div><div class="line">    // portRange := flag.String(<span class="string">"p"</span>, <span class="string">"1-1024"</span>, <span class="string">"port range: -p 1-1024"</span>)</div><div class="line">    // flag.Parse()</div><div class="line">    </div><div class="line">    interfaceName_1 := C.GoString(interfaceName_)</div><div class="line">    remote_1 := C.GoString(remote_)</div><div class="line">    portRange_1 := C.GoString(portRange_) </div><div class="line"></div><div class="line">    ifaceName := &amp;interfaceName_1</div><div class="line">    remote := &amp;remote_1</div><div class="line">    portRange := &amp;portRange_1</div><div class="line"></div><div class="line">    s_time := time.Now().Unix()</div><div class="line">    </div><div class="line">    laddr := interfaceAddress(*ifaceName) //</div><div class="line">    raddr := *remote</div><div class="line">    minPort , maxPort := portSplit(portRange)</div><div class="line"></div><div class="line">    fmt.Println(laddr, raddr) // 输出源ip地址，目标ip地址</div><div class="line"></div><div class="line">    go func(num int)&#123;</div><div class="line">        <span class="keyword">for</span> i := 0; i &lt; num; i++ &#123;</div><div class="line">            recvSynAck(laddr, raddr, results)</div><div class="line">        &#125;</div><div class="line">    &#125;(10)</div><div class="line"></div><div class="line">    go func(jobLength int) &#123;</div><div class="line">        <span class="keyword">for</span> j := minPort; j &lt; maxPort + 1; j++ &#123;</div><div class="line">            s := scanJob&#123;</div><div class="line">                Laddr: laddr,</div><div class="line">                Raddr: raddr,</div><div class="line">                SPort: uint16(random(10000, 65535)),</div><div class="line">                DPort: uint16(j + 1),</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">jobs</span> &lt;- &amp;s</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">jobs</span> &lt;- &amp;scanJob&#123;Stop: 1&#125;</div><div class="line">    &#125;(1024)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        select &#123;</div><div class="line">        <span class="keyword">case</span> res := &lt;-results:</div><div class="line">            fmt.Println(<span class="string">"扫描到开放的端口："</span>,res.Port) //输出开放的端口号</div><div class="line">        <span class="keyword">case</span> &lt;-stopFlag:</div><div class="line">            e_time := time.Now().Unix()</div><div class="line">            fmt.Println(<span class="string">"本次扫描总共耗时(s):"</span>,e_time-s_time)</div><div class="line">            os.Exit(0)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func worker(id int, <span class="built_in">jobs</span> &lt;-chan *scanJob, th &lt;-chan time.Time, results chan&lt;- *scanResult) &#123;</div><div class="line">    <span class="keyword">for</span> j := range <span class="built_in">jobs</span> &#123;</div><div class="line">        <span class="keyword">if</span> j.Stop != 1 &#123;</div><div class="line">            sendSyn(j.Laddr, j.Raddr, j.SPort, j.DPort)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            stopFlag &lt;- j.Stop</div><div class="line">        &#125;</div><div class="line">        &lt;-th</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func checkError(err error) &#123;</div><div class="line">    // 错误check</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        log.Println(err)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//CheckSum <span class="built_in">test</span></div><div class="line">func CheckSum(data []byte, src, dst [4]byte) uint16 &#123;</div><div class="line">    pseudoHeader := []byte&#123;</div><div class="line">        src[0], src[1], src[2], src[3],</div><div class="line">        dst[0], dst[1], dst[2], dst[3],</div><div class="line">        0,</div><div class="line">        6,</div><div class="line">        0,</div><div class="line">        byte(len(data)),</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    totalLength := len(pseudoHeader) + len(data)</div><div class="line">    <span class="keyword">if</span> totalLength%2 != 0 &#123;</div><div class="line">        totalLength++</div><div class="line">    &#125;</div><div class="line">    d := make([]byte, 0, totalLength)</div><div class="line">    d = append(d, pseudoHeader...)</div><div class="line">    d = append(d, data...)</div><div class="line"></div><div class="line">    <span class="built_in">return</span> ^mySum(d)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func mySum(data []byte) uint16 &#123;</div><div class="line">    var sum uint32</div><div class="line">    <span class="keyword">for</span> i := 0; i &lt; len(data)-1; i += 2 &#123;</div><div class="line">        sum += uint32(uint16(data[i])&lt;&lt;8 | uint16(data[i+1]))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sum = (sum &gt;&gt; 16) + (sum &amp; 0xffff)</div><div class="line">    sum = sum + (sum &gt;&gt; 16)</div><div class="line">    <span class="built_in">return</span> uint16(sum)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func sendSyn(laddr, raddr string, sport, dport uint16) &#123;</div><div class="line">    conn, err := net.Dial(<span class="string">"ip4:tcp"</span>, raddr)</div><div class="line">    checkError(err)</div><div class="line">    defer conn.Close()</div><div class="line">    op := []TCPOption&#123;</div><div class="line">        TCPOption&#123;</div><div class="line">            Kind:   2,</div><div class="line">            Length: 4,</div><div class="line">            Data:   []byte&#123;0x05, 0xb4&#125;,</div><div class="line">        &#125;,</div><div class="line">        TCPOption&#123;</div><div class="line">            Kind: 0,</div><div class="line">        &#125;,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tcpH := TCPHeader&#123;</div><div class="line">        SrcPort:       sport,</div><div class="line">        DstPort:       dport,</div><div class="line">        SeqNum:        rand.Uint32(),</div><div class="line">        AckNum:        0,</div><div class="line">        Flags:         0x8002,</div><div class="line">        Window:        8192,</div><div class="line">        ChkSum:        0,</div><div class="line">        UrgentPointer: 0,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buff := new(bytes.Buffer)</div><div class="line"></div><div class="line">    err = binary.Write(buff, binary.BigEndian, tcpH)</div><div class="line">    checkError(err)</div><div class="line">    <span class="keyword">for</span> i := range op &#123;</div><div class="line">        binary.Write(buff, binary.BigEndian, op[i].Kind)</div><div class="line">        binary.Write(buff, binary.BigEndian, op[i].Length)</div><div class="line">        binary.Write(buff, binary.BigEndian, op[i].Data)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    binary.Write(buff, binary.BigEndian, [6]byte&#123;&#125;)</div><div class="line"></div><div class="line">    data := buff.Bytes()</div><div class="line">    checkSum := CheckSum(data, ipstr2Bytes(laddr), ipstr2Bytes(raddr))</div><div class="line">    //fmt.Printf(<span class="string">"CheckSum 0x%X\n"</span>, checkSum)</div><div class="line">    tcpH.ChkSum = checkSum</div><div class="line"></div><div class="line">    buff = new(bytes.Buffer)</div><div class="line">    binary.Write(buff, binary.BigEndian, tcpH)</div><div class="line">    <span class="keyword">for</span> i := range op &#123;</div><div class="line">        binary.Write(buff, binary.BigEndian, op[i].Kind)</div><div class="line">        binary.Write(buff, binary.BigEndian, op[i].Length)</div><div class="line">        binary.Write(buff, binary.BigEndian, op[i].Data)</div><div class="line">    &#125;</div><div class="line">    binary.Write(buff, binary.BigEndian, [6]byte&#123;&#125;)</div><div class="line">    data = buff.Bytes()</div><div class="line"></div><div class="line">    //fmt.Printf(<span class="string">"% X\n"</span>, data)</div><div class="line">    _, err = conn.Write(data)</div><div class="line">    checkError(err)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func recvSynAck(laddr, raddr string, res chan&lt;- *scanResult) error &#123;</div><div class="line">    listenAddr, err := net.ResolveIPAddr(<span class="string">"ip4"</span>, laddr) // 解析域名为ip</div><div class="line">    checkError(err)</div><div class="line">    conn, err := net.ListenIP(<span class="string">"ip4:tcp"</span>, listenAddr)</div><div class="line">    defer conn.Close()</div><div class="line">    checkError(err)</div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        buff := make([]byte, 1024)</div><div class="line">        _, addr, err := conn.ReadFrom(buff)</div><div class="line">        <span class="keyword">if</span> err != nil &#123;</div><div class="line">            <span class="built_in">continue</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> addr.String() != raddr || buff[13] != 0x12 &#123;</div><div class="line">            <span class="built_in">continue</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var port uint16</div><div class="line">        binary.Read(bytes.NewReader(buff), binary.BigEndian, &amp;port)</div><div class="line">        res &lt;- &amp;scanResult&#123;</div><div class="line">            Port:   port,</div><div class="line">            Opened: <span class="literal">true</span>,</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func ipstr2Bytes(addr string) [4]byte &#123;</div><div class="line">    s := strings.Split(addr, <span class="string">"."</span>)</div><div class="line">    b0, _ := strconv.Atoi(s[0])</div><div class="line">    b1, _ := strconv.Atoi(s[1])</div><div class="line">    b2, _ := strconv.Atoi(s[2])</div><div class="line">    b3, _ := strconv.Atoi(s[3])</div><div class="line">    <span class="built_in">return</span> [4]byte&#123;byte(b0), byte(b1), byte(b2), byte(b3)&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func random(min, max int) int &#123;</div><div class="line">    <span class="built_in">return</span> rand.Intn(max-min) + min</div><div class="line">&#125;</div><div class="line"></div><div class="line">func interfaceAddress(ifaceName string ) string &#123;</div><div class="line">    iface, err:= net.InterfaceByName(ifaceName)</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line">    addr, err := iface.Addrs()</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line">    addrStr := strings.Split(addr[0].String(), <span class="string">"/"</span>)[0]</div><div class="line">    <span class="built_in">return</span> addrStr</div><div class="line">&#125;</div><div class="line"></div><div class="line">func portSplit(portRange *string) (uint16, uint16) &#123;</div><div class="line">    ports := strings.Split(*portRange, <span class="string">"-"</span>)</div><div class="line">    minPort, err := strconv.ParseUint(ports[0], 10, 16)</div><div class="line">    <span class="keyword">if</span> err !=nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line">    maxPort, err := strconv.ParseUint(ports[1], 10, 16)</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> minPort &gt; maxPort &#123;</div><div class="line">        panic(errors.New(<span class="string">"minPort must greater than maxPort"</span>))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">return</span> uint16(minPort), uint16(maxPort)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123; &#125;</div></pre></td></tr></table></figure></p>
<p>然后利用go自身的build命令，将其打包成.so库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go build -buildmode=c-shared -o tcp_syn_scan.so tcp_syn_scan.go</div></pre></td></tr></table></figure></p>
<p>打包后会得到一个tcp_syn_scan.so和一个tcp_syn_scan.h。然后利用下面的python代码就可以调用Go代码中的Scan()函数了，创建一个tcp_syn_scan.py文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">from ctypes import *</div><div class="line">lib = cdll.LoadLibrary(u<span class="string">'./scan.so'</span>)</div><div class="line">lib.Scan(<span class="string">"14.215.177.38"</span>,<span class="string">"1-1024"</span>,<span class="string">"eth0"</span>) <span class="comment"># ip,端口范围，网卡</span></div></pre></td></tr></table></figure></p>
<p>代码运行结果：<br><img src="/upload_image/20180517/python_go_syn_scan.png" alt=""></p>
<p>说明：相当原生的go，利用python去调用go会损耗一些性能，但总体上还可以。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>本文结论就是可以利用go开发扫描模块（性能更佳），并结合python调用。<br>本文代码项目地址：<a href="https://github.com/tengzhangchao/PortScan" target="_blank" rel="external">https://github.com/tengzhangchao/PortScan</a></p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/pwc1996/article/details/73469850" target="_blank" rel="external">https://blog.csdn.net/pwc1996/article/details/73469850</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;这雨夜太漫长 失眠的我 在谁梦里 歌唱&lt;/blockquote&gt;&lt;br&gt;　　搞安全的应该都知道端口扫描在渗透测试、漏洞扫描过程中的重要性，其与URL爬虫等技术构成了漏洞扫描的第一阶段，即目标信息收集。因此能否开发出一款高效稳定的端口扫描器，往往决定了漏洞扫描器的好坏。那么说到端口扫描器，我们往往会先想到nmap、masscan等神器，它们是这个领域的标杆。但本篇并不是为了介绍这几款工具，而是谈谈如何自研一款高效稳定的端口扫描器。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
  </entry>
  
  <entry>
    <title>利用python开发app实战</title>
    <link href="http://thief.one/2018/05/08/1/"/>
    <id>http://thief.one/2018/05/08/1/</id>
    <published>2018-05-08T04:17:33.000Z</published>
    <updated>2018-05-08T05:35:25.100Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">你说，我们的未来<br>被装进棺材，染不上尘埃</blockquote>

<p>　　我很早之前就想开发一款app玩玩，无奈对java不够熟悉，之前也没有开发app的经验，因此一直耽搁了。最近想到尝试用python开发一款app，google搜索了一番后，发现确实有路可寻，目前也有了一些相对成熟的模块，于是便开始了动手实战，过程中发现这其中有很多坑，好在最终依靠google解决了，因此小记一番。<br><a id="more"></a></p>
<h3 id="说在前面的话"><a href="#说在前面的话" class="headerlink" title="说在前面的话"></a>说在前面的话</h3><p>　　python语言虽然很万能，但用它来开发app还是显得有点不对路，因此用python开发的app应当是作为编码练习、或者自娱自乐所用，加上目前这方面的模块还不是特别成熟，bug比较多，总而言之，劝君莫轻入。</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>　　利用python开发app需要用到python的一个模块–<a href="https://github.com/kivy/kivy" target="_blank" rel="external">kivy</a>，kivy是一个开源的，跨平台的Python开发框架，用于开发使用创新的应用程序。简而言之，这是一个python桌面程序开发框架（类似wxpython等模块），强大的是kivy支持linux、mac、windows、android、ios平台，这也是为什么开发app需要用到这个模块。<br>　　虽然kivy是跨平台的，但是想要在不同的平台使用python代码，还需要将python代码打包成对应平台的可执行程序，好在kivy项目下有个打包工具项目–<a href="https://github.com/kivy/buildozer" target="_blank" rel="external">buildozer</a>，这是官方推荐的打包工具，因为相对比较简单，自动化程度高，其他项目比如：<a href="https://github.com/kivy/python-for-android" target="_blank" rel="external">python-for-android</a>也能起到类似的作用，这里不展开介绍。</p>
<h3 id="搭建kivy开发环境"><a href="#搭建kivy开发环境" class="headerlink" title="搭建kivy开发环境"></a>搭建kivy开发环境</h3><p>需要在pc上安装kivy开发环境，这里演示下mac与linux下的安装过程。</p>
<h4 id="install-kivy-for-mac"><a href="#install-kivy-for-mac" class="headerlink" title="install kivy for mac"></a>install kivy for mac</h4><p>安装一些依赖包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install pkg-config sdl2 sdl2_image sdl2_ttf sdl2_mixer gstreamer</div></pre></td></tr></table></figure></p>
<p>安装cython以及kivy：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install cython==0.25</div><div class="line">pip install kivy</div></pre></td></tr></table></figure></p>
<p>如果安装kivy报错，则使用下面的方式安装kivy：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/kivy/kivy</div><div class="line">python setup.py install</div></pre></td></tr></table></figure></p>
<p>安装后测试：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$python</span></div><div class="line">Python 2.7.10 (default, Jul 15 2017, 17:16:57)</div><div class="line">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)] on darwin</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; import kivy</div><div class="line">[INFO   ] [Logger      ] Record <span class="built_in">log</span> <span class="keyword">in</span> /Users/didi/.kivy/logs/kivy_18-05-08_4.txt</div><div class="line">[INFO   ] [Kivy        ] v1.10.1.dev0, git-5f6c66e, 20180507</div><div class="line">[INFO   ] [Python      ] v2.7.10 (default, Jul 15 2017, 17:16:57)</div><div class="line">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)]</div></pre></td></tr></table></figure></p>
<p>说明：导入kivy模块没有报错则说明安装成功。</p>
<h4 id="install-kivy-for-centos7"><a href="#install-kivy-for-centos7" class="headerlink" title="install kivy for centos7"></a>install kivy for centos7</h4><p>先安装依赖：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">yum install \</div><div class="line">    make \</div><div class="line">    mercurial \</div><div class="line">    automake \</div><div class="line">    gcc \</div><div class="line">    gcc-c++ \</div><div class="line">    SDL_ttf-devel \</div><div class="line">    SDL_mixer-devel \</div><div class="line">    khrplatform-devel \</div><div class="line">    mesa-libGLES \</div><div class="line">    mesa-libGLES-devel \</div><div class="line">    gstreamer-plugins-good \</div><div class="line">    gstreamer \</div><div class="line">    gstreamer-python \</div><div class="line">    mtdev-devel \</div><div class="line">    python-devel \</div><div class="line">    python-pip \</div><div class="line">    java-devel</div></pre></td></tr></table></figure></p>
<p>安装cython以及kivy:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install Cython==0.20</div><div class="line">pip install kivy</div></pre></td></tr></table></figure></p>
<p>centos安装kivy参考：<a href="https://kivy.org/docs/installation/installation-linux.html#using-software-packages" target="_blank" rel="external">https://kivy.org/docs/installation/installation-linux.html#using-software-packages</a></p>
<p>说明：其他安装kivy方式可移步：<a href="https://kivy.org/#download（需要翻墙）" target="_blank" rel="external">https://kivy.org/#download（需要翻墙）</a></p>
<h3 id="用kivy开发第一个python-app"><a href="#用kivy开发第一个python-app" class="headerlink" title="用kivy开发第一个python app"></a>用kivy开发第一个python app</h3><p>安装完kivy就可以开发app程序了，这里演示下hello-world程序，关于kivy更复杂的用法不是本文重点，后面再成文介绍。<br>1) 创建一个main.py文件，写入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">from kivy.app import App</div><div class="line"></div><div class="line">class HelloApp(App):</div><div class="line">    pass</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    HelloApp().run()</div></pre></td></tr></table></figure></p>
<p>2)创建一个hello.kv文件，写入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Label:</div><div class="line">    text: <span class="string">'Hello, World! I am nMask'</span></div></pre></td></tr></table></figure></p>
<p>简单说明：main.py是入口函数，定义了一个HelloApp类，该类继承kivy.app；hello.kv文件是kivy程序，相当于定义界面风格等，该文件命名规则为类名小写且去除app。</p>
<h3 id="运行第一个python-app"><a href="#运行第一个python-app" class="headerlink" title="运行第一个python app"></a>运行第一个python app</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python main.py</div></pre></td></tr></table></figure>
<p>运行结果：<br><img src="/upload_image/20180508/1.png" alt=""></p>
<h3 id="安装buildozer工具"><a href="#安装buildozer工具" class="headerlink" title="安装buildozer工具"></a>安装buildozer工具</h3><p>　　通过以上的编码，我创建了自己的第一个python app程序，该程序可以直接在mac、linux、windows平台下运行，那么如何让它在安卓或者苹果手机上运行呢？我们知道在安卓上运行，需要将其打包成apk安装程序，因此就需要用到前面提到过的buildozer工具，（buildozer工具可以打包kivy程序，支持android、ios等），buildozer的安装过程比较简单：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install buildozer</div></pre></td></tr></table></figure></p>
<h3 id="使用buildozer工具将kivy程序打包成apk"><a href="#使用buildozer工具将kivy程序打包成apk" class="headerlink" title="使用buildozer工具将kivy程序打包成apk"></a>使用buildozer工具将kivy程序打包成apk</h3><p>在python项目目录下运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">buildozer init</div></pre></td></tr></table></figure></p>
<p>运行成功将会创建一个配置文件buildozer.spec，可以通过修改配置文件更改app的名称等，然后运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">buildozer android debug deploy run</div></pre></td></tr></table></figure></p>
<p>运行以上命令将会生成跨平台的安装包，可适用安卓、ios等，如果用于安卓，则是利用<a href="https://github.com/kivy/python-for-android" target="_blank" rel="external">python-for-android</a>项目。</p>
<p>在第一次运行以上命令的时候，会自动在系统中下载安卓sdk等必要文件，如下图。（过程需要翻墙，而且有很多依赖需要下载）<br><img src="/upload_image/20180508/2.png" alt=""></p>
<p>说明：这里只演示打包成apk文件，iso平台的可自行研究，参考文档：<a href="https://github.com/kivy/buildozer。" target="_blank" rel="external">https://github.com/kivy/buildozer。</a></p>
<h3 id="python-apk程序测试"><a href="#python-apk程序测试" class="headerlink" title="python apk程序测试"></a>python apk程序测试</h3><p>如果以上步骤都运行成功的话，应该会在项目目录下的bin目录下生成一个apk文件，类似如下：<br><img src="/upload_image/20180508/3.png" alt=""></p>
<p>然后将apk下载到安卓系统的手机上，安装即可，测试效果如下：<br><img src="/upload_image/20180508/4.png" alt=""><br>打开app：<br><img src="/upload_image/20180508/5.png" alt=""></p>
<h3 id="buildozer使用说明"><a href="#buildozer使用说明" class="headerlink" title="buildozer使用说明"></a>buildozer使用说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">Usage:</div><div class="line">    buildozer [--profile &lt;name&gt;] [--verbose] [target] &lt;<span class="built_in">command</span>&gt;...</div><div class="line">    buildozer --version</div><div class="line"></div><div class="line">Available targets:</div><div class="line">  android        Android target, based on python-for-android project</div><div class="line">  ios            iOS target, based on kivy-ios project</div><div class="line">  android_old    Android target, based on python-for-android project (old toolchain)</div><div class="line"></div><div class="line">Global commands (without target):</div><div class="line">  distclean          Clean the whole Buildozer environment.</div><div class="line">  <span class="built_in">help</span>               Show the Buildozer <span class="built_in">help</span>.</div><div class="line">  init               Create a initial buildozer.spec <span class="keyword">in</span> the current directory</div><div class="line">  serve              Serve the bin directory via SimpleHTTPServer</div><div class="line">  setdefault         Set the default <span class="built_in">command</span> to run when no arguments are given</div><div class="line">  version            Show the Buildozer version</div><div class="line"></div><div class="line">Target commands:</div><div class="line">  clean      Clean the target environment</div><div class="line">  update     Update the target dependencies</div><div class="line">  debug      Build the application <span class="keyword">in</span> debug mode</div><div class="line">  release    Build the application <span class="keyword">in</span> release mode</div><div class="line">  deploy     Deploy the application on the device</div><div class="line">  run        Run the application on the device</div><div class="line">  serve      Serve the bin directory via SimpleHTTPServer</div><div class="line"></div><div class="line">Target <span class="string">"android_old"</span> commands:</div><div class="line">  adb                Run adb from the Android SDK. Args must come after --, or</div><div class="line">                     use --<span class="built_in">alias</span> to make an <span class="built_in">alias</span></div><div class="line">  logcat             Show the <span class="built_in">log</span> from the device</div><div class="line"></div><div class="line">Target <span class="string">"ios"</span> commands:</div><div class="line">  list_identities    List the available identities to use <span class="keyword">for</span> signing.</div><div class="line">  xcode              Open the xcode project.</div><div class="line"></div><div class="line">Target <span class="string">"android"</span> commands:</div><div class="line">  adb                Run adb from the Android SDK. Args must come after --, or</div><div class="line">                     use --<span class="built_in">alias</span> to make an <span class="built_in">alias</span></div><div class="line">  logcat             Show the <span class="built_in">log</span> from the device</div><div class="line">  p4a                Run p4a commands. Args must come after --, or use --<span class="built_in">alias</span></div><div class="line">                     to make an <span class="built_in">alias</span></div></pre></td></tr></table></figure>
<h3 id="buildozer打包过程中的坑点"><a href="#buildozer打包过程中的坑点" class="headerlink" title="buildozer打包过程中的坑点"></a>buildozer打包过程中的坑点</h3><p>如果在打包过程中遇到报错，可以修改buildozer.spec配置文件中的log_level为2，然后重新运行，可以看具体的错误信息。</p>
<h4 id="报错：You-might-have-missed-to-install-32bits-libs"><a href="#报错：You-might-have-missed-to-install-32bits-libs" class="headerlink" title="报错：You might have missed to install 32bits libs"></a>报错：You might have missed to install 32bits libs</h4><p>这个错是我在centos7上运行时报的错，大意是系统缺少了某些32位的依赖文件。<br>解决方案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install --skip-broken glibc.i686 arts.i686 audiofile.i686 bzip2-libs.i686 cairo.i686 cyrus-sasl-lib.i686 dbus-libs.i686 directfb.i686 esound-libs.i686 fltk.i686 freeglut.i686 gtk2.i686 hal-libs.i686 imlib.i686 lcms-libs.i686 lesstif.i686 libacl.i686 libao.i686 libattr.i686 libcap.i686 libdrm.i686 libexif.i686 libgnomecanvas.i686 libICE.i686 libieee1284.i686 libsigc++20.i686 libSM.i686 libtool-ltdl.i686 libusb.i686 libwmf.i686 libwmf-lite.i686 libX11.i686 libXau.i686 libXaw.i686 libXcomposite.i686 libXdamage.i686 libXdmcp.i686 libXext.i686 libXfixes.i686 libxkbfile.i686 libxml2.i686 libXmu.i686 libXp.i686 libXpm.i686 libXScrnSaver.i686 libxslt.i686 libXt.i686 libXtst.i686 libXv.i686 libXxf86vm.i686 lzo.i686 mesa-libGL.i686 mesa-libGLU.i686 nas-libs.i686 nss_ldap.i686 cdk.i686 openldap.i686 pam.i686 popt.i686 pulseaudio-libs.i686 sane-backends-libs-gphoto2.i686 sane-backends-libs.i686 SDL.i686 svgalib.i686 unixODBC.i686 zlib.i686 compat-expat1.i686 compat-libstdc++-33.i686 openal-soft.i686 alsa-oss-libs.i686 redhat-lsb.i686 alsa-plugins-pulseaudio.i686 alsa-plugins-oss.i686 alsa-lib.i686 nspluginwrapper.i686 libXv.i686 libXScrnSaver.i686 qt.i686 qt-x11.i686 pulseaudio-libs.i686 pulseaudio-libs-glib2.i686 alsa-plugins-pulseaudio.i686 python-matplotli</div></pre></td></tr></table></figure></p>
<p>参考：<a href="https://ask.fedoraproject.org/en/question/9556/how-do-i-install-32bit-libraries-on-a-64-bit-fedora/" target="_blank" rel="external">https://ask.fedoraproject.org/en/question/9556/how-do-i-install-32bit-libraries-on-a-64-bit-fedora/</a></p>
<h4 id="报错：Error-compiling-Cython-file"><a href="#报错：Error-compiling-Cython-file" class="headerlink" title="报错：Error compiling Cython file"></a>报错：Error compiling Cython file</h4><p>错误大意为cython文件出错，可能是cython模块没有安装，或者版本有问题。<br>解决方案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install cython==0.25</div></pre></td></tr></table></figure></p>
<h4 id="报错：IOError-Errno-2-No-such-file-or-directory…"><a href="#报错：IOError-Errno-2-No-such-file-or-directory…" class="headerlink" title="报错：IOError: [Errno 2] No such file or directory….."></a>报错：IOError: [Errno 2] No such file or directory…..</h4><p>这是在打包的最后一步，将apk文件copy到项目bin目录下时报的错，是buildozer的一个bug。<br>解决方案：<br>修改/usr/local/lib/python2.7/dist-packages/buildozer/tagets/android.py文件：<br>(1)在文件开头导入:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">from distutils.version import LooseVersion</div></pre></td></tr></table></figure></p>
<p>(2) 将786行:XXX found how the apk name is really built from the title这一行以下的代码替换为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">__sdk_dir = self.android_sdk_dir</div><div class="line">build_tools_versions = os.listdir(join(__sdk_dir, <span class="string">'build-tools'</span>))</div><div class="line">build_tools_versions = sorted(build_tools_versions, key=LooseVersion)</div><div class="line">build_tools_version = build_tools_versions[-1]</div><div class="line">gradle_files = [<span class="string">"build.gradle"</span>, <span class="string">"gradle"</span>, <span class="string">"gradlew"</span>]</div><div class="line">is_gradle_build = any((exists(join(dist_dir, x)) <span class="keyword">for</span> x <span class="keyword">in</span> gradle_files)) and build_tools_version &gt;= ’25.0<span class="string">'</span></div></pre></td></tr></table></figure></p>
<h3 id="buildozer虚拟机"><a href="#buildozer虚拟机" class="headerlink" title="buildozer虚拟机"></a>buildozer虚拟机</h3><p>　　kivy官方推出了一个buildozer虚拟机镜像，已经安装好了buildozer以及一些依赖文件，为buildozer打包测试提供平台。由于之前我在mac上利用buildozer打包一直报错，后来换成centos也依然没有成功，因此便下载了此虚拟机，测试效果如下：<br><img src="/upload_image/20180508/6.png" alt=""></p>
<p>虚拟机下载地址：<a href="http://txzone.net/files/torrents/kivy-buildozer-vm-2.0.zip" target="_blank" rel="external">http://txzone.net/files/torrents/kivy-buildozer-vm-2.0.zip</a></p>
<p>说明：对于无法解决依赖问题的朋友，可以使用此虚拟机进行程序打包，开发环境还是推荐用自己的本机。</p>
<h3 id="kivy开发实例"><a href="#kivy开发实例" class="headerlink" title="kivy开发实例"></a>kivy开发实例</h3><p>　　因为本文重点在于介绍如何利用kivy+buildozer开发一款python app，因此对于kivy的开发过程，以及app功能进行了最简化。想要学习如何开发更复杂的app，可参考：<a href="https://muxuezi.github.io/posts/kivy-perface.html#" target="_blank" rel="external">https://muxuezi.github.io/posts/kivy-perface.html#</a></p>
<p><em>～！～ 折腾python使我快乐，……，想想还是滚回去学java吧 ～！～</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;你说，我们的未来&lt;br&gt;被装进棺材，染不上尘埃&lt;/blockquote&gt;

&lt;p&gt;　　我很早之前就想开发一款app玩玩，无奈对java不够熟悉，之前也没有开发app的经验，因此一直耽搁了。最近想到尝试用python开发一款app，google搜索了一番后，发现确实有路可寻，目前也有了一些相对成熟的模块，于是便开始了动手实战，过程中发现这其中有很多坑，好在最终依靠google解决了，因此小记一番。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="python开发app" scheme="http://thief.one/tags/python%E5%BC%80%E5%8F%91app/"/>
    
      <category term="android for python" scheme="http://thief.one/tags/android-for-python/"/>
    
  </entry>
  
  <entry>
    <title>burpsuite插件开发之检测越权访问漏洞</title>
    <link href="http://thief.one/2018/05/04/1/"/>
    <id>http://thief.one/2018/05/04/1/</id>
    <published>2018-05-04T07:09:07.000Z</published>
    <updated>2018-05-04T08:26:28.401Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">那个喝醉的夜晚，挡不住我们的步伐</blockquote>

<p>　　前些天公司买了些BurpSuite的License，终于可以用上正版了，先给公司来波赞！好啦，言归正传，BurpSuite作为Web安全测试的一大神器，其中一个优势就是其扩展性好。BurpSuite支持Java、Python、Ruby作为其插件的扩展语言，而在其内置的Bapp_Store中也有很多很强大的插件。作为一名程序猿，心想是时候自己动手开发一款专属插件了，抱着此心态我便开始尝试学习摸索着Coding，于是便有了此文。<br><a id="more"></a></p>
<h3 id="插件语言的选择"><a href="#插件语言的选择" class="headerlink" title="插件语言的选择"></a>插件语言的选择</h3><p>　　以上所述Burp支持Java、Python、Ruby语言的扩展，相对来说我更熟悉Python，因此就用Python开始学习写插件，对于速度要求高的朋友可以用Java写。熟悉Python的朋友肯定知道，Python分为Cython、Jython等。前者就是我们通常所说的Python，后者是Java版本的Python，简单理解就是用Jython可以调用Java的库。</p>
<h3 id="burpsuite-jython开发环境"><a href="#burpsuite-jython开发环境" class="headerlink" title="burpsuite jython开发环境"></a>burpsuite jython开发环境</h3><p>　　想要开发使用一款属于自己的BurpSuite插件，必须要部署好Jython开发环境以及Jython运行环境。前者需要在开发jython程序的平台上搭建环境，后者需要在运行burpsuite的平台搭建环境。鉴于一般开发以及使用插件都在用一个平台上，比如mac，因此本文介绍一下如何在mac上安装jython环境。</p>
<h4 id="install-jython-for-Mac"><a href="#install-jython-for-Mac" class="headerlink" title="install jython for Mac"></a>install jython for Mac</h4><p>首先我们需要在mac上安装jython的环境以便开发jython程序，就像安装python环境一样，mac上安装jython命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install jython</div></pre></td></tr></table></figure></p>
<p>安装完以后，jython安装在/usr/local/Cellar/jython/目录下，需要设置环境变量，将/usr/local/Cellar/jython/2.7.1/libexec/bin添加到环境变量，然后在shell中输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$jython</span></div><div class="line">Jython 2.7.1 (default:0df7adb1b397, Jun 30 2017, 19:02:43)</div><div class="line">[Java HotSpot(TM) 64-Bit Server VM (Oracle Corporation)] on java1.8.0_111</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>说明：其他平台（windows，linux）安装jython方式请自行google，应该比较类似。</p>
<h4 id="Load-Jython-to-Burpsuite"><a href="#Load-Jython-to-Burpsuite" class="headerlink" title="Load Jython to Burpsuite"></a>Load Jython to Burpsuite</h4><p>mac上安装完jython环境后，需要在burpsuite中加载jython环境，注意这里选择的是jar文件。<br><img src="/upload_image/20180504/1.png" alt=""></p>
<h3 id="开发jython程序"><a href="#开发jython程序" class="headerlink" title="开发jython程序"></a>开发jython程序</h3><p>本篇以开发一款检测未授权访问漏洞的插件为例介绍一下插件的开发过程，由于本文重点在于介绍如何开发一款bp插件，以及一些不可抗因素，本文介绍的插件均为简化后的版本。</p>
<h4 id="创建main-py文件"><a href="#创建main-py文件" class="headerlink" title="创建main.py文件"></a>创建main.py文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">import re</div><div class="line">from burp import IBurpExtender <span class="comment"># 定义插件的基本信息类</span></div><div class="line">from burp import IHttpListener <span class="comment"># http流量监听类</span></div><div class="line">from noauth import noauth_request</div><div class="line"></div><div class="line"><span class="comment"># 敏感接口检测，并输出敏感接口信息</span></div><div class="line">res_host = re.compile(r<span class="string">'Host: ([^,]*)'</span>)</div><div class="line">res_path = re.compile(r<span class="string">'(GET|POST) ([^ ]*) HTTP/'</span>)</div><div class="line"></div><div class="line"></div><div class="line">class BurpExtender(IBurpExtender, IHttpListener):</div><div class="line">    def registerExtenderCallbacks(self, callbacks):</div><div class="line">        self._callbacks = callbacks</div><div class="line">        self._helpers = callbacks.getHelpers() <span class="comment"># 通用函数</span></div><div class="line">        self._callbacks.setExtensionName(<span class="string">"sensitive_interface_scan"</span>)</div><div class="line"></div><div class="line">        <span class="built_in">print</span> <span class="string">"load sensitive_interface_scan plugin success!"</span></div><div class="line">        <span class="built_in">print</span> <span class="string">"============================================="</span></div><div class="line">        <span class="built_in">print</span> <span class="string">""</span></div><div class="line"></div><div class="line">        <span class="comment"># register ourselves as an HTTP listener</span></div><div class="line">        callbacks.registerHttpListener(self)</div><div class="line">    </div><div class="line">    def processHttpMessage(self, toolFlag, messageIsRequest, messageInfo):</div><div class="line">        <span class="keyword">if</span> toolFlag == 4:</div><div class="line">            <span class="keyword">if</span> not messageIsRequest:</div><div class="line">                response = messageInfo.getResponse() <span class="comment"># get response</span></div><div class="line">                analyzedResponse = self._helpers.analyzeResponse(response)</div><div class="line">                body = response[analyzedResponse.getBodyOffset():] </div><div class="line">                body_string = body.tostring() <span class="comment"># get response_body</span></div><div class="line"></div><div class="line">                request = messageInfo.getRequest()</div><div class="line">                analyzedRequest = self._helpers.analyzeResponse(request)</div><div class="line">                request_header = analyzedRequest.getHeaders() </div><div class="line">                try:</div><div class="line">                    method,path = res_path.findall(request_header[0])[0]</div><div class="line">                    host = res_host.findall(request_header[1])[0]</div><div class="line">                    url = method+<span class="string">" "</span>+host+path</div><div class="line">                except:</div><div class="line">                    url = <span class="string">""</span></div><div class="line"></div><div class="line">                <span class="keyword">if</span> method==<span class="string">"GET"</span>:</div><div class="line">                    <span class="comment"># 检测GET请求的接口</span></div><div class="line"></div><div class="line">                    <span class="built_in">print</span> <span class="string">"[Info]Check url is "</span>,url</div><div class="line"></div><div class="line">                    cur = noauth_request(host,path,body_string)</div><div class="line">                    noauth_result = cur.run()</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> noauth_result: </div><div class="line">                        <span class="built_in">print</span> <span class="string">"[Info]Found it is a noauth Interface %s"</span> % noauth_result[0][0]</div><div class="line">                        <span class="built_in">print</span> <span class="string">"[Info]remove param is "</span>,noauth_result[0][1]</div><div class="line"></div><div class="line">                    <span class="built_in">print</span> <span class="string">"======================================================================================"</span></div><div class="line">                    <span class="built_in">print</span> <span class="string">""</span></div></pre></td></tr></table></figure>
<p>说明：此文件为插件入口文件，其中导入的burp内置类IBurpExtender为基类，即所有插件都需要使用继承此类，IHttpListener类用来获取http请求以及响应内容。</p>
<h4 id="创建noauth-py文件"><a href="#创建noauth-py文件" class="headerlink" title="创建noauth.py文件"></a>创建noauth.py文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">''</span><span class="string">'未授权访问poc(GET)'</span><span class="string">''</span></div><div class="line"></div><div class="line">import requests</div><div class="line">from furl import furl</div><div class="line"></div><div class="line">auth_params=[<span class="string">"token"</span>,<span class="string">"sign"</span>,<span class="string">"ticket"</span>]</div><div class="line"></div><div class="line"><span class="comment"># headers 里面除去cookie</span></div><div class="line"></div><div class="line">headers=&#123;</div><div class="line">    </div><div class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36"</span>,</div><div class="line">    <span class="string">"Accept-Language"</span>:<span class="string">"zh-CN,zh;q=0.9,en;q=0.8,mt;q=0.7,zh-TW;q=0.6"</span>,</div><div class="line">    <span class="string">"Accept-Encoding"</span>:<span class="string">"gzip, deflate"</span>,</div><div class="line">    <span class="string">"Accept"</span>:<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"</span>,</div><div class="line">    <span class="string">"Cookie"</span>:<span class="string">"test"</span>,</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">class noauth_request(object):</div><div class="line">    <span class="comment"># 未授权访问漏洞检测</span></div><div class="line"></div><div class="line">    def __init__(self,host,path,body_string):</div><div class="line"></div><div class="line">        self.url = <span class="string">"http://"</span>+host+path</div><div class="line">        self.uri = str(furl(self.url).remove(args=True))</div><div class="line">        self.body_string = body_string</div><div class="line">        self.param = dict(furl(self.url).args)</div><div class="line">        self.remove_param = []</div><div class="line"></div><div class="line">    def run(self):</div><div class="line">        </div><div class="line">        result_list=[]</div><div class="line"></div><div class="line">        self.remove_auth() <span class="comment"># remove params,example:auth,token,sign......</span></div><div class="line"></div><div class="line">        response_body,current_url = self.get_response()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> response_body == self.body_string:</div><div class="line"></div><div class="line">            result_list.append((current_url,self.remove_param,response_body))</div><div class="line">        </div><div class="line">        <span class="built_in">return</span> result_list</div><div class="line"></div><div class="line">    def remove_auth(self):</div><div class="line">        <span class="comment"># 删除用户认证的参数</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> auth_params:</div><div class="line">            <span class="keyword">if</span> self.param.has_key(i):</div><div class="line">                self.remove_param.append(i)</div><div class="line">                self.param.pop(i)</div><div class="line"></div><div class="line">    def get_response(self):</div><div class="line">        <span class="comment"># 重放接口获取返回值</span></div><div class="line"></div><div class="line">        current_url = <span class="string">""</span></div><div class="line">        response_body = <span class="string">""</span></div><div class="line"></div><div class="line">        try:</div><div class="line">            res=requests.get(url=self.uri, params=self.param, timeout=20, headers=headers)</div><div class="line">        except Exception,e:</div><div class="line">            <span class="built_in">print</span> <span class="string">"[noauth_request:get_response]"</span>+str(e)</div><div class="line"></div><div class="line">            <span class="keyword">if</span> <span class="string">"HTTPSConnectionPool"</span> <span class="keyword">in</span> str(e):</div><div class="line">                try:</div><div class="line">                    res=requests.get(url=self.uri.replace(<span class="string">"http://"</span>,<span class="string">"https://"</span>), params=self.param, timeout=20, headers=headers)</div><div class="line">                except Exception,e:</div><div class="line">                    <span class="built_in">print</span> <span class="string">"[noauth_request:get_response]"</span>+str(e)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    current_url = res.url</div><div class="line">                    response_body = res.text</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            current_url = res.url</div><div class="line">            response_body = res.text</div><div class="line"></div><div class="line">        <span class="built_in">return</span> response_body,current_url</div></pre></td></tr></table></figure>
<p>说明：此文件为检测未授权访问类，功能比较简单，获取原始请求以及响应包，去除请求接口的cookie以及token等认证后重放，查看返回结果有没有变化。一般情况下还会检测响应包是否包含敏感信息，这里为了方便演示，简化了插件功能。</p>
<h3 id="将jython程序添加到burpsuite中"><a href="#将jython程序添加到burpsuite中" class="headerlink" title="将jython程序添加到burpsuite中"></a>将jython程序添加到burpsuite中</h3><p>选择添加一个插件：<br><img src="/upload_image/20180504/2.png" alt=""><br>注意下图中的标记部分：<br><img src="/upload_image/20180504/3.png" alt=""><br>说明：类型选择python，文件选择入口文件，burpsuite会自动获取本地的依赖文件；输出这里选择在控制台输出，因为此插件没有写ui界面。</p>
<p>加载成功后，会在控制台输出：<br><img src="/upload_image/20180504/4.png" alt=""></p>
<p>然后我们就去开启浏览器代理，关闭bp拦截，愉快的进行web系统测试吧，若插件检测到了未授权访问的接口，则会输出类似如下：</p>
<p><img src="/upload_image/20180504/6.png" alt=""></p>
<h3 id="增加UI界面代码"><a href="#增加UI界面代码" class="headerlink" title="增加UI界面代码"></a>增加UI界面代码</h3><p>在控制台输出的方式总归没有那么优雅，因此如果能像其内置的功能那样在界面上输出就更好了。以下是一段简单的ui界面开发代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="comment"># 导入 burp 接口</span></div><div class="line">from burp import IBurpExtender, ITab</div><div class="line"></div><div class="line"><span class="comment"># 导入 Java 库</span></div><div class="line">from javax.swing import JPanel</div><div class="line">from javax.swing import JButton</div><div class="line"></div><div class="line">class BurpExtender(IBurpExtender, ITab):</div><div class="line">    <span class="string">''</span><span class="string">' 继承burp java父类 '</span><span class="string">''</span></div><div class="line"></div><div class="line">    def registerExtenderCallbacks(self, callbacks):</div><div class="line">        <span class="comment"># 注册插件信息</span></div><div class="line"></div><div class="line">        self._cb = callbacks <span class="comment"># 回调</span></div><div class="line">        self._hp = callbacks.getHelpers() <span class="comment"># 帮助信息</span></div><div class="line"></div><div class="line">        self._cb.setExtensionName(<span class="string">'python_test_plugin'</span>) <span class="comment"># 插件名称</span></div><div class="line"></div><div class="line">        <span class="built_in">print</span> <span class="string">'load python_test_plugin success!'</span></div><div class="line"></div><div class="line">        self.mainPanel = JPanel() <span class="comment"># 面板</span></div><div class="line">        </div><div class="line">        self.testBtn = JButton(u<span class="string">'一个按钮'</span>, actionPerformed=self.testBtn_onClick) <span class="comment"># 初始化一个 JButton 并绑定单击事件</span></div><div class="line"></div><div class="line">        self.mainPanel.add(self.testBtn) <span class="comment"># 面板中添加这个按钮</span></div><div class="line"></div><div class="line">        self._cb.customizeUiComponent(self.mainPanel) </div><div class="line">        self._cb.addSuiteTab(self)</div><div class="line"></div><div class="line">    def testBtn_onClick(self, event):</div><div class="line">        <span class="comment"># 点击按钮事件</span></div><div class="line"></div><div class="line">        <span class="built_in">print</span> <span class="string">"click button"</span></div><div class="line"></div><div class="line">    def getTabCaption(self):</div><div class="line">        <span class="comment"># 获取tab按钮名称</span></div><div class="line"></div><div class="line">        <span class="built_in">return</span> <span class="string">'python_test_plugin'</span></div><div class="line"></div><div class="line">    def getUiComponent(self):</div><div class="line">        <span class="comment"># 获取面板内容·</span></div><div class="line"></div><div class="line">        <span class="built_in">return</span> self.mainPanel</div></pre></td></tr></table></figure>
<p>说明：这只是一个ui界面开发的demo，效果如下：</p>
<p><img src="/upload_image/20180504/5.png" alt=""></p>
<h3 id="burp插件开发文档"><a href="#burp插件开发文档" class="headerlink" title="burp插件开发文档"></a>burp插件开发文档</h3><p>这里介绍几个常用的burp类：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">1. 插件入口和帮助接口类：IBurpExtender、IBurpExtenderCallbacks、IExtensionHelpers、IExtensionStateListener</div><div class="line">IBurpExtender接口类是Burp插件的入口，所有Burp的插件均需要实现此接口，并且类命名为BurpExtender。 IBurpExtenderCallbacks接口类是IBurpExtender接口的实现类与Burp其他各个组件（Scanner、Intruder、Spider......）、各个通信对象（HttpRequestResponse、HttpService、SessionHandlingAction）之间的纽带。 IExtensionHelpers、IExtensionStateListener这两个接口类是插件的帮助和管理操作的接口定义。</div><div class="line"></div><div class="line">2. UI相关接口类：IContextMenuFactory、IContextMenuInvocation、ITab、ITextEditor、IMessageEditor、IMenuItemHandler</div><div class="line">这类接口类主要是定义Burp插件的UI显示和动作的处理事件，主要是软件交互中使用。</div><div class="line"></div><div class="line">3. Burp工具组件接口类：IInterceptedProxyMessage、IIntruderAttack、IIntruderPayloadGenerator、IIntruderPayloadGeneratorFactory、IIntruderPayloadProcessor、IProxyListener、IScanIssue、IScannerCheck、IScannerInsertionPoint、IScannerInsertionPointProvider、IScannerListener、IScanQueueItem、IScopeChangeListener</div><div class="line">这些接口类的功能非常好理解，Burp在接口定义的命名中使用了的见名知意的规范，看到接口类的名称，基本就能猜测出来这个接口是适用于哪个工具组件。</div><div class="line"></div><div class="line">4. HTTP消息处理接口类：ICookie、IHttpListener、IHttpRequestResponse、IHttpRequestResponsePersisted、IHttpRequestResponseWithMarkers、IHttpService、IRequestInfo、IParameter、IResponseInfo</div><div class="line"></div><div class="line">这些接口的定义主要是围绕HTTP消息通信过程中涉及的Cookie、Request、Response、Parameter几大消息对象，通过对通信消息头、消息体的数据处理，来达到控制HTTP消息传递的目的。</div></pre></td></tr></table></figure></p>
<p>关于更多关于burp开发相关的文档，可以参考下：<a href="https://portswigger.net/burp/extender/" target="_blank" rel="external">https://portswigger.net/burp/extender/</a></p>
<h3 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h3><p><a href="http://xdxd.love/2015/04/20/burpsuite%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B9%8Bpython%E7%AF%87/" target="_blank" rel="external">http://xdxd.love/2015/04/20/burpsuite%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B9%8Bpython%E7%AF%87/</a></p>
<p>写不动了<del>~</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;那个喝醉的夜晚，挡不住我们的步伐&lt;/blockquote&gt;

&lt;p&gt;　　前些天公司买了些BurpSuite的License，终于可以用上正版了，先给公司来波赞！好啦，言归正传，BurpSuite作为Web安全测试的一大神器，其中一个优势就是其扩展性好。BurpSuite支持Java、Python、Ruby作为其插件的扩展语言，而在其内置的Bapp_Store中也有很多很强大的插件。作为一名程序猿，心想是时候自己动手开发一款专属插件了，抱着此心态我便开始尝试学习摸索着Coding，于是便有了此文。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="burpsuite" scheme="http://thief.one/tags/burpsuite/"/>
    
  </entry>
  
  <entry>
    <title>基于余弦相似性的404页面识别</title>
    <link href="http://thief.one/2018/04/12/1/"/>
    <id>http://thief.one/2018/04/12/1/</id>
    <published>2018-04-12T08:00:39.000Z</published>
    <updated>2018-04-13T01:44:08.096Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">也许老街的腔调，是属于我的忧伤</blockquote>

<p>　　写过爬虫或者漏洞扫描器的朋友肯定遇到过一个问题，就是如何判断一个url对应的页面是个404页面，因为这对之后的逻辑判断尤为重要。然而由于存在一些特殊情况，导致404页面判断没有想象中的那么简单，这往往跟服务器配置有关。本篇作为《<a href="https://thief.one/2018/03/16/1/">漫谈漏洞扫描器的设计与开发</a>》的一个分支文章，重点谈谈如何判断一个页面是否为404页面。<br><a id="more"></a></p>
<h3 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h3><p>　　一般情况下，判断一个网页是否为404页面，主要看其返回的响应码。若响应码为404，则说明这是一个不存在的页面，若不是则说明是一个存在的页面。然而出于对用户的友好，有些网站往往会优化404页面，大致有以下几种优化方式。</p>
<h4 id="跳转到指定页面"><a href="#跳转到指定页面" class="headerlink" title="跳转到指定页面"></a>跳转到指定页面</h4><p>　　第一种优化方式是：一旦用户访问了一个不存在的页面，服务器会将请求跳转到一个指定的url，往往是网站首页，或者是网站登陆页面。这种情况下，请求一个不存在的页面的响应码会从302变为200（服务端跳转），或者响应码直接为200（客户端跳转，用户可感）；网页内容为网站首页或者网站登陆页面等指定页面的内容。<br>例子：<a href="http://didichuxing.com/nmask" target="_blank" rel="external">http://didichuxing.com/nmask</a><br><img src="/upload_image/20180412/6.png" alt=""></p>
<h4 id="跳转到优化后的404页面"><a href="#跳转到优化后的404页面" class="headerlink" title="跳转到优化后的404页面"></a>跳转到优化后的404页面</h4><p>　　第二种优化方式是：一旦用户访问了一个不存在的页面，服务器会将请求跳转到404页面，与第一种方式不同的是跳转后的这个页面确实是404页面，但是是经过特殊处理优化的。这种情况下，请求一个不存在的页面的响应码会从302变为200（服务端跳转），或者响应码为200（客户端跳转），网页内容为一个经过优化的404页面内容。<br>例子：<a href="https://www.jd.com/nmask" target="_blank" rel="external">https://www.jd.com/nmask</a><br><img src="/upload_image/20180412/5.png" alt=""></p>
<h4 id="直接显示404页面"><a href="#直接显示404页面" class="headerlink" title="直接显示404页面"></a>直接显示404页面</h4><p>　　第三种方式是：一旦用户访问了一个不存在的页面，页面直接显示为404页面（服务器默认）。这种情况下，请求一个不存在的页面的响应码可能是404（默认情况），也可能是200，页面内容为默认404或者处理后的404页面。<br>例子：<a href="http://www.alibaba.com/nmask" target="_blank" rel="external">http://www.alibaba.com/nmask</a><br><img src="/upload_image/20180412/4.png" alt=""></p>
<h4 id="总结404页面的特征"><a href="#总结404页面的特征" class="headerlink" title="总结404页面的特征"></a>总结404页面的特征</h4><p>　　综上所诉，一个404页面的响应码可能为：404，302，200（当然不排除有其他情况）；一个404页面的页面内容可能是：网站首页内容（指定页面）、优化后的404页面内容、服务器默认的404页面内容。</p>
<h3 id="如何科学的判断一个404页面？"><a href="#如何科学的判断一个404页面？" class="headerlink" title="如何科学的判断一个404页面？"></a>如何科学的判断一个404页面？</h3><p>综上所诉，我们大致可以得到这样的判断逻辑：(伪代码如下)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> 响应码 == 404:</div><div class="line">    <span class="built_in">return</span> this_is_404_page</div><div class="line"><span class="keyword">elif</span> 目标网页内容 与 网站404页面内容 相似：</div><div class="line">    <span class="built_in">return</span> this_is_404_page</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="built_in">return</span> this_is_not_404_page</div></pre></td></tr></table></figure></p>
<p>　　但要通过以上的逻辑判断，需要解决两个问题。问题一：如何提前收集网站的404页面内容；问题二：如何判断目标网页内容与网站404页面内容是否相似。<br>　　先解决下问题一，这个比较好解决，我们可以构造一些不存在的路径（比如:/this_is_a_404_nmask_page），请求获取页面内容。<br>　　第二个问题比较麻烦，首先我们需要注意这里指的是网页相似而非相同。为何这里不直接判断是否相同呢？因为一些404页面内容包含随机因子，比如当前时间，或者页面包含一些推广的信息，导致每个404页面内容都有差异。因此如何判断目标网页内容与网站404页面内容是否相似，而非相同，才是识别一个网页是否为404页面的科学方法。<br>　　那么该如何判断2个网页是否相似呢？这里借鉴了判断文章相似性的算法—余弦相似性算法。那么什么叫余弦相似性算法，它又怎么用于判断网页相似性呢？请往下看。</p>
<h4 id="余弦相似性算法介绍"><a href="#余弦相似性算法介绍" class="headerlink" title="余弦相似性算法介绍"></a>余弦相似性算法介绍</h4><p>假设我们有需求：判断两篇文章是否相似？<br>实现方案：<br>（1）使用TF-IDF算法，找出两篇文章的关键词；<br>（2）每篇文章各取出若干个关键词（比如20个），合并成一个集合，计算每篇文章对于这个集合中的词的词频（为了避免文章长度的差异，可以使用相对词频）；<br>（3）生成两篇文章各自的词频向量；<br>（4）计算两个向量的余弦相似度，值越大就表示越相似。</p>
<p>具体例子：<br>句子A：我/喜欢/看/电视，不/喜欢/看/电影。<br>句子B：我/不/喜欢/看/电视，也/不/喜欢/看/电影。</p>
<p>得出所有分词为：我，喜欢，看，电视，电影，不，也。</p>
<p>计算词频：（出现的次数）<br>句子A：我 1，喜欢 2，看 2，电视 1，电影 1，不 1，也 0。<br>句子B：我 1，喜欢 2，看 2，电视 1，电影 1，不 2，也 1。</p>
<p>计算词频向量：<br>句子A：[1, 2, 2, 1, 1, 1, 0]<br>句子B：[1, 2, 2, 1, 1, 2, 1]<br><img src="/upload_image/20180412/1.png" alt=""></p>
<p>我们可以把它们想象成空间中的两条线段,我们可以通过夹角的大小，来判断向量的相似程度。夹角越小，就代表越相似。</p>
<p>计算公式：<br><img src="/upload_image/20180412/2.png" alt=""></p>
<p>计算结果：<br><img src="/upload_image/20180412/3.png" alt=""></p>
<p>说明：余弦值越接近1，就表明夹角越接近0度，也就是两个向量越相似，这就叫”余弦相似性”。</p>
<h4 id="基于余弦相似性算法的网页相似性判断方法"><a href="#基于余弦相似性算法的网页相似性判断方法" class="headerlink" title="基于余弦相似性算法的网页相似性判断方法"></a>基于余弦相似性算法的网页相似性判断方法</h4><p>下面列举了余弦相似性算法与汉明距离算法，测试发现对于判断网页相似性余弦相似性算法准确率更高一些。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">一）网页标签相似性（筛选出网页所有标签，只选标签名称）</div><div class="line"></div><div class="line">    先计算出两个网页所有标签的向量：</div><div class="line">    A：(a,b,c,d,e,f,g,a,b,c)</div><div class="line">    B：(a,c,b,d,e,f,g,a,c)</div><div class="line"></div><div class="line">    1）计算A与B的汉明距离：</div><div class="line">    a,b,c,d,e,f,g,a,b,c</div><div class="line">    a,c,b,d,e,f,g,a,c</div><div class="line">    ——————————————————</div><div class="line">    0 1 1 0 0 0 0 0 1 1</div><div class="line"></div><div class="line">    A与B的汉明距离为 1+1+1+1=4，相似度为：(10-4)/10=60%</div><div class="line"></div><div class="line">    2）计算A与B的余弦相似性：</div><div class="line">    A: a 2 b 2 c 2 d 1 e 1 f 1 g 1</div><div class="line">    B: a 2 b 1 c 2 d 1 e 1 f 1 g 1</div><div class="line"></div><div class="line">    继续简化：</div><div class="line">    A: [2,2,2,1,1,1,1]</div><div class="line">    B: [2,1,2,1,1,1,1]</div><div class="line"></div><div class="line">    余弦相似性：</div><div class="line"></div><div class="line">                            2*2+2*1+2*2+1*1+1*1+1*1+1*1</div><div class="line">    ------------------------------------------------------------------------------</div><div class="line">    ((2^2+2^2+2^2+1^2+1^2+1^2+1^2) ** 0.5) * ((2^2+1^2+2^2+1^2+1^2+1^2+1^2) ** 0.5)</div><div class="line"></div><div class="line">           14</div><div class="line">    = -------------</div><div class="line">       4 * (13**0.5)</div><div class="line"></div><div class="line">    = 0.97</div><div class="line"></div><div class="line">    即相似性为97%</div><div class="line"></div><div class="line"></div><div class="line">二）网页文本相似性计算</div><div class="line">与标签判断算法一样，只是需要筛选出网页文本，并进行分词</div></pre></td></tr></table></figure></p>
<p>说明：汉明距离更注重顺序相似，比如一个网页的标签排序顺序是否相似；而余弦相似性更关注整体标签的个数关系，对顺序不敏感。汉明距离可以看成是点与点间的距离，余弦相似性可以看成是线与线之间的夹角或者说距离。</p>
<h3 id="更加严谨的科学判断"><a href="#更加严谨的科学判断" class="headerlink" title="更加严谨的科学判断"></a>更加严谨的科学判断</h3><p>　　通过余弦相似性算法，我们大致可以计算出两个网页的相似度。那么看似以上逻辑判断应该就可以判断出404页面了。然而实际情况还要更复杂些，比如如何设置相似度的阀值，还需要大量的打标数据去计算。再比如如何降低一些特殊url带来的误报。这里特殊的url包含网站首页、登陆页面等，因为当访问一些404页面时，可能会跳转到此页面上，导致网页相似性计算结果很接近。这些问题的解决方案这里就不介绍了。</p>
<h3 id="判断404页面的测试接口"><a href="#判断404页面的测试接口" class="headerlink" title="判断404页面的测试接口"></a>判断404页面的测试接口</h3><p>基于以上理论，我自己部署了一个判断404页面的api接口，可供大家测试一下准确性。<br>api接口地址：<a href="http://api.nmask.cn/not_exist_page_calculation/?target_url=http://www.baidu.com/nmask" target="_blank" rel="external">http://api.nmask.cn/not_exist_page_calculation/?target_url=http://www.baidu.com/nmask</a><br>若遇到判断错误的url，可在下方留言，或者邮件：tzc@maskghost.com。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;也许老街的腔调，是属于我的忧伤&lt;/blockquote&gt;

&lt;p&gt;　　写过爬虫或者漏洞扫描器的朋友肯定遇到过一个问题，就是如何判断一个url对应的页面是个404页面，因为这对之后的逻辑判断尤为重要。然而由于存在一些特殊情况，导致404页面判断没有想象中的那么简单，这往往跟服务器配置有关。本篇作为《&lt;a href=&quot;https://thief.one/2018/03/16/1/&quot;&gt;漫谈漏洞扫描器的设计与开发&lt;/a&gt;》的一个分支文章，重点谈谈如何判断一个页面是否为404页面。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="余弦相似性" scheme="http://thief.one/tags/%E4%BD%99%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Pyecharts 可视化初探</title>
    <link href="http://thief.one/2018/04/09/1/"/>
    <id>http://thief.one/2018/04/09/1/</id>
    <published>2018-04-09T10:54:44.000Z</published>
    <updated>2018-04-09T11:31:39.161Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">纸短情长啊，诉不完当时年少，我的故事还是关于你呀</blockquote>

<p>　　最近在开发web应用过程中，需要用到可视化展示功能，因此找了找Python相关的可视化模块。这里简单记录下pyecharts模块的用法。推荐它主要是因为其功能强大，可视化功能选择比较多，且使用比较简单。<br><a id="more"></a></p>
<h3 id="pyecharts介绍"><a href="#pyecharts介绍" class="headerlink" title="pyecharts介绍"></a>pyecharts介绍</h3><p>　　首先需要了解下pyecharts模块的运行机制，pyecharts是echarts的python-api，而echarts是百度开源的可视化框架。echarts是用来操作js文件的，因此pyecharts的出现其实是为了能够让python语言更好的对接echarts。简单来说，pyecharts会帮我们生成js文件。</p>
<h3 id="安装pyecharts"><a href="#安装pyecharts" class="headerlink" title="安装pyecharts"></a>安装pyecharts</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pyecharts</div></pre></td></tr></table></figure>
<p>或者Github下载源码安装：<a href="https://github.com/pyecharts/pyecharts" target="_blank" rel="external">https://github.com/pyecharts/pyecharts</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/pyecharts/pyecharts.git</div><div class="line">$ <span class="built_in">cd</span> pyecharts</div><div class="line">$ pip install -r requirements.txt</div><div class="line">$ python setup.py install</div></pre></td></tr></table></figure></p>
<h3 id="简单使用pyecharts"><a href="#简单使用pyecharts" class="headerlink" title="简单使用pyecharts"></a>简单使用pyecharts</h3><p>创建一个test.py文件，写入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from pyecharts import Bar <span class="comment"># 柱状图</span></div><div class="line"></div><div class="line">attr = [<span class="string">"Jan"</span>, <span class="string">"Feb"</span>, <span class="string">"Mar"</span>, <span class="string">"Apr"</span>, <span class="string">"May"</span>, <span class="string">"Jun"</span>, <span class="string">"Jul"</span>, <span class="string">"Aug"</span>, <span class="string">"Sep"</span>, <span class="string">"Oct"</span>, <span class="string">"Nov"</span>, <span class="string">"Dec"</span>]</div><div class="line">v1 = [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3]</div><div class="line">v2 = [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3]</div><div class="line">bar = Bar(<span class="string">"Bar chart"</span>, <span class="string">"precipitation and evaporation one year"</span>)</div><div class="line">bar.add(<span class="string">"precipitation"</span>, attr, v1, mark_line=[<span class="string">"average"</span>], mark_point=[<span class="string">"max"</span>, <span class="string">"min"</span>])</div><div class="line">bar.add(<span class="string">"evaporation"</span>, attr, v2, mark_line=[<span class="string">"average"</span>], mark_point=[<span class="string">"max"</span>, <span class="string">"min"</span>])</div><div class="line">bar.render() <span class="comment"># 生成一个html文件</span></div></pre></td></tr></table></figure></p>
<p>运行test.py，会在当前目录下生成一个render.html文件，即包含柱状图的网页。查看此html文件，会发现其生成了很多js代码。</p>
<p>说明：除了柱状图外，pyecharts还支持其他可视化展示，具体可参考官方文档：<a href="http://pyecharts.org/#/zh-cn/charts" target="_blank" rel="external">http://pyecharts.org/#/zh-cn/charts</a></p>
<h3 id="pyecharts-Django"><a href="#pyecharts-Django" class="headerlink" title="pyecharts+Django"></a>pyecharts+Django</h3><p>　　前面介绍的是利用pyecharts生成一个存在可视化图表的html页面，那么怎么在Django或者Flask等Web框架中使用呢？即如何在视图层生成图表代码，传递到模版层渲染展示？这里只介绍如何在Django中使用pyecharts，其他web框架同理，可自行研究。</p>
<h4 id="view视图层"><a href="#view视图层" class="headerlink" title="view视图层"></a>view视图层</h4><p>在Django项目的view.py文件内写入:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">from django.http import HttpResponse</div><div class="line">from pyecharts import Pie</div><div class="line"></div><div class="line">REMOTE_HOST = <span class="string">"https://pyecharts.github.io/assets/js"</span></div><div class="line"></div><div class="line">def Pie_():</div><div class="line">    <span class="comment"># 生成饼图</span></div><div class="line">    attr = [<span class="string">"衬衫"</span>, <span class="string">"羊毛衫"</span>, <span class="string">"雪纺衫"</span>, <span class="string">"裤子"</span>, <span class="string">"高跟鞋"</span>, <span class="string">"袜子"</span>]</div><div class="line">    v1 = [11, 12, 13, 10, 10, 10]</div><div class="line">    pie = Pie(<span class="string">"饼图示例"</span>)</div><div class="line">    pie.add(<span class="string">""</span>, attr, v1, is_label_show=True)</div><div class="line">    </div><div class="line">    <span class="built_in">return</span> pie</div><div class="line"></div><div class="line">def index(request):</div><div class="line">    <span class="comment"># 可视化展示页面</span></div><div class="line">    pie = Pie_()</div><div class="line">    myechart=pie.render_embed() <span class="comment"># 饼图</span></div><div class="line">    host=REMOTE_HOST <span class="comment"># js文件源地址</span></div><div class="line">    script_list=pie.get_js_dependencies() <span class="comment"># 获取依赖的js文件名称（只获取当前视图需要的js）</span></div><div class="line"></div><div class="line">    <span class="built_in">return</span> render(request,<span class="string">"index.html"</span>,&#123;<span class="string">"myechart"</span>:myechart,<span class="string">"host"</span>:host,<span class="string">"script_list"</span>:script_list&#125;)</div></pre></td></tr></table></figure></p>
<p>说明：REMOTE_HOST可更换成本地地址，即先前往<a href="https://github.com/pyecharts/assets" target="_blank" rel="external">https://github.com/pyecharts/assets</a> clone项目，再将项目中的js目录copy到Django项目的static/js目录下，然后更改代码中的REMOTE_HOST为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">REMOTE_HOST = <span class="string">"https://pyecharts.github.io/assets/js"</span></div><div class="line">改为：</div><div class="line">REMOTE_HOST = <span class="string">"../../static/js/js"</span></div></pre></td></tr></table></figure></p>
<h4 id="Django路由"><a href="#Django路由" class="headerlink" title="Django路由"></a>Django路由</h4><p>在Django项目的urls.py文件内容写入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url(r<span class="string">'^$'</span>,views.index, name=<span class="string">"index"</span>),</div></pre></td></tr></table></figure></p>
<h4 id="模版层"><a href="#模版层" class="headerlink" title="模版层"></a>模版层</h4><p>在Django项目的templates目录下创建index.html文件，写入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">    &lt;title&gt;Proudly presented by PycCharts&lt;/title&gt;</div><div class="line">    &#123;% <span class="keyword">for</span> jsfile_name <span class="keyword">in</span> script_list %&#125;</div><div class="line">        &lt;script src=<span class="string">"&#123;&#123; host &#125;&#125;/&#123;&#123; jsfile_name &#125;&#125;.js"</span>&gt;&lt;/script&gt; <span class="comment"># 加载js文件</span></div><div class="line">    &#123;% endfor %&#125;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">  &#123;&#123; myechart|safe &#125;&#125; <span class="comment"># 显示可视化图表，注意要加safe，表示解析视图层传入的html内容</span></div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h4 id="运行django"><a href="#运行django" class="headerlink" title="运行django"></a>运行django</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py runserver</div></pre></td></tr></table></figure>
<p>打开浏览器：<a href="http://127.0.0.1:8000" target="_blank" rel="external">http://127.0.0.1:8000</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>官方文档：<a href="http://pyecharts.org/#/zh-cn/" target="_blank" rel="external">http://pyecharts.org/#/zh-cn/</a><br>Github项目地址：<a href="https://github.com/pyecharts/pyecharts" target="_blank" rel="external">https://github.com/pyecharts/pyecharts</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;纸短情长啊，诉不完当时年少，我的故事还是关于你呀&lt;/blockquote&gt;

&lt;p&gt;　　最近在开发web应用过程中，需要用到可视化展示功能，因此找了找Python相关的可视化模块。这里简单记录下pyecharts模块的用法。推荐它主要是因为其功能强大，可视化功能选择比较多，且使用比较简单。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="Pyecharts" scheme="http://thief.one/tags/Pyecharts/"/>
    
  </entry>
  
  <entry>
    <title>记一次爬虫批量爬取exp</title>
    <link href="http://thief.one/2018/03/27/1/"/>
    <id>http://thief.one/2018/03/27/1/</id>
    <published>2018-03-27T02:15:36.000Z</published>
    <updated>2018-03-27T03:20:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">磨刀不误砍柴工</blockquote>

<p>　　最近需要收集一些exp，因此逛了逛<a href="https://www.exploit-db.com/" target="_blank" rel="external">exploit-db</a>、<a href="http://expku.com/" target="_blank" rel="external">国内exp搜索大全</a>、<a href="https://www.seebug.org/" target="_blank" rel="external">seebug</a>等几个exp收集的网站。由于需要批量获取漏洞信息以及对应的exp内容，因此心想有必要写一款爬虫去自动化收集漏洞exp。<br><a id="more"></a></p>
<h3 id="选个target"><a href="#选个target" class="headerlink" title="选个target"></a>选个target</h3><p>　　前面三个网站都有丰富的exp资源，但是我并不打算从它们身上去爬取，这里介绍另外一个更牛逼的网站：<a href="https://cn.0day.today/" target="_blank" rel="external">0day.today</a>（需要翻墙）。选取它的原因是exp更新的更快更丰富，且反爬虫策略做的比较一般。</p>
<h3 id="分析URL结构"><a href="#分析URL结构" class="headerlink" title="分析URL结构"></a>分析URL结构</h3><p>选好目标后，先尝试分析下网页结构，比如需要判断是动态还是静态页面等特征。此网站算是动态的，其漏洞列表URL结构如下：</p>
<ul>
<li>cn.0day.today/webapps/1（web漏洞列表第一页）</li>
<li>cn.0day.today/webapps/2（web漏洞列表第二页）</li>
<li>cn.0day.today/remote/1（远程利用漏洞列表第一页）</li>
<li>cn.0day.today/local/1（本地利用漏洞列表第一页）</li>
<li>……</li>
</ul>
<p>每个漏洞列表页面内有30个漏洞列表，每个漏洞列表对应一个漏洞URL，结构如下：</p>
<ul>
<li>cn.0day.today/exploit/30029</li>
<li>cn.0day.today/exploit/30030</li>
</ul>
<p>说明：此URL内容便是某个漏洞的exp，粗略算一下，web漏洞有600页，每页30个，总数是18000个漏洞exp。</p>
<h3 id="分析网页内容"><a href="#分析网页内容" class="headerlink" title="分析网页内容"></a>分析网页内容</h3><p>　　分析完URL结构，大致可以得出爬虫思路：遍历漏洞列表页数获取全部漏洞URL–&gt;爬取漏洞URL获取漏洞exp。<br>　　那么如何通过爬取漏洞列表页面获取漏洞对应的URL，以及如何爬取漏洞信息页面获取exp？，这里需要分析一下页面结构，可以尝试写正则或者摘取网页元素内容的方式获取目标内容。</p>
<h4 id="获取漏洞URL"><a href="#获取漏洞URL" class="headerlink" title="获取漏洞URL"></a>获取漏洞URL</h4><p>页面结构：<br><img src="/upload_image/20180327/3.png" alt=""><br>对于此页面我没有使用正则，而是使用了BeautifulSoup模块来获取网页元素内容，代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">soup=BeautifulSoup(content,<span class="string">"html.parser"</span>)</div><div class="line">n=soup.find_all(<span class="string">"div"</span>,&#123;<span class="string">"class"</span>:<span class="string">"ExploitTableContent"</span>&#125;)</div><div class="line"><span class="keyword">if</span> n:</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> n:</div><div class="line">        m=i.find_all(<span class="string">"div"</span>,&#123;<span class="string">"class"</span>:<span class="string">"td allow_tip "</span>&#125;)</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> m:</div><div class="line">            y=j.find_all(<span class="string">"a"</span>)</div><div class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> y:</div><div class="line">                vul_name=x.text <span class="comment"># 漏洞名称</span></div><div class="line">                vul_url=x.attrs.get(<span class="string">"href"</span>) <span class="comment"># 漏洞url</span></div></pre></td></tr></table></figure></p>
<h4 id="获取漏洞EXP"><a href="#获取漏洞EXP" class="headerlink" title="获取漏洞EXP"></a>获取漏洞EXP</h4><p>页面结构：<br><img src="/upload_image/20180327/4.png" alt=""><br>对于此页面我也没有使用正则，而是使用了BeautifulSoup模块来获取网页元素内容，代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">soup=BeautifulSoup(content,<span class="string">"html.parser"</span>)</div><div class="line">m=soup.find_all(<span class="string">"div"</span>,&#123;<span class="string">"class"</span>:<span class="string">"container"</span>&#125;)</div><div class="line">n=m[0].find_all(<span class="string">"div"</span>)</div><div class="line">exp_info=<span class="string">""</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> n:</div><div class="line">    exp_info+=i.text+<span class="string">"\n"</span></div></pre></td></tr></table></figure></p>
<h3 id="反爬虫策略"><a href="#反爬虫策略" class="headerlink" title="反爬虫策略"></a>反爬虫策略</h3><p>我在连续访问n次网站后，发现此站有一些反爬虫的策略。而我必须研究解决它，才能进一步获取exp内容。</p>
<h4 id="cdn防ddos策略"><a href="#cdn防ddos策略" class="headerlink" title="cdn防ddos策略"></a>cdn防ddos策略</h4><p>　　首先我发现此网站用了cloudflare加速器，且在用户持续访问一段时间后（应该是基于ip+headers认证），会出现防ddos页面。如果此时用普通的爬虫去访问，获取到的页面源码是防ddos的源码，即：<br><img src="/upload_image/20180327/1.png" alt=""></p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>　　当我们打开浏览器访问漏洞页面时，会在防ddos页面上等待几秒后，自动跳转到目标漏洞页面。基于这一特性，我决定使用无头浏览器去访问，设置等待时间即可。这里我选用phantomjs做此试验，其他headless同理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">d=webdriver.PhantomJS()</div><div class="line">d.get(vul_api)</div><div class="line">time.sleep(5) <span class="comment"># 等待5s</span></div><div class="line"><span class="built_in">print</span> d.page_source <span class="comment"># 输出源码</span></div></pre></td></tr></table></figure></p>
<p>在访问网页5s后，输出的网页源码，便是目标漏洞exp页面的源码。</p>
<h4 id="用户点击确认"><a href="#用户点击确认" class="headerlink" title="用户点击确认"></a>用户点击确认</h4><p>　　在绕过了防ddos策略后，发现网站自身也有一个反爬虫的策略，即需要用户点击确认按钮后，才能继续访问原目标。如果此时用普通的爬虫去访问，获取到的页面源码是用户确认网页的源码，即：<br><img src="/upload_image/20180327/2.png" alt=""></p>
<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>　　此网页需要用户点击“确定”按钮后，会跳转到目标页面，因此可以使用无头浏览器访问，操作页面元素，即模拟点击确定按钮。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">d=webdriver.PhantomJS()</div><div class="line">d.get(vul_api)</div><div class="line">time.sleep(5) <span class="comment"># 等待5s（绕过防ddos策略）</span></div><div class="line"></div><div class="line">d.find_element_by_name(<span class="string">"agree"</span>).click() <span class="comment"># 点击确定按钮（绕过用户点击确认策略）</span></div><div class="line">time.sleep(5) <span class="comment"># 等待5s</span></div><div class="line">content=d.page_source <span class="comment"># 输出网页源码</span></div><div class="line">d.quit()</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　想要爬取一个网站的内容，必须要分析此网站的URL结构、网页内容、反爬虫策略等。针对此网站而言，复杂点在于如何绕过反爬虫策略，这里用到了无头浏览器去模拟人访问。总之编写爬虫是需要耐心跟细心的，如何一步步去分析整个访问流程，有时候比如何去编程更重要。也许，这就是所谓的：“磨刀不误砍柴工”吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;磨刀不误砍柴工&lt;/blockquote&gt;

&lt;p&gt;　　最近需要收集一些exp，因此逛了逛&lt;a href=&quot;https://www.exploit-db.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;exploit-db&lt;/a&gt;、&lt;a href=&quot;http://expku.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;国内exp搜索大全&lt;/a&gt;、&lt;a href=&quot;https://www.seebug.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;seebug&lt;/a&gt;等几个exp收集的网站。由于需要批量获取漏洞信息以及对应的exp内容，因此心想有必要写一款爬虫去自动化收集漏洞exp。&lt;br&gt;
    
    </summary>
    
      <category term="爬虫技术" scheme="http://thief.one/categories/%E7%88%AC%E8%99%AB%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="exp" scheme="http://thief.one/tags/exp/"/>
    
      <category term="phantomjs爬虫" scheme="http://thief.one/tags/phantomjs%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>漫谈漏洞扫描器的设计与开发</title>
    <link href="http://thief.one/2018/03/16/1/"/>
    <id>http://thief.one/2018/03/16/1/</id>
    <published>2018-03-16T05:46:08.000Z</published>
    <updated>2018-04-12T08:09:39.630Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">世界の果てまで、君と離れたくない。</blockquote><br>　　前几天在TSRC换了本《白帽子讲WEB扫描》，昨天凑空拜读了一遍。整体读下来的感觉是，书中关于WEB漏洞扫描器设计与开发所需的知识描述得比较全面，包括一些坑点也有涉及。但对于每一方面的内容描述得不够深入不够细致，适合从0开始学习设计开发漏洞扫描器的工程师，给其提供一些设计思路，避免一些不必要的坑点。当然设计开发扫描器本身就是一个很复杂的工程，作者也不可能在一本书中详细描述，再者有些坑还得自己踩过才知道。<br><a id="more"></a><br>　　本篇文章作为《白帽子讲WEB扫描》一书读后感，或者说读后总结，也算是本人对漏洞扫描器设计与开发的一次总结。在正式开始总结之前，先感谢下本书作者：刘漩，本文很多内容均借鉴此书，若有转载本文，请务必说明出处。</p>
<p><code>本文涉及到的知识点比较多，我先列个大致介绍目录，请容我慢慢补充完善.....因为篇幅有限，有些内容本文也只做简单介绍（比如爬虫开发），后面我会对每块内容单独成文详细介绍。</code></p>
<h3 id="省略一些前言后语"><a href="#省略一些前言后语" class="headerlink" title="省略一些前言后语"></a>省略一些前言后语</h3><p>　　关于为何要开发一款漏洞扫描器，以及不同扫描器（白、黑、灰）的区别、其作用、有何优缺点等问题，此处省略一万字……</p>
<h3 id="本文概要"><a href="#本文概要" class="headerlink" title="本文概要"></a>本文概要</h3><p>　　本文主要介绍以下两种扫描器的设计与开发：1）基于URL的WEB漏洞扫描器、2）基于指纹的漏洞扫描器。目前市面上很多商业扫描器是包含这两种扫描功能的，但为了能更清楚的知道其原理，我觉得有必要分别介绍。有必要说明一下的是，本文介绍的扫描器均是<code>主动型扫描器</code>，即会主动发起http请求的。至于被动型扫描器，其主要利用http代理（burpsuite）或者流量镜像（绿盟某扫描器）的方式进行扫描，即不会主动发起请求，只是获取请求的内容进行分析。</p>
<h3 id="如何设计基于URL的WEB漏洞扫描器"><a href="#如何设计基于URL的WEB漏洞扫描器" class="headerlink" title="如何设计基于URL的WEB漏洞扫描器"></a>如何设计基于URL的WEB漏洞扫描器</h3><p>　　从本节标题至少可以读出两点信息：第一漏洞扫描器的输入源是URL，第二漏洞扫描主要针对WEB。开发这样一款扫描器至少需要解决以下两个问题：</p>
<ul>
<li>如何采集输入源（即采集网站URL）<ul>
<li>基于流量清洗</li>
<li>基于日志提取</li>
<li>基于爬虫爬取</li>
</ul>
</li>
<li>如何调用扫描插件（即对URL进行扫描）</li>
</ul>
<h4 id="从流量中获取URL数据"><a href="#从流量中获取URL数据" class="headerlink" title="从流量中获取URL数据"></a>从流量中获取URL数据</h4><p>　　一般在甲方开发扫描器会涉及到此块内容，因为基于流量获取url是对业务影响最小，且覆盖面最全的一个方案。而一般乙方开发的商业扫描器很多没有涉及到流量清洗，因为部署等难点。</p>
<h5 id="流量收集获取"><a href="#流量收集获取" class="headerlink" title="流量收集获取"></a>流量收集获取</h5><p>　　可以从企业入口主交换机上镜像一份流量到某台服务器上，再通过一些工具从服务器网卡上获取流量，清洗后提取url、post_body、response等数据。获取流量的工具有很多，比如<a href="https://thief.one/2017/09/27/1/">justniffer</a>，suricata等。</p>
<h5 id="流量中获取扫描源有何坑点"><a href="#流量中获取扫描源有何坑点" class="headerlink" title="流量中获取扫描源有何坑点"></a>流量中获取扫描源有何坑点</h5><p>　　一般流量中是没有https数据的，因为无法解密；流量中包含用户认证信息，如何优雅地处理，使之对用法没有影响。</p>
<h4 id="从日志中获取请求数据"><a href="#从日志中获取请求数据" class="headerlink" title="从日志中获取请求数据"></a>从日志中获取请求数据</h4><p>　　一般在甲方开发扫描器会涉及到此块内容，因为基于日志获取url也是对业务影响很小，且覆盖面比较全的一个方案。</p>
<h5 id="日志收集获取"><a href="#日志收集获取" class="headerlink" title="日志收集获取"></a>日志收集获取</h5><p>怎么在服务器上配置nginx收集日志就不说了，如果对于nginx不熟悉，可移步学习：<a href="https://thief.one/2017/08/22/1/">nginx负载均衡</a></p>
<h5 id="日志中获取扫描源有何坑点"><a href="#日志中获取扫描源有何坑点" class="headerlink" title="日志中获取扫描源有何坑点"></a>日志中获取扫描源有何坑点</h5><p>　　一般不包含post_body，以及response数据，因为每天产生的日志量非常庞大，如果需要存储这么多数据的话，成本很高，所以一般在服务器上只记录url、时间戳等简单信息。</p>
<h4 id="设计开发一款爬虫"><a href="#设计开发一款爬虫" class="headerlink" title="设计开发一款爬虫"></a>设计开发一款爬虫</h4><p>　　区别于一般的网络爬虫，漏洞扫描涉及到的爬虫是针对同一个站点爬取所有URL的爬虫。想要开发一款好用的爬虫，前提是必须对HTTP协议熟悉。本文不展开介绍http协议，只总结开发爬虫过程中一些注意的点。如果对爬虫不甚了解，可以移步学习：<br><a href="">Python爬虫基础（不好意思，还没写….）</a><br><a href="">基于Python的漏洞扫描爬虫（不好意思，也还没写….）</a></p>
<h5 id="HEAD替代GET省资源"><a href="#HEAD替代GET省资源" class="headerlink" title="HEAD替代GET省资源"></a>HEAD替代GET省资源</h5><p>　　注意不是所有请求都用HEAD，而是一部分不需要响应主体的请求可以用HEAD代替GET。head请求唯一区别与get请求的是其不会返回响应主体，只有响应头。</p>
<h5 id="有Cookie闯新大陆"><a href="#有Cookie闯新大陆" class="headerlink" title="有Cookie闯新大陆"></a>有Cookie闯新大陆</h5><p>　　有些网站有最基础的反爬策略（检测请求头），或者有些页面需要登录凭证（cookie认证），因此在爬虫中也需要在请求头中加上cookie。</p>
<h5 id="DNS缓存来提速"><a href="#DNS缓存来提速" class="headerlink" title="DNS缓存来提速"></a>DNS缓存来提速</h5><p>　　当我们每次请求一个域名时，都会先向dns服务器获取域名对应的ip地址，而这个解析记录一般情况下是不太会变的，因此可以一开始爬取的时候解析一次，然后缓存到系统内，后面的请求直接从系统中获取，可以节省资源。</p>
<h5 id="页面获取新URL"><a href="#页面获取新URL" class="headerlink" title="页面获取新URL"></a>页面获取新URL</h5><p>涉及获取不同标签内的url，以及处理动态链接、静态链接，同源策略，重复url去除等。</p>
<h5 id="处理页面跳转"><a href="#处理页面跳转" class="headerlink" title="处理页面跳转"></a>处理页面跳转</h5><p>　　页面跳转主要分为服务端跳转、客户端跳转，具体介绍可移步:<a href="https://thief.one/2016/10/10/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/">【黑帽seo系列】页面跳转
</a>。客户端跳转对用户是可见的，即在第一次请求时，响应码为301或者302，在响应头的Location中返回了跳转的地址，第二次请求跳转的地址，再返回结果；而服务端请求对用户不可见，即只有一次请求，跳转是在服务端处理的。</p>
<h5 id="处理识别404页面"><a href="#处理识别404页面" class="headerlink" title="处理识别404页面"></a>处理识别404页面</h5><p>　　一般网页不存在，响应码便是404。但有些网站为了对用户友好，当访问不存在的页面是会跳转到一个存在的页面（响应码302、301），或者页面直接显示主页内容（响应码200），或者显示404提示页面（响应码200）。针对这些复杂的情况，仅仅对响应码进行判断显然是不够的，需要结合响应码跟页面内容。<br>　　解决方案：先访问一些不存在的页面，获取页面内容，标为C1；再访问目标页面，若响应码为404则表示页面不存在，若不为404，则比较页面源码C2与C1的相似性，若相似也表示不存在。<br>关于如何判断一个页面为404页面的详细内容，请移步：<a href="https://thief.one/2018/04/12/1/">https://thief.one/2018/04/12/1/</a></p>
<h5 id="处理重复URL"><a href="#处理重复URL" class="headerlink" title="处理重复URL"></a>处理重复URL</h5><p>　　去除重复的URL，以免重复抓取相同的页面，当然对于一些相似的URL也需要处理。处理方案可以是将url hash以后存入内存中，比如python的list对象中，然后判断新的url的hash在不在此list中，不存在则将url放入队列进行爬取。</p>
<h5 id="计算页面相似性"><a href="#计算页面相似性" class="headerlink" title="计算页面相似性"></a>计算页面相似性</h5><p>具体可使用汉明距离计算，这对识别404页面有很大的帮助。</p>
<h5 id="请求断开重试"><a href="#请求断开重试" class="headerlink" title="请求断开重试"></a>请求断开重试</h5><p>有些时候由于网络延迟，会导致请求断开，这时候就需要重试，直到次数达到重试次数阀值。</p>
<h5 id="解析页面表单"><a href="#解析页面表单" class="headerlink" title="解析页面表单"></a>解析页面表单</h5><p>　　如果单纯只是抓取页面中的URL，会少了很多请求，比如点击事件、表单发送等。获取表单信息比较简单，只要匹配页面中的form标签，以及其内部的input标签。当需要爬虫能够自动填充这些字段内容，比如电话字段，需要填充正确的电话号码，因为大部分网站会在前后端对数据格式进行校验。这就需要维护一个表单字段库，对于每个常见的字段都设置了常用值。</p>
<h5 id="解析事件以及ajax请求"><a href="#解析事件以及ajax请求" class="headerlink" title="解析事件以及ajax请求"></a>解析事件以及ajax请求</h5><p>　　目前很多网页通过ajax发送请求，因此也要求我们的爬虫能够解析ajax请求。包括一些页面上的事件，也需要爬虫去触发。</p>
<h5 id="Web2-0爬虫"><a href="#Web2-0爬虫" class="headerlink" title="Web2.0爬虫"></a>Web2.0爬虫</h5><p>　　web2.0与web1.0最大的区别，就是增加了很多动态的内容，很多页面内容是js动态生成的。因此这便要求我们的爬虫有解析js的能力。这里推荐几个模块，<a href="https://thief.one/2017/03/31/Phantomjs%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/">phantomjs</a>、<a href="https://thief.one/2018/03/06/1/">chromeheadless</a>等。</p>
<h4 id="维护漏洞库"><a href="#维护漏洞库" class="headerlink" title="维护漏洞库"></a>维护漏洞库</h4><p>　　简单来说，漏洞扫描器主要分为输入与扫描两大块功能，光有输入源还不行，必须得有扫描能力，而扫描能力主要依靠扫描插件的堆积。</p>
<h4 id="如何优雅地对url进行重放请求"><a href="#如何优雅地对url进行重放请求" class="headerlink" title="如何优雅地对url进行重放请求"></a>如何优雅地对url进行重放请求</h4><p>　　从流量中可以获取到一些url，以及post的数据信息（其中包含了认证），由于我们设计的是主动型扫描器，需要主动发起请求，因此如何去优雅地重放这些请求变成了一个难题。由于有些网站cookie过期时间很长，重放请求势必会造成对业务的影响，而不使用cookie，则很多页面无法访问到。<br>　　一种解决方案可以是对cookie进行替换，换成测试账户的cookie，这样就对用户没有影响了，但是其中的坑也很多。</p>
<h3 id="如何设计基于指纹的漏洞扫描器"><a href="#如何设计基于指纹的漏洞扫描器" class="headerlink" title="如何设计基于指纹的漏洞扫描器"></a>如何设计基于指纹的漏洞扫描器</h3><p>　　从本节标题也至少可以看出两个信息：第一漏洞扫描器的输入源是服务指纹，第二漏洞扫描针对WEB+服务。<br>开发这样一款扫描器至少需要以下两个步骤：</p>
<ul>
<li>采集输入源（即采集系统指纹）<ul>
<li>端口扫描</li>
<li>指纹扫描</li>
<li>指纹匹配</li>
</ul>
</li>
<li>调用扫描插件（即匹配指纹进行漏洞扫描）</li>
</ul>
<h4 id="开发端口扫描器"><a href="#开发端口扫描器" class="headerlink" title="开发端口扫描器"></a>开发端口扫描器</h4><p>　　可以使用python的socket模块开发tcp扫描，或者用<a href="https://thief.one/2017/05/02/1/">nmap</a>、masscan、zmap等开源工具进行扫描。</p>
<h4 id="开发指纹扫描器"><a href="#开发指纹扫描器" class="headerlink" title="开发指纹扫描器"></a>开发指纹扫描器</h4><p>　　可以使用nmap扫描，因为nmap内含了很多指纹探针，可以识别出大部分服务指纹信息。针对web指纹，则需要先发起http请求，获取响应内容，再借助web指纹库识别，或者借助开源的指纹扫描器，比如<a href="https://thief.one/2018/01/11/1/">Whatweb</a>等。</p>
<h4 id="维护指纹库"><a href="#维护指纹库" class="headerlink" title="维护指纹库"></a>维护指纹库</h4><p>　　只有指纹没有指纹库也是不行的，指纹好比是一些身份信息，而我们最终是要定位到某个人，因此还需要有一个指纹库，将指纹信息与人对应起来。</p>
<h3 id="输入源-gt-队列-gt-任务分发-gt-扫描节点-gt-存储-如何设计"><a href="#输入源-gt-队列-gt-任务分发-gt-扫描节点-gt-存储-如何设计" class="headerlink" title="输入源-&gt;队列-&gt;任务分发-&gt;扫描节点-&gt;存储 如何设计"></a>输入源-&gt;队列-&gt;任务分发-&gt;扫描节点-&gt;存储 如何设计</h3><p>　　以上简单介绍了设计开发两种扫描器所需要解决的问题，而站在整体角度看，需要解决的问题还远远不够。比如当需要扫描的系统非常庞大时，如何进行分布式的部署，这就要求我们的扫描框架满足分布式部署的需求。</p>
<p>推荐技术栈：python+<a href="https://thief.one/2017/04/06/RabbitMQ/">rabbitmq</a>+<a href="https://thief.one/2017/08/25/1/">celery</a>+<a href="https://thief.one/2017/07/26/1/">mysql</a></p>
<p><code>你以为只有这样就结束了？不不不，今天有点累了，过几天再继续补充，比如添加一些基础的代码以及再补充一些更细的内容。还有，网上有很多资料，我还得先整理学习一波。</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;世界の果てまで、君と離れたくない。&lt;/blockquote&gt;&lt;br&gt;　　前几天在TSRC换了本《白帽子讲WEB扫描》，昨天凑空拜读了一遍。整体读下来的感觉是，书中关于WEB漏洞扫描器设计与开发所需的知识描述得比较全面，包括一些坑点也有涉及。但对于每一方面的内容描述得不够深入不够细致，适合从0开始学习设计开发漏洞扫描器的工程师，给其提供一些设计思路，避免一些不必要的坑点。当然设计开发扫描器本身就是一个很复杂的工程，作者也不可能在一本书中详细描述，再者有些坑还得自己踩过才知道。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="漏洞扫描器" scheme="http://thief.one/tags/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Headless Chrome and API</title>
    <link href="http://thief.one/2018/03/06/1/"/>
    <id>http://thief.one/2018/03/06/1/</id>
    <published>2018-03-06T05:56:54.000Z</published>
    <updated>2018-07-09T08:59:10.241Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">我已爬遍了全世界，而你却迟迟不见</blockquote>

<p>　　自从Google在chrome59版本后加入了 <a href="https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md" target="_blank" rel="external">Headless Chrome</a>，类似phantomjs、selenium等工具作者都放弃了维护自身的产品（原因可参考文章 <a href="https://paper.seebug.org/537/?from=timeline&amp;isappinstalled=0" target="_blank" rel="external">QtWebkit or Headless Chrome</a>）。因此作为使用者的我们也是时候放弃phantomjs，转而研究Headless Chrome了。由于网上对于Headless Chrome的资料还很少，因此我先收集整理一波，随后慢慢学习研究，渐渐将本篇内容补充完善。<br><a id="more"></a></p>
<h3 id="Headless-Chrome-介绍"><a href="#Headless-Chrome-介绍" class="headerlink" title="Headless Chrome 介绍"></a>Headless Chrome 介绍</h3><p>headless chrome意思是无头chrome浏览器，相对于传统的chrome浏览器，这是一个可以在后台用命令行操作浏览器的工具，对于爬虫编写以及web自动化测试都有很大的作用。相比较同类工具Phantomjs，其更加强大（主要因为其依赖的webkit更新）。</p>
<h3 id="Headless-Chrome-安装"><a href="#Headless-Chrome-安装" class="headerlink" title="Headless Chrome 安装"></a>Headless Chrome 安装</h3><p>目前只支持mac与linux系统，需要下载chrome浏览器并安装。</p>
<h4 id="mac-install-headless-chrome"><a href="#mac-install-headless-chrome" class="headerlink" title="mac install headless chrome"></a>mac install headless chrome</h4><p>mac下直接去官网下载安装包即可，mac下chrome浏览器位置，为了方便使用，用alias别名启动。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> chrome=<span class="string">"/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"</span></div><div class="line"><span class="built_in">alias</span> chrome-canary=<span class="string">"/Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary"</span></div><div class="line"><span class="built_in">alias</span> chromium=<span class="string">"/Applications/Chromium.app/Contents/MacOS/Chromium"</span></div></pre></td></tr></table></figure></p>
<p>下载<a href="https://www.google.com/chrome/browser/canary.html" target="_blank" rel="external">chrome-canary</a>版</p>
<p>说明：<code>Mac 和 Linux 上的 Chrome 59 都可以运行无需显示模式。对 Windows 的支持将在 Chrome 60 中提供。要检查你使用的 Chrome 版本，请在浏览器中打开 chrome://version。</code></p>
<h4 id="linux-install-headless-chrome"><a href="#linux-install-headless-chrome" class="headerlink" title="linux install headless chrome"></a>linux install headless chrome</h4><p>添加源：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">vim /etc/yum.repos.d/chrome.repo</div><div class="line">写入以下内容：</div><div class="line"></div><div class="line">[google-chrome]</div><div class="line">name=google-chrome</div><div class="line">baseurl=http://dl.google.com/linux/chrome/rpm/stable/<span class="variable">$basearch</span></div><div class="line">enabled=1</div><div class="line">gpgcheck=0</div><div class="line">gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub</div></pre></td></tr></table></figure></p>
<p>安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y google-chrome-stable</div></pre></td></tr></table></figure></p>
<p>测试运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">google-chrome --headless --<span class="built_in">print</span>-to-pdf https://thief.one</div></pre></td></tr></table></figure></p>
<p>报错处理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Running as root without --no-sandbox is not supported <span class="comment"># 错误信息</span></div></pre></td></tr></table></figure></p>
<p>解析方案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim /opt/google/chrome/google-chrome</div><div class="line">找到 <span class="built_in">exec</span> -a <span class="string">"<span class="variable">$0</span>"</span> <span class="string">"<span class="variable">$HERE</span>/chrome"</span> <span class="string">"<span class="variable">$@</span>"</span></div><div class="line">改为 <span class="built_in">exec</span> -a <span class="string">"<span class="variable">$0</span>"</span> <span class="string">"<span class="variable">$HERE</span>/chrome"</span> <span class="string">"<span class="variable">$@</span>"</span> --user-data-dir --no-sandbox</div></pre></td></tr></table></figure></p>
<p><code>说明：若在安装过程中报错，则将源文件中的gpgcheck改为0</code></p>
<p>linux安装headless chrome参考：<a href="http://akai-tsuki.hatenablog.com/entry/2017/06/18/000000" target="_blank" rel="external">http://akai-tsuki.hatenablog.com/entry/2017/06/18/000000</a></p>
<h3 id="Headless-Chrome-基础用法"><a href="#Headless-Chrome-基础用法" class="headerlink" title="Headless Chrome 基础用法"></a>Headless Chrome 基础用法</h3><p>HELP信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">chrome \</div><div class="line">--headless \                   <span class="comment"># Runs Chrome in headless mode.</span></div><div class="line">--<span class="built_in">disable</span>-gpu \                <span class="comment"># Temporarily needed for now.</span></div><div class="line">--remote-debugging-address=127.0.0.1</div><div class="line">--remote-debugging-port=9222 \</div><div class="line"> https://thief.one   <span class="comment"># URL to open. Defaults to about:blank.</span></div></pre></td></tr></table></figure></p>
<h4 id="访问一个网页获取源码"><a href="#访问一个网页获取源码" class="headerlink" title="访问一个网页获取源码"></a>访问一个网页获取源码</h4><p>–dump-dom 标志将打印 document.body.innerHTML 到标准输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chrome --headless --<span class="built_in">disable</span>-gpu --dump-dom https://thief.one/</div></pre></td></tr></table></figure></p>
<h4 id="访问一个网页将源码创建成一个PDF"><a href="#访问一个网页将源码创建成一个PDF" class="headerlink" title="访问一个网页将源码创建成一个PDF"></a>访问一个网页将源码创建成一个PDF</h4><p>–print-to-pdf 标志将页面转出为 PDF 文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chrome --headless --<span class="built_in">disable</span>-gpu --<span class="built_in">print</span>-to-pdf https://thief.one/</div></pre></td></tr></table></figure></p>
<h4 id="访问一个网页并截图"><a href="#访问一个网页并截图" class="headerlink" title="访问一个网页并截图"></a>访问一个网页并截图</h4><p>使用–screenshot标志运行 Headless Chrome 将在当前工作目录中生成一个名为 screenshot.png的文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">chrome --headless --<span class="built_in">disable</span>-gpu --screenshot https://thief.one/</div><div class="line"></div><div class="line"><span class="comment"># 设置图片大小</span></div><div class="line">chrome --headless --<span class="built_in">disable</span>-gpu --screenshot --window-size=1280,1696 https://thief.one/</div></pre></td></tr></table></figure></p>
<h4 id="访问一个网页并进行js交互（REPL模式）"><a href="#访问一个网页并进行js交互（REPL模式）" class="headerlink" title="访问一个网页并进行js交互（REPL模式）"></a>访问一个网页并进行js交互（REPL模式）</h4><p>–repl 标志可以使 Headless Chrome 运行在一个你可以使用浏览器评估 JS 表达式的模式下。执行下面的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">chrome --headless --<span class="built_in">disable</span>-gpu --repl https://thief.one</div><div class="line">&gt;&gt;&gt; location.href</div><div class="line">&#123;<span class="string">"result"</span>:&#123;<span class="string">"type"</span>:<span class="string">"string"</span>,<span class="string">"value"</span>:<span class="string">"https://thief.one"</span>&#125;&#125;</div><div class="line">&gt;&gt;&gt; quit</div></pre></td></tr></table></figure></p>
<h4 id="启动一个监听端口"><a href="#启动一个监听端口" class="headerlink" title="启动一个监听端口"></a>启动一个监听端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chrome --remote-debugging-port=9222 --remote-debugging-address=0.0.0.0</div></pre></td></tr></table></figure>
<p>可以通过浏览器打开：<a href="http://0.0.0.0:9222" target="_blank" rel="external">http://0.0.0.0:9222</a> </p>
<h3 id="Headless-Chrome-API"><a href="#Headless-Chrome-API" class="headerlink" title="Headless Chrome API"></a>Headless Chrome API</h3><p>以上演示了使用命令行的方式操作headless chrome，那么怎么在代码中使用它呢？<br>api工具如下：<br>官方：<a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="external">puppeteer</a><br>底层：<a href="https://github.com/cyrus-and/chrome-remote-interface/" target="_blank" rel="external">chrome-remote-interface</a><br>活跃：<a href="https://github.com/graphcool/chromeless" target="_blank" rel="external">chromeless</a><br>非官方：<a href="https://github.com/yujiosaka/headless-chrome-crawler" target="_blank" rel="external">headless-chrome-crawler</a></p>
<p>Python相关的API：<br><a href="https://github.com/fate0/pychrome" target="_blank" rel="external">pychrome</a><br><a href="https://github.com/miyakogi/pyppeteer" target="_blank" rel="external">Pyppeteer 推荐</a><br><a href="https://github.com/iiSeymour/chromote" target="_blank" rel="external">chromote</a><br><a href="https://github.com/wasiher/chrome_remote_interface_python" target="_blank" rel="external">chrome_remote_interface_python</a></p>
<h4 id="puppeteer-介绍"><a href="#puppeteer-介绍" class="headerlink" title="puppeteer 介绍"></a>puppeteer 介绍</h4><p>Puppeteer 是一个由 Chrome 团队开发的 Node 库。它提供了一个高层次的 API 来控制无需显示版（或 完全版）的 Chrome。它与其他自动化测试库，如 Phantom 和 NightmareJS 相类似，但是只适用于最新版本的 Chrome。</p>
<h4 id="puppeteer-安装"><a href="#puppeteer-安装" class="headerlink" title="puppeteer 安装"></a>puppeteer 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir puppeteer_test <span class="comment"># 创建一个项目目录</span></div><div class="line"><span class="built_in">cd</span> puppeteer_test</div><div class="line">npm init</div><div class="line">npm i --save puppeteer</div></pre></td></tr></table></figure>
<p>安装puppeteer前需要在系统上安装nodejs与npm；安装完puppeteer，默认会自动安装最新版本的chromium。<br>注意：<code>系统默认安装的npm与nodejs版本都很低，而使用puppeteer需要node6.4.0+，async/await需要node7.6.0+，因此建议安装node7.6.0版本，否则会导致无法使用。</code></p>
<h5 id="安装升级nodejs与npm"><a href="#安装升级nodejs与npm" class="headerlink" title="安装升级nodejs与npm"></a>安装升级nodejs与npm</h5><p>要安装puppeteer，需要先安装npm与nodejs，而puppeteer对nodejs版本有要求，因此不能用系统默认安装的nodejs版本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http://nodejs.org/dist/v7.6.0/node-v7.6.0-linux-x64.tar.gz</div><div class="line">tar -zvxf node-v7.6.0-linux-x64.tar.gz</div></pre></td></tr></table></figure></p>
<p>共享至全局<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rm -rf /usr/bin/node /usr/bin/npm</div><div class="line">ln -s /path/node-v7.6.0-linux-x64/bin/node /usr/bin/node  </div><div class="line">ln -s /path/node-v7.6.0-linux-x64/bin/npm /usr/bin/npm</div></pre></td></tr></table></figure></p>
<p>若用yum安装过nodejs，需要移除其他版本:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum remove npm</div><div class="line">yum remove nodejs</div></pre></td></tr></table></figure></p>
<p>查看nodejs与npm版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line">npm -v</div></pre></td></tr></table></figure></p>
<p>安装升级nodejs过程参考：<a href="http://jeeinn.com/2017/02/236/" target="_blank" rel="external">http://jeeinn.com/2017/02/236/</a></p>
<h4 id="puppeteer-使用"><a href="#puppeteer-使用" class="headerlink" title="puppeteer 使用"></a>puppeteer 使用</h4><p>在使用puppeteer前，先要确定puppeteer、nodejs、npm安装成功（版本正确），且headless chrome安装成功。<br>官方API文档：<a href="https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md" target="_blank" rel="external">https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md</a></p>
<h5 id="打印用户代理："><a href="#打印用户代理：" class="headerlink" title="打印用户代理："></a>打印用户代理：</h5><p>在puppeteer_test目录下创建一个example1.js文件，写入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const puppeteer = require(<span class="string">'puppeteer'</span>);</div><div class="line"></div><div class="line">(async() =&gt; &#123;</div><div class="line"> const browser = await puppeteer.launch(&#123;</div><div class="line">    headless: <span class="literal">true</span>,</div><div class="line">    args: [<span class="string">'--no-sandbox'</span>, <span class="string">'--disable-setuid-sandbox'</span>],</div><div class="line">&#125;);</div><div class="line"> console.log(await browser.version());</div><div class="line"> browser.close();</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>运行代码:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node example1.js</div></pre></td></tr></table></figure></p>
<h5 id="获取页面的屏幕截图："><a href="#获取页面的屏幕截图：" class="headerlink" title="获取页面的屏幕截图："></a>获取页面的屏幕截图：</h5><p>创建一个example2.js文件，写入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const puppeteer = require(<span class="string">'puppeteer'</span>);</div><div class="line"></div><div class="line">(async() =&gt; &#123;</div><div class="line"></div><div class="line">const browser = await puppeteer.launch(&#123;</div><div class="line">    headless: <span class="literal">true</span>,</div><div class="line">    args: [<span class="string">'--no-sandbox'</span>, <span class="string">'--disable-setuid-sandbox'</span>],</div><div class="line">&#125;);</div><div class="line">const page = await browser.newPage();</div><div class="line">await page.goto(<span class="string">'https://thief.one'</span>, &#123;waitUntil: <span class="string">'networkidle2'</span>&#125;);</div><div class="line">await page.pdf(&#123;path: <span class="string">'screen.pdf'</span>, format: <span class="string">'A4'</span>&#125;);</div><div class="line"></div><div class="line">browser.close();</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>运行代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node example2.js</div></pre></td></tr></table></figure></p>
<p>说明：在运行puppeteer之前不需要额外开启一个headless-chrome进程，因为其本身就会去开启。</p>
<h5 id="发送POST请求获取源码"><a href="#发送POST请求获取源码" class="headerlink" title="发送POST请求获取源码"></a>发送POST请求获取源码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">const puppeteer = require(<span class="string">'puppeteer'</span>);</div><div class="line"></div><div class="line">puppeteer.launch(&#123;headless: <span class="literal">true</span>,args: [<span class="string">'--no-sandbox'</span>, <span class="string">'--disable-setuid-sandbox'</span>],&#125;).<span class="keyword">then</span>(async browser =&gt; &#123;</div><div class="line"></div><div class="line">  const page = await browser.newPage();</div><div class="line">  await page.setRequestInterception(<span class="literal">true</span>); // 开启请求捕捉</div><div class="line">  page.on(<span class="string">'request'</span>, interceptedRequest =&gt; &#123;</div><div class="line">    const overrides = &#123;&#125;;</div><div class="line">    //console.log(interceptedRequest.url()); // 输出捕捉到的请求URL</div><div class="line">    <span class="keyword">if</span> (interceptedRequest.url()==<span class="string">'http://127.0.0.1:8000/'</span>)&#123;</div><div class="line">       overrides.method = <span class="string">'POST'</span>;</div><div class="line">       overrides.postData = <span class="string">'&#123;"id":"2"&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">    interceptedRequest.continue(overrides); // 重放</div><div class="line">   &#125;);</div><div class="line">  await page.goto(<span class="string">'http://127.0.0.1:8000/'</span>);</div><div class="line">  await console.log(await page.content()); // 输出源码</div><div class="line">  await browser.close();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="安装puppeteer报错"><a href="#安装puppeteer报错" class="headerlink" title="安装puppeteer报错"></a>安装puppeteer报错</h5><p>在linux下安装puppeteer报错，即:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save puppeteer 命令没有运行成功</div></pre></td></tr></table></figure></p>
<p>失败原因可能是linux版本不支持，centos7下成功，centos6下测试失败。</p>
<h5 id="运行puppeteer报错处理"><a href="#运行puppeteer报错处理" class="headerlink" title="运行puppeteer报错处理"></a>运行puppeteer报错处理</h5><p>报错如下，说明代码语法有问题，或者node版本太低，不符合要求：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SyntaxError: Unexpected token <span class="keyword">function</span></div></pre></td></tr></table></figure></p>
<p>报错如下，说明代码中需要设置headless状态为true<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Failed to launch chrome</div></pre></td></tr></table></figure></p>
<p>解决方案，修改代码为如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const browser = await puppeteer.launch(&#123;</div><div class="line">    headless: <span class="literal">true</span>,</div><div class="line">    args: [<span class="string">'--no-sandbox'</span>, <span class="string">'--disable-setuid-sandbox'</span>],</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<p>报错如下，与上面解决方案一致：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1025/084740.006078:ERROR:zygote_host_impl_linux.cc(88)] Running as root without --no-sandbox is not supported. See https://crbug.com/638180.</div></pre></td></tr></table></figure></p>
<h4 id="pyppeteer"><a href="#pyppeteer" class="headerlink" title="pyppeteer"></a>pyppeteer</h4><p>pyppeteer模版是对puppeteer的python封装，因为puppeteer是用nodejs写的，所以要在python中使用得用pyppeteer模块。</p>
<h5 id="pyppeteer安装"><a href="#pyppeteer安装" class="headerlink" title="pyppeteer安装"></a>pyppeteer安装</h5><p>pyppeteer模版只支持python3.5以上版本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python3 -m pip install pyppeteer</div></pre></td></tr></table></figure></p>
<h5 id="pyppeteer简单的例子"><a href="#pyppeteer简单的例子" class="headerlink" title="pyppeteer简单的例子"></a>pyppeteer简单的例子</h5><p>截图：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line">from pyppeteer import launch</div><div class="line"></div><div class="line">async def main():</div><div class="line">    browser = await launch(args=[<span class="string">'--no-sandbox'</span>])</div><div class="line">    page = await browser.newPage()</div><div class="line">    await page.goto(<span class="string">'http://example.com'</span>)</div><div class="line">    await page.screenshot(&#123;<span class="string">'path'</span>: <span class="string">'example.png'</span>&#125;)</div><div class="line">    await browser.close()</div><div class="line"></div><div class="line">asyncio.get_event_loop().run_until_complete(main())</div></pre></td></tr></table></figure></p>
<p>说明：在使用pyppeteer时，不需要额外开启headless-chrome进程（与puppeteer一样）。更多pyppeteer模版使用方法，参考：<a href="https://miyakogi.github.io/pyppeteer/reference.html#page-class" target="_blank" rel="external">https://miyakogi.github.io/pyppeteer/reference.html#page-class</a></p>
<h5 id="pyppeteer报错处理"><a href="#pyppeteer报错处理" class="headerlink" title="pyppeteer报错处理"></a>pyppeteer报错处理</h5><p>错误类似如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyppeteer.errors.BrowserError: Failed to connect to browser port: http://127.0.0.1:58871/json/version</div></pre></td></tr></table></figure></p>
<p>解决方案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">加上：args=[<span class="string">'--no-sandbox'</span>]，同puppeteer类似。</div><div class="line"></div><div class="line">browser = await launch(args=[<span class="string">'--no-sandbox'</span>])</div></pre></td></tr></table></figure></p>
<h4 id="chrome-remote-interface工具"><a href="#chrome-remote-interface工具" class="headerlink" title="chrome-remote-interface工具"></a>chrome-remote-interface工具</h4><p>可以用来分析渲染一个页面过程中所有的请求过程，包括获取所有的请求接口以及响应内容等。再运行chrome-remote-interface代码前，需要先启动headless chrome进程，即：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chrome --headless --remote-debugging-port=9222</div></pre></td></tr></table></figure></p>
<p>安装chrome-remote-interface：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install chrome-remote-interface</div></pre></td></tr></table></figure></p>
<p>然后编写代码：(以获取所有请求url为例)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">const CDP = require(<span class="string">'chrome-remote-interface'</span>);</div><div class="line"></div><div class="line">// node nmask.js https://nmask.cn</div><div class="line"></div><div class="line">var options = process.argv;</div><div class="line">var target_url = options[2];</div><div class="line"></div><div class="line">CDP((client) =&gt; &#123;</div><div class="line">    // extract domains</div><div class="line">    const &#123;Network, Page&#125; = client;</div><div class="line">    </div><div class="line">    // setup handlers</div><div class="line">    Network.requestWillBeSent((params) =&gt; &#123;</div><div class="line">        console.log(params.request.url);</div><div class="line">    &#125;);</div><div class="line">    Page.loadEventFired(() =&gt; &#123;</div><div class="line">        client.close();</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    // <span class="built_in">enable</span> events <span class="keyword">then</span> start!</div><div class="line">    Promise.all([</div><div class="line">        Network.enable(),</div><div class="line">        Page.enable()</div><div class="line">    ]).<span class="keyword">then</span>(() =&gt; &#123;</div><div class="line">        <span class="built_in">return</span> Page.navigate(&#123;url: target_url&#125;);//输出请求的url</div><div class="line">    &#125;).catch((err) =&gt; &#123;</div><div class="line">        console.error(err);</div><div class="line">        client.close();</div><div class="line">    &#125;);</div><div class="line">&#125;).on(<span class="string">'error'</span>, (err) =&gt; &#123;</div><div class="line">    console.error(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>运行这段代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node nmask.js https://thief.one</div></pre></td></tr></table></figure></p>
<h4 id="chromeless介绍"><a href="#chromeless介绍" class="headerlink" title="chromeless介绍"></a>chromeless介绍</h4><p>chromeless社区比较火热，代码更新也非常频繁，个人比较看好。</p>
<h4 id="chromeless安装"><a href="#chromeless安装" class="headerlink" title="chromeless安装"></a>chromeless安装</h4><p>chromeless对nodejs版本要求是&gt;8.2(centos7下node7.6测试可以)，因此需要先升级nodejs，升级方法参考前文；升级完以后，再安装chromeless项目环境。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir chromeless_test</div><div class="line"><span class="built_in">cd</span> chromeless_test</div><div class="line">npm init</div><div class="line">npm install chromeless</div></pre></td></tr></table></figure></p>
<h4 id="chromeless使用"><a href="#chromeless使用" class="headerlink" title="chromeless使用"></a>chromeless使用</h4><p>官方API文档：<a href="https://github.com/graphcool/chromeless/blob/master/docs/api.md#api-goto" target="_blank" rel="external">https://github.com/graphcool/chromeless/blob/master/docs/api.md#api-goto</a><br>在线代码运行环境：<a href="https://chromeless.netlify.com/#src=" target="_blank" rel="external">https://chromeless.netlify.com</a></p>
<p>创建chromeless_test.js,写入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">const &#123; Chromeless &#125; = require(<span class="string">'chromeless'</span>)</div><div class="line"></div><div class="line">async <span class="keyword">function</span> <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">  const chromeless = new Chromeless()</div><div class="line"></div><div class="line">  const screenshot = await chromeless</div><div class="line">    .goto(<span class="string">'https://www.baidu.com'</span>)</div><div class="line">    //.<span class="built_in">type</span>(<span class="string">'chromeless'</span>, <span class="string">'input[name="q"]'</span>)</div><div class="line">    //.press(13)</div><div class="line">    //.<span class="built_in">wait</span>(<span class="string">'#resultStats'</span>)</div><div class="line">    .screenshot()</div><div class="line"></div><div class="line">  console.log(screenshot) // prints <span class="built_in">local</span> file path or S3 url</div><div class="line"></div><div class="line">  await chromeless.end()</div><div class="line">&#125;</div><div class="line"></div><div class="line">run().catch(console.error.bind(console))</div></pre></td></tr></table></figure></p>
<p>运行代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nohup google-chrome --headless --remote-debugging-port=9222 &amp; <span class="comment">#开启本地headless chrome</span></div><div class="line">node chromeless_test.js</div></pre></td></tr></table></figure></p>
<p><code>注意：在运行chromeless前，需要先安装headless chrome，并且需要在本地开启--remote-debugging-port=9222，监听本地9222端口；chromeless也支持使用远程的headless chrome</code></p>
<h4 id="pychrome工具"><a href="#pychrome工具" class="headerlink" title="pychrome工具"></a>pychrome工具</h4><p><code>暂没有研究，尽情期待！</code></p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="Linux截图中文字体变方块如何解决？"><a href="#Linux截图中文字体变方块如何解决？" class="headerlink" title="Linux截图中文字体变方块如何解决？"></a>Linux截图中文字体变方块如何解决？</h4><p>出现这类问题主要是因为linux服务器字体缺失的问题，解决方案是将字体文件copy到linux服务器/usr/share/fonts/zh_CN目录下。</p>
<p>第一步：从windows或者mac上获取字体文件，mac上的字体文件地址为：/Library/Fonts，windows字体地址为：c盘下的Windows/Fonts。将Fonts目录打包上传到linux服务器/usr/share/fonts/zh_CN目录下，然后解压。</p>
<p>第二步：设置权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod -R 755 /usr/share/fonts/zh_CN</div></pre></td></tr></table></figure></p>
<p>第三步：生成fonts.scale<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum -y install ttmkfdir</div><div class="line">ttmkfdir -e /usr/share/X11/fonts/encodings/encodings.dir</div></pre></td></tr></table></figure></p>
<p>第四步：修改字体配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vim /etc/fonts/fonts.conf</div><div class="line"></div><div class="line"></div><div class="line">在&lt;dir&gt;....&lt;/dir&gt;列表中添加字体</div><div class="line"></div><div class="line">如：&lt;dir&gt;/usr/share/fonts/zh_CN/Fonts&lt;/dir&gt;</div></pre></td></tr></table></figure></p>
<p>第五步：刷新字体缓存<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">fc</span>-cache</div></pre></td></tr></table></figure></p>
<h4 id="命令行运行headless-chrome需要使用–disable-gpu参数吗？"><a href="#命令行运行headless-chrome需要使用–disable-gpu参数吗？" class="headerlink" title="命令行运行headless chrome需要使用–disable-gpu参数吗？"></a>命令行运行headless chrome需要使用–disable-gpu参数吗？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">目前--<span class="built_in">disable</span>-gpu 标志在处理一些bug时是需要的，在未来版本的 Chrome 中就不需要了。</div></pre></td></tr></table></figure>
<h4 id="系统仍然需要安装Xvfb吗？"><a href="#系统仍然需要安装Xvfb吗？" class="headerlink" title="系统仍然需要安装Xvfb吗？"></a>系统仍然需要安装Xvfb吗？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">不需要，Headless Chrome 不使用窗口，所以不需要像 Xvfb 这样的显示服务器。</div><div class="line"></div><div class="line">你问什么是 Xvfb？</div><div class="line">Xvfb 是一个用于类 Unix 系统的运行于内存之内的显示服务器，可以让你运行图形应用程序（如 Chrome），而无需附加的物理显示器。许多人使用 Xvfb 运行早期版本的 Chrome 进行 “headless” 测试。</div></pre></td></tr></table></figure>
<h4 id="如何创建一个运行-Headless-Chrome-的-Docker-容器？"><a href="#如何创建一个运行-Headless-Chrome-的-Docker-容器？" class="headerlink" title="如何创建一个运行 Headless Chrome 的 Docker 容器？"></a>如何创建一个运行 Headless Chrome 的 Docker 容器？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">查看 lighthouse-ci。它有一个使用 Ubuntu 作为基础镜像的 Dockerfile 示例，并且在 App Engine Flexible 容器中安装和运行了 Lighthouse。</div></pre></td></tr></table></figure>
<h4 id="headless-chrome和-PhantomJS-有什么关系？"><a href="#headless-chrome和-PhantomJS-有什么关系？" class="headerlink" title="headless chrome和 PhantomJS 有什么关系？"></a>headless chrome和 PhantomJS 有什么关系？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Headless Chrome 和 PhantomJS 是类似的工具。它们都可以用来在无需显示的环境中进行自动化测试。两者的主要不同在于 Phantom 使用了一个较老版本的 WebKit 作为它的渲染引擎，而 Headless Chrome 使用了最新版本的 Blink。</div></pre></td></tr></table></figure>
<p><code>下篇将介绍分布式漏扫爬虫框架的设计与实现，以及写爬虫过程中需要注意的点</code></p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://zhuanlan.zhihu.com/p/29207391" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/29207391</a><br><a href="https://developers.google.com/web/updates/2017/04/headless-chrome" target="_blank" rel="external">https://developers.google.com/web/updates/2017/04/headless-chrome</a><br><a href="https://juejin.im/entry/58fd5e645c497d005803b6a4" target="_blank" rel="external">https://juejin.im/entry/58fd5e645c497d005803b6a4</a><br><a href="http://csbun.github.io/blog/2017/09/puppeteer/" target="_blank" rel="external">http://csbun.github.io/blog/2017/09/puppeteer/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;我已爬遍了全世界，而你却迟迟不见&lt;/blockquote&gt;

&lt;p&gt;　　自从Google在chrome59版本后加入了 &lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Headless Chrome&lt;/a&gt;，类似phantomjs、selenium等工具作者都放弃了维护自身的产品（原因可参考文章 &lt;a href=&quot;https://paper.seebug.org/537/?from=timeline&amp;amp;isappinstalled=0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;QtWebkit or Headless Chrome&lt;/a&gt;）。因此作为使用者的我们也是时候放弃phantomjs，转而研究Headless Chrome了。由于网上对于Headless Chrome的资料还很少，因此我先收集整理一波，随后慢慢学习研究，渐渐将本篇内容补充完善。&lt;br&gt;
    
    </summary>
    
      <category term="爬虫技术" scheme="http://thief.one/categories/%E7%88%AC%E8%99%AB%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Headless Chrome" scheme="http://thief.one/tags/Headless-Chrome/"/>
    
      <category term="Puppeteer" scheme="http://thief.one/tags/Puppeteer/"/>
    
      <category term="pychrome" scheme="http://thief.one/tags/pychrome/"/>
    
      <category term="chromeless" scheme="http://thief.one/tags/chromeless/"/>
    
  </entry>
  
  <entry>
    <title>记与某牛的一次饭局交流</title>
    <link href="http://thief.one/2018/02/05/1/"/>
    <id>http://thief.one/2018/02/05/1/</id>
    <published>2018-02-05T02:41:32.000Z</published>
    <updated>2018-02-05T03:13:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">好好学习，天天向上</blockquote><br>记录与某业界大牛前辈的一次饭局谈话，话后小弟终觉获益匪浅，心想有些关键问题与解惑过程值得一记与分享，因此便有了此文。<br><a id="more"></a></p>
<h3 id="偏安全还是开发？"><a href="#偏安全还是开发？" class="headerlink" title="偏安全还是开发？"></a>偏安全还是开发？</h3><p>　　由于我大学所读的专业偏研发而非安全，本人接触安全的时间也不长，再加上工作中还是以安全开发为主，因此便有了此疑惑。从职业发展（暂不管个人兴趣）来谈，我到底应该选择偏向安全呢？还是开发？</p>
<p>　　这个问题一直困扰了我很久，在安全方面我算是刚入门；开发方面熟练python，但开发能力无法跟甲方的RD比。从个人兴趣上来说，我更偏向开发，当然是跟安全相关的开发，比如开发自动化扫描程序等等。但从职业前景上来说，真不知道该如何选择。</p>
<p>某牛结合自身十多年的安全经验给了我一些启迪：<code>“选择偏开发为好，因为安全只是开发中发现的一些bug，只要对开发有深入的了解与实践，那么安全也就自然会懂。”</code>（不一定是原画，但含义一样）</p>
<h3 id="安全杂而广，是选择深入一面，还是面面俱到？"><a href="#安全杂而广，是选择深入一面，还是面面俱到？" class="headerlink" title="安全杂而广，是选择深入一面，还是面面俱到？"></a>安全杂而广，是选择深入一面，还是面面俱到？</h3><p>　　接上个问题的背景，由于本人的安全能力一般，因此在安全方面还有很多短板，比如说逆向、二进制等，可以说是盲区。因此是否需要学习这些技能，以增加自身安全的能力，还是专注一个方面研究，比如说web安全？</p>
<p>某牛结合自身十多年的安全经验给了我一些解答：<code>“选择一个方向精通，至于其他方面的技术，等需要的时候再学，如若工作中不需要，则不必要学习，因为长时间不用则会遗忘。”</code>（不一定是原画，但含义一样）</p>
<h3 id="机器学习很火，是否适合安全行业？"><a href="#机器学习很火，是否适合安全行业？" class="headerlink" title="机器学习很火，是否适合安全行业？"></a>机器学习很火，是否适合安全行业？</h3><p>　　最近几年机器学习可以说是很火热，我也一直想往这方面学习发展，将机器学习应用于安全领域。当然这一块的学习成本比较高，因此我一直还没入门，那么机器学习很火，是否适合安全行业？</p>
<p>某牛结合自身十多年的安全经验给了我一些建议：<code>“建议不要踏入机器学习的坑，安全不同其他行业，机器学习未必能解决安全问题，比如机器学习能识别哪些是敏感数据吗？学习前的数据打标工作，需要耗费大量的人力，安全防护能力有时靠人力堆规则，而不是机器学习就能解决的。”</code>（不一定是原画，但含义一样）</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>　　有句话叫<code>“纸上得来终觉浅”</code>，光从书本上学习知识可能还不够，适当的时候可以多听听前辈的经验之谈，走走前辈走过的路，踩踩前辈踩过的坑。当踩得坑足够多了，走过的路足够长了，当然也不能忘记时刻保持学习的习惯，适当的运动保持健康的身体，过个几年，十几年，也许大家都能成为大牛。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;好好学习，天天向上&lt;/blockquote&gt;&lt;br&gt;记录与某业界大牛前辈的一次饭局谈话，话后小弟终觉获益匪浅，心想有些关键问题与解惑过程值得一记与分享，因此便有了此文。&lt;br&gt;
    
    </summary>
    
      <category term="生活杂谈" scheme="http://thief.one/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>记Django开发中的一些常用代码段</title>
    <link href="http://thief.one/2018/01/26/1/"/>
    <id>http://thief.one/2018/01/26/1/</id>
    <published>2018-01-26T10:01:13.000Z</published>
    <updated>2018-08-28T06:46:20.054Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">2018年的第一场雪，比2002年来得更晚一些</blockquote><br>　　记得之前有分享过Django开发相关的系列文章（可在博客右上方自行搜索），内容包括模版、视图、路由等。那么本篇再补充一些Django开发过程中常用到的一些功能代码块，内容涉及前端、后端相关功能代码。这些代码块都是平常开发中常用的，因此在此做个备份，方便查询。<br><a id="more"></a></p>
<h3 id="前端功能"><a href="#前端功能" class="headerlink" title="前端功能"></a>前端功能</h3><p>搞安全的还需要会前端？当然啊，搞安全的也需要出产品，出产品了没前端不就显得很low吗？不过自己写前端太累了，因此还得用框架，这里推荐<a href="http://v3.bootcss.com/" target="_blank" rel="external">Bootstrap</a>。在尝试使用文章下方介绍的前端代码前，先在代码中添加上Bootstrap框架提供给的css、js连接。</p>
<h4 id="面板折叠"><a href="#面板折叠" class="headerlink" title="面板折叠"></a>面板折叠</h4><p><img src="/upload_image/20180126/6.png" alt=""><br><img src="/upload_image/20180126/1.png" alt=""><br>这个功能经常在侧边菜单栏中用到，面板折叠可有效的保持界面整洁。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"panel panel-success"</span>&gt;</div><div class="line">&lt;div class=<span class="string">"panel-heading"</span> data-toggle=<span class="string">"collapse"</span> data-parent=<span class="string">"#accordion"</span> href=<span class="string">"#collapse"</span>&gt;</div><div class="line">  &lt;h1 class=<span class="string">"panel-title"</span>&gt;&lt;span class=<span class="string">"glyphicon glyphicon-tag"</span> aria-hidden=<span class="string">"true"</span>&gt;&lt;/span&gt;Index&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div id=<span class="string">"collapse"</span> class=<span class="string">"panel-collapse collapse out"</span>&gt; <span class="comment"># out or in 控制折叠状态</span></div><div class="line">  &lt;div class=<span class="string">"panel-body"</span>&gt;</div><div class="line">    &lt;a href=<span class="string">""</span>&gt;index1&lt;/a&gt;&lt;br&gt;&lt;br&gt;</div><div class="line">    &lt;a href=<span class="string">""</span>&gt;index2&lt;/a&gt;&lt;br&gt;&lt;br&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h4 id="表格分页"><a href="#表格分页" class="headerlink" title="表格分页"></a>表格分页</h4><p><img src="/upload_image/20180126/7.png" alt=""><br>表格分页前端比较简单，想要实现真正的分页显示数据，需要结合后端代码，文章后面会介绍。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 分页 --&gt;</div><div class="line">&lt;form action=<span class="string">"&#123;% url 'asset_list' %&#125;"</span> method=<span class="string">"POST"</span>&gt;</div><div class="line">&#123;% csrf_token %&#125;</div><div class="line">&lt;ul class=<span class="string">"pagination pagination"</span>&gt;</div><div class="line">    &lt;li&gt;&lt;a href=<span class="string">"&#123;% url 'asset_list' %&#125;?page=0&amp;search_key=&#123;&#123;search_key&#125;&#125;"</span>&gt;首页&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;a href=<span class="string">"&#123;% url 'asset_list' %&#125;?page=&#123;&#123;pre_page&#125;&#125;&amp;search_key=&#123;&#123;search_key&#125;&#125;"</span>&gt;上一页&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &#123;% <span class="keyword">for</span> i <span class="keyword">in</span> page_list %&#125;</div><div class="line">        &lt;li&gt;&lt;a href=<span class="string">"&#123;% url 'asset_list' %&#125;?page=&#123;&#123; i &#125;&#125;&amp;search_key=&#123;&#123;search_key&#125;&#125;"</span> class=<span class="string">"active"</span>&gt;&#123;&#123; i &#125;&#125;&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &#123;% endfor %&#125;</div><div class="line">    &lt;li&gt;&lt;a href=<span class="string">"&#123;% url 'asset_list' %&#125;?page=&#123;&#123; next_page &#125;&#125;&amp;search_key=&#123;&#123;search_key&#125;&#125;"</span>&gt;下一页&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;a href=<span class="string">"&#123;% url 'asset_list' %&#125;?page=&#123;&#123; last_page &#125;&#125;&amp;search_key=&#123;&#123;search_key&#125;&#125;"</span>&gt;尾页&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &amp;nbsp;</div><div class="line">     &lt;li&gt;</div><div class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> placeholder=<span class="string">"输入页码"</span> ng-model=<span class="string">"gotoPage"</span> class=<span class="string">""</span> style=<span class="string">"width: 80px"</span> name=<span class="string">"page"</span>&gt;</div><div class="line">        &amp;nbsp;</div><div class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> class=<span class="string">"btn btn-default"</span> name=<span class="string">""</span> value=<span class="string">"跳转到"</span> style=<span class="string">"width:70px;height: 34px"</span>&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line"> &lt;/ul&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<h4 id="控制表格单元格内容自动换行"><a href="#控制表格单元格内容自动换行" class="headerlink" title="控制表格单元格内容自动换行"></a>控制表格单元格内容自动换行</h4><p>有些时候表格中单元格内容太长，会导致表格整体很不好看，因此对于内容会很长的表格列需要添加如下style<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;td style=<span class="string">"word-wrap:break-word;word-break:break-all;"</span>&gt;<span class="built_in">test</span>&lt;/td&gt;</div></pre></td></tr></table></figure></p>
<h4 id="弹出框（可编辑）"><a href="#弹出框（可编辑）" class="headerlink" title="弹出框（可编辑）"></a>弹出框（可编辑）</h4><p><img src="/upload_image/20180126/2.png" alt=""><br>有些时候需要修改一些表格数据，之前的做法是点击一个按钮，跳转到一个修改的页面，但这种做法不够优雅，因此可以选择点击按钮弹出一个可编辑的对话框。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;form action=<span class="string">"/index/"</span> method=<span class="string">"POST"</span>&gt;</div><div class="line">&lt;div class=<span class="string">"modal fade"</span> id=<span class="string">"update"</span> tabindex=<span class="string">"-1"</span> role=<span class="string">"dialog"</span> aria-labelledby=<span class="string">"myModalLabel"</span> aria-hidden=<span class="string">"true"</span>&gt;</div><div class="line">  &lt;div class=<span class="string">"modal-dialog"</span>&gt;</div><div class="line">    &lt;div class=<span class="string">"modal-content"</span>&gt;</div><div class="line">      &lt;div class=<span class="string">"modal-header"</span>&gt;</div><div class="line">        &lt;button <span class="built_in">type</span>=<span class="string">"button"</span> class=<span class="string">"close"</span> data-dismiss=<span class="string">"modal"</span> aria-hidden=<span class="string">"true"</span>&gt;</div><div class="line">          &amp;<span class="built_in">times</span>;</div><div class="line">        &lt;/button&gt;</div><div class="line">        &lt;h4 class=<span class="string">"modal-title"</span> id=<span class="string">"myModalLabel"</span>&gt;</div><div class="line">          提醒框</div><div class="line">        &lt;/h4&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=<span class="string">"modal-body"</span>&gt;</div><div class="line">        &lt;label&gt;KEY&lt;/label&gt;</div><div class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> class=<span class="string">"form-control"</span> name=<span class="string">"new_key"</span> value=<span class="string">"&#123;&#123;i.key_&#125;&#125;"</span>&gt;</div><div class="line">        &lt;label&gt;VALUES&lt;/label&gt;</div><div class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> class=<span class="string">"form-control"</span> name=<span class="string">"new_value"</span> value=<span class="string">"&#123;&#123;i.value_&#125;&#125;"</span>&gt;</div><div class="line"></div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=<span class="string">"modal-footer"</span>&gt;</div><div class="line">        &lt;button <span class="built_in">type</span>=<span class="string">"button"</span> class=<span class="string">"btn btn-default"</span> data-dismiss=<span class="string">"modal"</span>&gt;关闭</div><div class="line">        &lt;/button&gt;</div><div class="line">        &lt;button <span class="built_in">type</span>=<span class="string">"submit"</span> name=<span class="string">"update_id"</span> value=<span class="string">"&#123;&#123;i.id&#125;&#125;"</span> class=<span class="string">"btn btn-primary"</span>&gt;</div><div class="line">          确定修改</div><div class="line">        &lt;/button&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> data-toggle=<span class="string">"modal"</span> data-target=<span class="string">"#update"</span> class=<span class="string">"btn btn-info"</span> value=<span class="string">"修改"</span>&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<h4 id="弹出提醒框（不可编辑）"><a href="#弹出提醒框（不可编辑）" class="headerlink" title="弹出提醒框（不可编辑）"></a>弹出提醒框（不可编辑）</h4><p><img src="/upload_image/20180126/3.png" alt=""><br>这个功能主要作用删除数据、修改数据时的提醒。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;form action=<span class="string">"/index/"</span> method=<span class="string">"POST"</span>&gt;</div><div class="line">&lt;div class=<span class="string">"modal fade"</span> id=<span class="string">"del"</span> tabindex=<span class="string">"-1"</span> role=<span class="string">"dialog"</span> aria-labelledby=<span class="string">"myModalLabel"</span> aria-hidden=<span class="string">"true"</span>&gt;</div><div class="line">&lt;div class=<span class="string">"modal-dialog"</span>&gt;</div><div class="line">&lt;div class=<span class="string">"modal-content"</span>&gt;</div><div class="line">  &lt;div class=<span class="string">"modal-header"</span>&gt;</div><div class="line">    &lt;button <span class="built_in">type</span>=<span class="string">"button"</span> class=<span class="string">"close"</span> data-dismiss=<span class="string">"modal"</span> aria-hidden=<span class="string">"true"</span>&gt;</div><div class="line">      &amp;<span class="built_in">times</span>;</div><div class="line">    &lt;/button&gt;</div><div class="line">    &lt;h4 class=<span class="string">"modal-title"</span> id=<span class="string">"myModalLabel"</span>&gt;</div><div class="line">      提醒框</div><div class="line">    &lt;/h4&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=<span class="string">"modal-body"</span>&gt;</div><div class="line">    您确定要删除记录吗？</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=<span class="string">"modal-footer"</span>&gt;</div><div class="line">    &lt;button <span class="built_in">type</span>=<span class="string">"button"</span> class=<span class="string">"btn btn-default"</span> data-dismiss=<span class="string">"modal"</span>&gt;关闭</div><div class="line">    &lt;/button&gt;</div><div class="line">    &lt;button <span class="built_in">type</span>=<span class="string">"submit"</span> name=<span class="string">"del_id"</span> value=<span class="string">"&#123;&#123;i.id&#125;&#125;"</span> class=<span class="string">"btn btn-primary"</span>&gt;</div><div class="line">      确定删除</div><div class="line">    &lt;/button&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> data-toggle=<span class="string">"modal"</span> data-target=<span class="string">"#del"</span> class=<span class="string">"btn btn-danger"</span> value=<span class="string">"删除"</span>&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<h4 id="搜索框自动补全"><a href="#搜索框自动补全" class="headerlink" title="搜索框自动补全"></a>搜索框自动补全</h4><p><img src="/upload_image/20180126/4.png" alt=""><br>这个就厉害啦，当搜索一些资源的时候，如果能自动补全是不是会方便很多呢？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;label <span class="keyword">for</span>=<span class="string">"autocomplete"</span>&gt;选择扫描插件（必选）&lt;/label&gt;&lt;br&gt;</div><div class="line">&lt;input  class=<span class="string">"form-control"</span> id=<span class="string">"autocomplete"</span> name=<span class="string">"vul_name"</span> placeholder=<span class="string">"输入漏洞名称"</span>&gt;&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">var tags = &#123;&#123; plugin_list|safe &#125;&#125;; <span class="comment"># 注plugin_list</span></div><div class="line">$( <span class="string">"#autocomplete"</span> ).autocomplete(&#123;</div><div class="line">  <span class="built_in">source</span>: tags</div><div class="line">&#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h4 id="ajax请求"><a href="#ajax请求" class="headerlink" title="ajax请求"></a>ajax请求</h4><p>用ajax发送请求有好有坏，具体用法可参考：<a href="https://thief.one/2017/09/14/3/">https://thief.one/2017/09/14/3/</a></p>
<h4 id="界面面板布局"><a href="#界面面板布局" class="headerlink" title="界面面板布局"></a>界面面板布局</h4><p><img src="/upload_image/20180126/5.png" alt=""><br>这个纯粹为了装逼。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"container"</span>&gt;</div><div class="line">  &lt;div class=<span class="string">"row"</span>&gt;</div><div class="line">        <span class="comment">####### 面板 ##########</span></div><div class="line">        &lt;div class=<span class="string">"col-md-3"</span>&gt;</div><div class="line">            &lt;div class=<span class="string">"list-group"</span>&gt;</div><div class="line">                &lt;form class=<span class="string">"list-group-item"</span>&gt; </div><div class="line">                    &lt;a href=<span class="string">""</span>&gt;<span class="built_in">test</span>&lt;/a&gt;</div><div class="line">                &lt;/form&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line"></div><div class="line">       <span class="comment">####### 面板 ##########</span></div><div class="line">        &lt;div class=<span class="string">"col-md-3"</span>&gt;</div><div class="line">            &lt;div class=<span class="string">"list-group"</span>&gt;</div><div class="line">                &lt;form class=<span class="string">"list-group-item"</span>&gt; </div><div class="line">                    &lt;a href=<span class="string">""</span>&gt;test2&lt;/a&gt;</div><div class="line">                &lt;/form&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">  </div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h4 id="表格单选框"><a href="#表格单选框" class="headerlink" title="表格单选框"></a>表格单选框</h4><p>表格显示数据是常见的功能，一般情况下需要多表格数据进行删改，因此批量选中就很重要。一般表格中的批量选择，可以使用单选框实现。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 导入js --&gt;</div><div class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/2.1.1/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;!-- 表格数据 --&gt;</div><div class="line">&lt;div id=<span class="string">"list"</span>&gt;</div><div class="line">    &lt;table class=<span class="string">"table table-hover table-bordered table-striped"</span>&gt;</div><div class="line">        &lt;thead&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line">                &lt;th&gt;&lt;input <span class="built_in">type</span>=<span class="string">"checkbox"</span> id=<span class="string">"all"</span> name=<span class="string">"task_check_"</span> value=<span class="string">""</span>&gt;&lt;/th&gt;</div><div class="line">                &lt;th&gt;ID&lt;/th&gt;</div><div class="line">                &lt;th&gt;User&lt;/th&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">        &lt;/thead&gt;</div><div class="line">        &lt;tbody&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line">                &lt;th&gt;&lt;input <span class="built_in">type</span>=<span class="string">"checkbox"</span> id=<span class="string">""</span> name=<span class="string">"task_check"</span> value=<span class="string">""</span>&gt;&lt;/th&gt;</div><div class="line">                &lt;td&gt;01&lt;/td&gt;</div><div class="line">                &lt;td&gt;nmask&lt;/td&gt;</div><div class="line">                &lt;td&gt;</div><div class="line">                    &lt;a href=<span class="string">""</span> class=<span class="string">"link"</span>&gt;修改&lt;/a&gt;&amp;nbsp;&amp;nbsp;</div><div class="line">                &lt;/td&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">        &lt;/tbody&gt;</div><div class="line">    &lt;/table&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;!-- js --&gt;</div><div class="line">&lt;script&gt;</div><div class="line">$(document).ready(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    //全选或全不选</div><div class="line">    $(<span class="string">"#all"</span>).click(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        <span class="keyword">if</span> (this.checked) &#123;</div><div class="line">            $(<span class="string">"#list :checkbox"</span>).prop(<span class="string">"checked"</span>, <span class="literal">true</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $(<span class="string">"#list :checkbox"</span>).attr(<span class="string">"checked"</span>, <span class="literal">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    //设置全选复选框</div><div class="line">    $(<span class="string">"#list :checkbox"</span>).click(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        allchk();</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">function</span> selectAll(check)&#123;</div><div class="line">        $(check).click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            <span class="keyword">if</span> ($(check).is(<span class="string">':checked'</span>)) &#123;</div><div class="line">                $(<span class="string">".list input"</span>).prop(<span class="string">"checked"</span>,<span class="literal">true</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                $(<span class="string">".list input"</span>).prop(<span class="string">"checked"</span>,<span class="literal">false</span>);</div><div class="line">            &#125;;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    //显示时执行一次</div><div class="line">    selectAll();</div><div class="line">&#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="后端功能"><a href="#后端功能" class="headerlink" title="后端功能"></a>后端功能</h3><h4 id="表格分页-1"><a href="#表格分页-1" class="headerlink" title="表格分页"></a>表格分页</h4><p>前面介绍了前端的分页，那么后端怎么写分页的功能呢？django框架有内置的分页模块Paginator，其他框架也有，比如flask等。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">from django.core.paginator import Paginator</div><div class="line"></div><div class="line">def page_fenye(objects,page,num=10):</div><div class="line">    <span class="string">''</span><span class="string">'分页函数</span></div><div class="line">    @num:每页显示多少条数据</div><div class="line">    @page:当前页码</div><div class="line">    @fenye_num:分页栏显示的数字数量</div><div class="line"></div><div class="line">    return：</div><div class="line">    @object_list:该页显示的数据对象</div><div class="line">    @page_range:分页栏显示的数字范围</div><div class="line">    @last_page:最后一页的数字</div><div class="line">    '<span class="string">''</span></div><div class="line">    fenye_num=6</div><div class="line">    fenye_num_av=fenye_num/2</div><div class="line"></div><div class="line">    try:</div><div class="line">        page=int(page)</div><div class="line">    except:</div><div class="line">        page=1</div><div class="line"></div><div class="line">    <span class="keyword">if</span> page&lt;1:</div><div class="line">        page=1</div><div class="line"></div><div class="line">    range_first_page=page-fenye_num_av</div><div class="line">    range_last_page=page+fenye_num_av</div><div class="line"></div><div class="line">    <span class="keyword">if</span> range_first_page&lt;0:</div><div class="line">        range_first_page=0</div><div class="line">        range_last_page=fenye_num</div><div class="line"></div><div class="line">    p = Paginator(objects, num)</div><div class="line"></div><div class="line">    page_range=list(p.page_range)[range_first_page:range_last_page]</div><div class="line"></div><div class="line">    last_page=len(p.page_range)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> page&gt;last_page:</div><div class="line">        page=1</div><div class="line"></div><div class="line">    page1 = p.page(page)</div><div class="line"></div><div class="line">    object_list=page1.object_list</div><div class="line"></div><div class="line">    <span class="built_in">return</span> object_list,page_range,last_page</div></pre></td></tr></table></figure></p>
<p>但个人使用以后发现性能不好，因为每次请求页面需要先获取所有的数据，再通过此模块计算出此页面需要展示的数据，当所有的数据量比较大时，返回就比较慢了(也可能是我没用对这个模块)。因此，我自己写了一个分页的模块。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">def fenye(all_num,page,num,page_list_num):</div><div class="line">    <span class="string">''</span><span class="string">'分页计算</span></div><div class="line">    @all_num:数据库记录总量</div><div class="line">    @page:当前页码</div><div class="line">    @num:每一页显示的记录条数</div><div class="line">    @page_list_num:分页导航显示多少个数字，要为偶数</div><div class="line">    @page_list_aver:page_list_num除以2</div><div class="line"></div><div class="line">    return：</div><div class="line">    @page:显示第几页</div><div class="line">    @last_page:最后一页的数字</div><div class="line">    @page_list:分页栏显示的数字范围</div><div class="line">    '<span class="string">''</span></div><div class="line"></div><div class="line">    page=int(page)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> all_num!=0:</div><div class="line">        last_page = all_num/num-1 <span class="keyword">if</span> all_num%num == 0 <span class="keyword">else</span> all_num/num <span class="comment">#计算最后一页数字</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        last_page=0</div><div class="line"></div><div class="line">    page_list_aver=page_list_num/2</div><div class="line"> </div><div class="line">    page=last_page <span class="keyword">if</span> page &gt; last_page <span class="keyword">else</span> page <span class="comment">#判断请求的页数是否超过范围</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> page &gt; page_list_aver:</div><div class="line">        <span class="keyword">if</span> last_page &gt; page+page_list_aver:</div><div class="line"></div><div class="line">            page_list=range(page - page_list_aver , page + page_list_aver)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line"></div><div class="line">            page_list=range(last_page - (page_list_num-1), last_page + 1)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> last_page &gt; page_list_num:</div><div class="line"></div><div class="line">            page_list = range(page_list_num)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line"></div><div class="line">            page_list = range(last_page + 1)</div><div class="line"></div><div class="line">    <span class="built_in">return</span> page,last_page,page_list</div></pre></td></tr></table></figure></p>
<p>这样不需要提前先查询出所有的数据存入内存，而只需要查询出总共存在多少条数据（注意，这里的查询语句由select <code>*</code> 改为select count(<code>*</code>)会快很多）。获取到分页函数返回的page后，可以结合sql语句中的limit功能，查询分页要展示的数据内容。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from <span class="built_in">test</span> <span class="built_in">limit</span> page*num,num <span class="comment"># page为分页返回的显示页码，num是一页显示的数据数量</span></div></pre></td></tr></table></figure></p>
<h4 id="session做身份认证"><a href="#session做身份认证" class="headerlink" title="session做身份认证"></a>session做身份认证</h4><p>这个功能就是用来验证用户身份的，可配合登录功能，写一个装饰器函数，检查全局是否存在session值。（session值是一个字典格式，在用户登录时生成）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">def session_check(level=2,return_=False):</div><div class="line">    <span class="string">''</span><span class="string">'session_check装饰器函数 针对函数</span></div><div class="line">    @level：可以给用户区分权限</div><div class="line">    @return_:检测到不存在session后跳转到不同的页面</div><div class="line">    '<span class="string">''</span></div><div class="line">    def dec(func):</div><div class="line">        def warp(request,*args,**kwargs):</div><div class="line">            <span class="keyword">if</span> request.session.get(<span class="string">'user_id'</span>,False) and int(request.session.get(<span class="string">'level'</span>))&lt;=level:</div><div class="line">                <span class="built_in">return</span> func(request,*args,**kwargs)</div><div class="line">            <span class="keyword">elif</span> return_:</div><div class="line">                <span class="built_in">return</span> HttpResponse(<span class="string">'&lt;head&gt;&lt;meta http-equiv="refresh" content="0.0001;url=/login/"&gt;&lt;/head&gt;'</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="built_in">return</span> HttpResponse(<span class="string">'&lt;head&gt;&lt;meta http-equiv="refresh" content="0.0001;url=/error/"&gt;&lt;/head&gt;'</span>)</div><div class="line">        <span class="built_in">return</span> warp</div><div class="line"></div><div class="line">    <span class="built_in">return</span> dec</div></pre></td></tr></table></figure></p>
<p>使用的话，直接在需要权限控制的函数上添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@session_check(return_=True)</div><div class="line">def vul_index(request):</div><div class="line">    <span class="string">''</span><span class="string">' 漏洞扫描 '</span><span class="string">''</span></div><div class="line">    pass</div></pre></td></tr></table></figure></p>
<p><code>暂时就想到了这些，先记这么多吧，等以后遇上了再补充一些，o了</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;2018年的第一场雪，比2002年来得更晚一些&lt;/blockquote&gt;&lt;br&gt;　　记得之前有分享过Django开发相关的系列文章（可在博客右上方自行搜索），内容包括模版、视图、路由等。那么本篇再补充一些Django开发过程中常用到的一些功能代码块，内容涉及前端、后端相关功能代码。这些代码块都是平常开发中常用的，因此在此做个备份，方便查询。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="django" scheme="http://thief.one/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>利用Whatweb获取Web指纹信息</title>
    <link href="http://thief.one/2018/01/11/1/"/>
    <id>http://thief.one/2018/01/11/1/</id>
    <published>2018-01-11T11:50:06.000Z</published>
    <updated>2018-01-11T12:29:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">我都寂寞多久了还是没好<br>感觉全世界都在窃窃嘲笑</blockquote>

<p>　　又是很久没有更新博客啦，为啥呢？因为在忙开发、开发、开发。我最近在研究指纹扫描以及漏洞扫描方面的设计与开发，从前端、后端到数据存储、消息队列再到分布式部署，感觉自己简直快成全栈了。不过开发过程中也有很多收获，有时间我会写博客分享一下。<br><a id="more"></a><br>　　那么今天写点啥呢？就分享个很老的安全工具吧——whatweb，相信很多朋友应该知道，用来扫web指纹的。为啥会用到它，因为项目需要啊，其实也可以不用，因为我自己写了很多扫描指纹的插件，这个只是作为备案选择而已。但既然用到了，那就理所当然要为它打call。好了，照旧先介绍如何安装，再介绍如何使用，本文重点在于环境安装，以及如何在python代码中比较<code>优雅</code>的使用whatweb。</p>
<h3 id="安装升级ruby"><a href="#安装升级ruby" class="headerlink" title="安装升级ruby"></a>安装升级ruby</h3><p>whatweb是用ruby开发的，因此服务器上需要安装ruby，且对版本有要求，貌似必须2.0以上（没记错的话）。目前很多服务器内置的ruby是1.8的，或者用yum install ruby安装的也是1.8的，因此需要安装或者升级版本到2.0以上才行。</p>
<h4 id="升级方案one（推荐）"><a href="#升级方案one（推荐）" class="headerlink" title="升级方案one（推荐）"></a>升级方案one（推荐）</h4><p>先删除原来的ruby：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum remove ruby ruby-devel</div></pre></td></tr></table></figure></p>
<p>下载ruby安装包，并进行编译安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.2.tar.gz</div><div class="line">tar xvfvz ruby-2.1.2.tar.gz</div><div class="line">./configure</div><div class="line">make</div><div class="line">sudo make install</div></pre></td></tr></table></figure></p>
<p>将ruby添加到环境变量，ruby安装在/usr/local/bin/目录下，因此编辑 ~/.bash_profile文件，添加一下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/bin/</div></pre></td></tr></table></figure></p>
<p>不要忘了生效一下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.bash_profile</div></pre></td></tr></table></figure></p>
<p>参考：<a href="http://ask.xmodulo.com/upgrade-ruby-centos.html" target="_blank" rel="external">http://ask.xmodulo.com/upgrade-ruby-centos.html</a></p>
<h4 id="升级方案two"><a href="#升级方案two" class="headerlink" title="升级方案two"></a>升级方案two</h4><p>先安装rvm，这是ruby的包管理器:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl -L get.rvm.io | bash -s stable  </div><div class="line">$ <span class="built_in">source</span> ~/.bash_profile</div></pre></td></tr></table></figure></p>
<p>测试是否安装成功:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm -v</div></pre></td></tr></table></figure></p>
<p>利用rvm升级ruby:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ruby -v  <span class="comment">#查看当前ruby版本  </span></div><div class="line">rvm list known  <span class="comment">#列出已知的ruby版本</span></div><div class="line">rvm install 2.0 <span class="comment">#安装ruby 2.0</span></div></pre></td></tr></table></figure></p>
<h3 id="安装whatweb"><a href="#安装whatweb" class="headerlink" title="安装whatweb"></a>安装whatweb</h3><p>说起来这个就很简单，直接去github上clone下项目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/urbanadventurer/WhatWeb.git</div></pre></td></tr></table></figure></p>
<p>项目内已经有编译好的可执行文件，whatweb，只需要添加个环境变量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PATH=<span class="variable">$PATH</span>:/root/WhatWeb-master/</div></pre></td></tr></table></figure></p>
<h3 id="使用whatweb"><a href="#使用whatweb" class="headerlink" title="使用whatweb"></a>使用whatweb</h3><p>具体详细的使用方式就要参考<a href="https://github.com/urbanadventurer/WhatWeb" target="_blank" rel="external">github</a>了，我这边只介绍怎么在python中使用whatweb。</p>
<p>废话不多说，直接上代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">import commands</div><div class="line">import re</div><div class="line"></div><div class="line"><span class="comment"># 正则表达式</span></div><div class="line">p_httpserver=re.compile(r<span class="string">"HTTPServer\x1b\[0m\[\x1b\[1m\x1b\[36m([^,]+?)\x1b\[0m\]"</span>)</div><div class="line">p_title=re.compile(r<span class="string">"Title\x1b\[0m\[\x1b\[1m\x1b\[33m(.+?)\x1b\[0m\]"</span>)</div><div class="line">p_ip=re.compile(r<span class="string">"IP\x1b\[0m\[\x1b\[37m([^,]+?)\x1b\[0m\]"</span>)</div><div class="line">p_country=re.compile(r<span class="string">"Country\x1b\[0m\[\x1b\[37m([^,]+?)\x1b\[0m\]"</span>)</div><div class="line">p_cookies=re.compile(r<span class="string">"Cookies\x1b\[0m\[\x1b\[37m([^,]+?)\x1b\[0m\]"</span>)</div><div class="line">p_x_powered_by=re.compile(r<span class="string">"X-Powered-By\x1b\[0m\[\x1b\[37m([^,]+?)\x1b\[0m\]"</span>)</div><div class="line"></div><div class="line">def re_grep(p,content):</div><div class="line">  <span class="comment"># 正则处理</span></div><div class="line">  L=p.findall(content)</div><div class="line">  <span class="keyword">if</span> len(L)&gt;0:</div><div class="line">    <span class="built_in">return</span> L[0]</div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    <span class="built_in">return</span> <span class="string">""</span></div><div class="line"></div><div class="line">def whatweb(url):</div><div class="line">    <span class="comment"># whatweb扫描</span></div><div class="line">    result=<span class="string">""</span></div><div class="line">    httpserver=<span class="string">""</span></div><div class="line">    title=<span class="string">""</span></div><div class="line">    ip=<span class="string">""</span></div><div class="line">    cookies=<span class="string">""</span></div><div class="line">    country=<span class="string">""</span></div><div class="line">    power_by=<span class="string">""</span></div><div class="line"></div><div class="line">    try:</div><div class="line">        status,result=commands.getstatusoutput(<span class="string">'whatweb '</span>+url)</div><div class="line">        <span class="comment"># print status,result</span></div><div class="line">    except IndexError,e:</div><div class="line">        <span class="built_in">print</span> e</div><div class="line">    <span class="keyword">else</span>:   </div><div class="line">        httpserver=re_grep(p_httpserver,result)</div><div class="line">        title=re_grep(p_title,result)</div><div class="line">        ip=re_grep(p_ip,result)</div><div class="line">        country=re_grep(p_country,result)</div><div class="line">        cookies=re_grep(p_cookies,result)</div><div class="line">        power_by=re_grep(p_x_powered_by,result)</div><div class="line"></div><div class="line">    <span class="built_in">return</span> httpserver,title,cookies,country,power_by</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    result=whatweb(<span class="string">"thief.one"</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</div><div class="line">        <span class="built_in">print</span> i</div></pre></td></tr></table></figure></p>
<p>说明：解释一下代码，主要就是一个正则表达式，因为运行whatweb会直接将结果打印，当然也有其他命令可以让其结果输出到文本等，但如果想要批量自动化扫描的话，需要实时获取whatweb的内容，生成文件的方式显然不行，因此我用了commands库，让python执行系统命令并获取返回结果，然后就是几个正则对结果的匹配。</p>
<p>结束之语：又水了一篇，嗯嗯！</p>
<p><code>如果有朋友有更好地在python代码中使用whatweb的方法，麻烦告知，我是被whatweb的输出折腾的够呛，因此才选择了用正则，无奈之举。</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;我都寂寞多久了还是没好&lt;br&gt;感觉全世界都在窃窃嘲笑&lt;/blockquote&gt;

&lt;p&gt;　　又是很久没有更新博客啦，为啥呢？因为在忙开发、开发、开发。我最近在研究指纹扫描以及漏洞扫描方面的设计与开发，从前端、后端到数据存储、消息队列再到分布式部署，感觉自己简直快成全栈了。不过开发过程中也有很多收获，有时间我会写博客分享一下。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="whatweb" scheme="http://thief.one/tags/whatweb/"/>
    
  </entry>
  
  <entry>
    <title>HTTP-API认证，Python实现方案</title>
    <link href="http://thief.one/2017/12/11/1/"/>
    <id>http://thief.one/2017/12/11/1/</id>
    <published>2017-12-11T08:40:01.000Z</published>
    <updated>2017-12-11T09:53:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">一杯敬自由，一杯敬死亡</blockquote><br>　　标题写的比较模糊拗口，简单来说本文就是介绍如何利用python将http的api接口做加密认证，防止不法分子乱用。这里有几个前提需要说明下，首先我们要实现的是http的加密认证，因此不考虑https。其次认证的目的是为了让一个http的api接口让正确的（通过认证的）人使用，而不是任何都可以用。<br><a id="more"></a></p>
<h3 id="设计方案"><a href="#设计方案" class="headerlink" title="设计方案"></a>设计方案</h3><p>明白了http api认证的目的，那么就来设计方案吧！</p>
<h4 id="最偷懒的方案"><a href="#最偷懒的方案" class="headerlink" title="最偷懒的方案"></a>最偷懒的方案</h4><p>我之前写过几个api接口，主要是自己用来传输一些数据库数据的，由于数据有一点敏感，因此使用了认证。当时为了偷懒，认证的方式写得特别简单无脑，即在api接口上增加了一个auth字段，字段的内容会在服务端进行校验，但其内容是一串写死的md5。这虽然也算是一种认证方式(不知道auth字段内容的朋友无法拿到api接口的数据)，但如果局域网内流量被监听，那这种方案就形同虚设了。</p>
<h4 id="比较简单实用的设计方案"><a href="#比较简单实用的设计方案" class="headerlink" title="比较简单实用的设计方案"></a>比较简单实用的设计方案</h4><p>一种比较好的设计方案，是在客户端与服务端实现一套加密算法，算法可自定义但最好复杂一点。如将请求的参数以及内容以一定的方式排列后，可以再加上时间戳，整体做一个hash运算。服务端将获取的参数同样做hash，与客户端传递的hash做对比。因为有了时间戳，即使被监听了流量，进行流量重放也是不能认证成功的。（因为时间戳存在差异）</p>
<p><em>说明一下：本文介绍的是api的一个认证方式，这跟网站啥的认证还是有区别的。主要还是看api的应用场景，如果是给内部人员调用，而且调用的用户不多，其实以上认证方案足够了。因为用来加密的密钥（key）可以用其他安全的方式发送给用户（甚至可以写纸上，2333），而不必像https协议一样，使用非对称加密+对称加密，并且使用数字证书等一系列复杂的加密认证方式。</em></p>
<hr>

<p>好了，前文介绍了一些api认证的方案，那么接下来再写点啥呢？我不打算介绍怎么去开发一个认证方案的代码，我主要想推荐一个开源的项目—hawk，因为它就是用来实现http加密认证的，而且它有一个python的实现模块（mohawk），推荐它是因为它比较简单实用。</p>
<p>因为之前研究过mohawk模块2个小时（真的是2个小时），因此本文主要介绍一下mohawk的用法。企业内部一般自己设计api的加密认证方案（一般是生成一个token密文，严格一点的会做双因子认证），因此这个模块适合给初学者练练手，也可以给打算自己设计认证方案的朋友提供一种思路。以下内容是我阅读mohawk文档总结的一些基础用法，更详细的可以参考下官网文档。</p>
<h3 id="hawk介绍"><a href="#hawk介绍" class="headerlink" title="hawk介绍"></a>hawk介绍</h3><p>hawk项目地址：<a href="https://github.com/hueniverse/hawk" target="_blank" rel="external">https://github.com/hueniverse/hawk</a><br>python实现：<a href="https://github.com/kumar303/mohawk" target="_blank" rel="external">https://github.com/kumar303/mohawk</a><br>官方文档：<a href="https://mohawk.readthedocs.io/en/latest/" target="_blank" rel="external">https://mohawk.readthedocs.io/en/latest/</a></p>
<h4 id="安装hawk"><a href="#安装hawk" class="headerlink" title="安装hawk"></a>安装hawk</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install mohawk</div></pre></td></tr></table></figure>
<h3 id="构建一个webserver"><a href="#构建一个webserver" class="headerlink" title="构建一个webserver"></a>构建一个webserver</h3><p>这里我使用python的falcon框架来构建一个api webserver，如果对falcon框架不熟悉，可以先阅读：<a href="https://thief.one/2017/11/27/1/">https://thief.one/2017/11/27/1/</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">import falcon</div><div class="line">from mohawk import Receiver <span class="comment"># 导入mohawk模块的Receiver方法</span></div><div class="line">from wsgiref import simple_server</div><div class="line"></div><div class="line"><span class="comment"># 认证字典,可以创建不同的用户，每个用户都可以用不同的密钥（key）</span></div><div class="line">allowed_senders=&#123;</div><div class="line"></div><div class="line">    <span class="string">"test"</span>:&#123;</div><div class="line"></div><div class="line">        <span class="string">'id'</span>: <span class="string">'test'</span>,</div><div class="line">        <span class="string">'key'</span>: <span class="string">'110'</span>,</div><div class="line">        <span class="string">'algorithm'</span>: <span class="string">'sha256'</span></div><div class="line"></div><div class="line">    &#125;, <span class="comment"># test 用户组</span></div><div class="line"></div><div class="line">    <span class="string">"nmask"</span>:&#123;</div><div class="line"></div><div class="line">        <span class="string">'id'</span>: <span class="string">'nmask'</span>,</div><div class="line">        <span class="string">'key'</span>: <span class="string">'112'</span>,</div><div class="line">        <span class="string">'algorithm'</span>: <span class="string">'sha256'</span></div><div class="line"></div><div class="line">    &#125;, <span class="comment"># nmask 用户组</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">def lookup_credentials(sender_id):</div><div class="line">    <span class="string">''</span><span class="string">' 验证用户是否在允许的范围内 '</span><span class="string">''</span></div><div class="line">    <span class="keyword">if</span> sender_id <span class="keyword">in</span> allowed_senders:</div><div class="line">        <span class="built_in">return</span> allowed_senders[sender_id]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        raise LookupError(<span class="string">'unknown sender'</span>)</div><div class="line"></div><div class="line"></div><div class="line">class Test(object):</div><div class="line">    def on_post(self, req, resp):</div><div class="line">    <span class="string">''</span><span class="string">' http post 方法 '</span><span class="string">''</span></div><div class="line">        try:</div><div class="line">            Receiver(</div><div class="line">                    lookup_credentials, </div><div class="line">                    req.headers.get(<span class="string">'AUTHORIZATION'</span>), <span class="comment"># 请求时生成的密钥</span></div><div class="line">                    req.url,</div><div class="line">                    req.method,</div><div class="line">                    content= req.stream.read(),</div><div class="line">                    content_type=req.headers.get(<span class="string">'CONTENT-TYPE'</span>)</div><div class="line">            )</div><div class="line">        except Exception,e:</div><div class="line">            <span class="string">''</span><span class="string">' 报错则说明认证失败 '</span><span class="string">''</span></div><div class="line">            <span class="built_in">print</span> e</div><div class="line">            resp.status = falcon.HTTP_403  <span class="comment"># This is the default status</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            resp.status = falcon.HTTP_200  <span class="comment"># This is the default status</span></div><div class="line">            resp.body = (<span class="string">'Hello World!'</span>)</div><div class="line"></div><div class="line"></div><div class="line">    def on_get(self, req, resp):</div><div class="line">        <span class="string">''</span><span class="string">' http get 方法 '</span><span class="string">''</span></div><div class="line">        try:</div><div class="line">            Receiver(</div><div class="line">                    lookup_credentials,</div><div class="line">                    req.headers.get(<span class="string">'AUTHORIZATION'</span>),</div><div class="line">                    req.url,</div><div class="line">                    req.method,</div><div class="line">                    content= req.stream.read(),</div><div class="line">                    content_type=req.headers.get(<span class="string">'CONTENT-TYPE'</span>)</div><div class="line">            )</div><div class="line">        except Exception,e:</div><div class="line">            <span class="built_in">print</span> e</div><div class="line">            resp.status = falcon.HTTP_403  <span class="comment"># This is the default status</span></div><div class="line">            resp.body = (<span class="string">'authorization fail!'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            resp.status = falcon.HTTP_200  <span class="comment"># This is the default status</span></div><div class="line">            resp.body = (<span class="string">'Hello World!'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">app = falcon.API()</div><div class="line"><span class="built_in">test</span> = Test()</div><div class="line">app.add_route(<span class="string">'/'</span>, <span class="built_in">test</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    httpd = simple_server.make_server(<span class="string">'127.0.0.1'</span>, 8000, app)</div><div class="line">    httpd.serve_forever()</div></pre></td></tr></table></figure></p>
<h3 id="构建一个http请求"><a href="#构建一个http请求" class="headerlink" title="构建一个http请求"></a>构建一个http请求</h3><p>搭建好webserver以后，我们自然需要构建http请求，去验证请求是否经历了认证的过程，且认证的结果是否正确，这里使用requests包去构建。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">import json</div><div class="line">import requests</div><div class="line">from mohawk import Sender <span class="comment"># 导入mohawk模块的Sender方法</span></div><div class="line"></div><div class="line">url = <span class="string">"http://127.0.0.1:8000/"</span></div><div class="line">post_data = json.dumps(<span class="string">""</span>) <span class="comment"># 如果是get请求，参数内容可以设置为""</span></div><div class="line">content_type = <span class="string">'application/x-www-form-urlencoded'</span></div><div class="line"></div><div class="line"><span class="comment"># 用于认证的字典</span></div><div class="line">credentials = &#123;</div><div class="line"></div><div class="line">               <span class="string">'id'</span>: <span class="string">'test'</span>,</div><div class="line">               <span class="string">'key'</span>: <span class="string">'10'</span>,</div><div class="line">               <span class="string">'algorithm'</span>: <span class="string">'sha256'</span></div><div class="line">           &#125;</div><div class="line"></div><div class="line">sender = Sender(credentials,</div><div class="line">                url = url, <span class="comment"># 必填</span></div><div class="line">                method = <span class="string">'POST'</span>, <span class="comment"># 必填 </span></div><div class="line">                content = post_data, <span class="comment"># 必填，如果是get请求，参数内容可以设置为""</span></div><div class="line">                content_type = content_type <span class="comment"># 必填</span></div><div class="line">            )</div><div class="line"></div><div class="line"><span class="built_in">print</span> sender.request_header <span class="comment"># 生成的密文，通过header的形式传递到服务端</span></div><div class="line"></div><div class="line">res=requests.post(</div><div class="line">                url = url,</div><div class="line">                data = post_data,</div><div class="line">                headers=&#123;</div><div class="line">                        <span class="string">'Authorization'</span>: sender.request_header,</div><div class="line">                        <span class="string">'Content-Type'</span>: content_type</div><div class="line">                        &#125;</div><div class="line">                )</div><div class="line"></div><div class="line"><span class="built_in">print</span> res.status_code</div><div class="line"><span class="built_in">print</span> res.text</div></pre></td></tr></table></figure></p>
<h3 id="mohawk模块说明"><a href="#mohawk模块说明" class="headerlink" title="mohawk模块说明"></a>mohawk模块说明</h3><p>mohawk是hawk的python实现，有几个主要方法：Sender、Receiver等，详细的可以去阅读源码。</p>
<p>Sender方法用来生成在http请求认证中所需的密码，该方法需要传递几个参数，比如：url、method、content（post_data）、content_type、credentials(认证的字典，包含了id、key、加密方式)等，该方法会根据传递的参数值，生成一个密文密码，然后我们可以将其放在headers中传递到服务端。</p>
<p>Receiver方法用来在服务端接收客户端传递的请求，根据获取的参数的内容计算出一个新的密文密码，与客户端传递的密文进行对比，达到认证的效果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;一杯敬自由，一杯敬死亡&lt;/blockquote&gt;&lt;br&gt;　　标题写的比较模糊拗口，简单来说本文就是介绍如何利用python将http的api接口做加密认证，防止不法分子乱用。这里有几个前提需要说明下，首先我们要实现的是http的加密认证，因此不考虑https。其次认证的目的是为了让一个http的api接口让正确的（通过认证的）人使用，而不是任何都可以用。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="python" scheme="http://thief.one/tags/python/"/>
    
  </entry>
  
</feed>
